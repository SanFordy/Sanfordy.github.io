<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[【12】基本运算]]></title>
      <url>http://sanfordy.com/2016/08/01/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9012%E3%80%91%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　<br>计算机的基本能力就是计算，所以一门程序设计语言的计算能力是非常重要的。C语言之所以无所不能，是因为它不仅有丰富的数据类型，还有强大的计算能力。C语言一共有34种运算符，包括了常见的加减乘除运算。这讲就对C语言中的运算符做一个详细介绍。</p>
<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>　<br>算术运算符非常地简单，就是小学数学里面的一些加减乘除操作。不过呢，还是有一些语法细节需要注意的。</p>
<h2 id="加法运算符"><a href="#加法运算符" class="headerlink" title="加法运算符 +"></a>加法运算符 +</h2><p>跟平时用的加号一样。</p>
<h2 id="减法运算符-或-负值运算符"><a href="#减法运算符-或-负值运算符" class="headerlink" title="减法运算符 或 负值运算符 -"></a>减法运算符 或 负值运算符 -</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b = <span class="number">10</span> - <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">-10</span>;</span><br></pre></td></tr></table></figure>
<p>（1）在第1行利用减法运算符 - 进行了减法运算，再将差赋值给了变量b，最终变量b的值是5。<br>（2）在第3行中，这个 - 并不是什么减法运算符，而算是一个负值运算符，-10代表的是负十。</p>
<h2 id="乘法运算符"><a href="#乘法运算符" class="headerlink" title="乘法运算符 *"></a>乘法运算符 *</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b = <span class="number">10</span> * <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：乘法运算符并不是x或者X，而是星号*。变量b最终的值是50。</p>
</blockquote>
<h2 id="除法运算符"><a href="#除法运算符" class="headerlink" title="除法运算符 /"></a>除法运算符 /</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">10.0</span> / <span class="number">4</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">10</span> / <span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a=%f, b=%f \n"</span>, a, b);</span><br></pre></td></tr></table></figure>
<p>（1）第1行中的10.0是浮点型，4是整型，因此会将4自动类型提升为浮点型后再进行运算，最后变量b的值是2.5。<br>（2）第2行中的10和4都是整型，计算机中的运算有个原则：相同数据类型的值才能进行运算，而且运算结果依然是同一种数据类型。因此，整数除于整数，求出来的结果依然是整数，会损失小数部分。最后变量b的值是2。查看输出结果：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201608/776348-20160801091739325-141477970.png" alt=""></p>
<p>（3）如果想让整数除于整数不损失精度的话，可以将某个整数强制转换为浮点型数据</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = (double)<span class="number">10</span> / <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> b = <span class="number">10</span> / (double)<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> c = (double)<span class="number">10</span> / (double)<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d = (double) (<span class="number">10</span> / <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>　　（a）10和4之间只要有1个强转为浮点型数据即可，另外1个整数会自动类型提升为浮点型数据。因此，变量a、b、c的值都是2.5。<br>　　（b）变量d的情况就不一样了，第7行代码的意思是先计算(10/4)的值，再将(10/4)的值强转为浮点型数据。(10/4)的值是2，将2强转为浮点型数据，那不也就是2么？所以，变量d的值是2。</p>
<blockquote>
<p><strong>注意</strong>：除法运算符并不是÷，而是一个正斜杠 /。</p>
</blockquote>
<h2 id="模运算符-或称-取余运算符"><a href="#模运算符-或称-取余运算符" class="headerlink" title="模运算符 或称 取余运算符 %"></a>模运算符 或称 取余运算符 %</h2><p>这个%并不是除号÷，它是一个取余运算符，或者叫做模运算符。取余的意思是，取得两个整数相除之后的余数。比如，5除于2的余数是1，5除于3的余数是2。因此使用这个%有个原则：%两侧必须都为整数。下面的写法是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5.0</span> % <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>编译器会直接报错，因为5.0并非整数。</p>
<h3 id="正数取余"><a href="#正数取余" class="headerlink" title="正数取余"></a>正数取余</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span> % <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span> % <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>简单计算可得：变量a的值为1，变量b的值为2。</p>
<h3 id="负数取余"><a href="#负数取余" class="headerlink" title="负数取余"></a>负数取余</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">-5</span> % <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span> % <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">-5</span> % <span class="number">-2</span>;</span><br></pre></td></tr></table></figure>
<p>利用%求出来的余数是正数还是负数，由%左边的被除数决定，被除数是正数，余数就是正数，反之则反。因此变量a、b、c的值分别是-1、1、-1。</p>
<h2 id="运算顺序"><a href="#运算顺序" class="headerlink" title="运算顺序"></a>运算顺序</h2><h3 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h3><p>用算术运算符将数据连接起来的式子，称为“算术表达式”。比如a + b、10 * 5等。如果表达式比较复杂的话，那么就要注意一下它的运算顺序。表达式的运算顺序是按照运算符的结合方向和优先级进行的。</p>
<h3 id="结合方向"><a href="#结合方向" class="headerlink" title="结合方向"></a>结合方向</h3><p>算术运算符的结合方向是从左到右。例如表达式2+3+4，先计算2+3。</p>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>优先级越高，就越先进行运算，当优先级相同时，参照结合方向。</p>
<p>算术运算符的优先级排序：负值运算符（-）&gt; 乘（*）、除（/）、模（%）运算符 &gt; 加（+）、减（-）运算符。</p>
<h3 id="小括号"><a href="#小括号" class="headerlink" title="小括号"></a>小括号</h3><p>如果需要先计算优先级低的可以使用小括号()括住，小括号的优先级是最高的！</p>
<h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><p>　<br>赋值运算符又分两种：简单赋值运算符 和 复合赋值运算符。</p>
<h2 id="简单赋值运算符"><a href="#简单赋值运算符" class="headerlink" title="简单赋值运算符 ="></a>简单赋值运算符 =</h2><h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><p>其实这个等号 = 从讲变量开始就见过它了，它的作用是将右边的值赋值给左边。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = 10 + 5;</span><br></pre></td></tr></table></figure>
<p>赋值运算符的结合方向是：从右到左，而且优先级比算术运算符低。因此先进行等号=右边的加法运算，运算完毕后再将结果赋值给等号右边的变量。最后变量a的值是15。</p>
<h3 id="连续赋值"><a href="#连续赋值" class="headerlink" title="连续赋值"></a>连续赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> int a, b;</span><br><span class="line"> </span><br><span class="line">a = b = 10;</span><br></pre></td></tr></table></figure>
<p>（1）在第1行分别定义了int类型的变量a、b。<br>（2）第3行代码的意思：将10赋值给变量b，再把变量b的值赋值给a。所以最后变量a、b的值都是10。</p>
<h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><p>等号=左边只能是变量，不能是常量！常量都是不可变的，怎么可以再次赋值呢？下面的写法是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> = <span class="number">10</span> + <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h2 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a += <span class="number">3</span>+<span class="number">2</span>  <span class="comment">//  等价于 a = a +（3+2）。</span></span><br><span class="line">a -= <span class="number">3</span>+<span class="number">2</span>，<span class="comment">//  等价于 a = a -（3+2）。</span></span><br><span class="line">a *= <span class="number">3</span>+<span class="number">2</span>，<span class="comment">//  等价于 a = a *（3+2）。</span></span><br><span class="line">a /= <span class="number">3</span>+<span class="number">2</span>，<span class="comment">//  等价于 a = a /（3+2）。</span></span><br><span class="line">a %= <span class="number">3</span>+<span class="number">2</span>，<span class="comment">//  等价于 a = a %（3+2）。</span></span><br></pre></td></tr></table></figure>
<h1 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h1><p>自增自减运算符都只能用于变量，你写个5++是错误的，因为5是常量。</p>
<h2 id="自增运算符"><a href="#自增运算符" class="headerlink" title="自增运算符"></a>自增运算符</h2><p>自增运算符<code>++</code>：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a++; <span class="comment">//  等价于 a = a+1;</span></span><br><span class="line">++a; <span class="comment">//  等价于 a = a+1;</span></span><br></pre></td></tr></table></figure>
<h2 id="自减运算符"><a href="#自减运算符" class="headerlink" title="自减运算符"></a>自减运算符</h2><p>自减运算符<code>--</code>：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a--; <span class="comment">//  等价于 a = a-1;</span></span><br><span class="line">--a; <span class="comment">//  等价于 a = a-1;</span></span><br></pre></td></tr></table></figure>
<h2 id="a和a-的区别"><a href="#a和a-的区别" class="headerlink" title="++a和a++的区别"></a>++a和a++的区别</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = ++a;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br></pre></td></tr></table></figure>
<p>上面两段代码的执行结果是有区别的：</p>
<p>（1）第1段代码：++a的意思是先对a执行+1操作，再将a的值赋值给b。因此最后a、b的值都是11。<br>（2）第2段代码：a++的意思是先将a的值拷贝出来一份，然后对a执行+1操作，于是a变成了11，但是拷贝出来的值还是10，a++运算完毕后，再将拷贝出来的值10赋值给了b，所以最后变量b的值是10，变量a的值是11。</p>
<blockquote>
<p><strong>注意</strong>：自减运算符也是一样的区别。</p>
</blockquote>
<p>再来看一个比较刁钻的例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"> a = a++;</span><br></pre></td></tr></table></figure>
<p>很多人一眼看上去，觉得最后a的值应该是11，其实最后a的值是10。前面已经说过a++的作用了，这里也是一样的。先将a的值拷贝出来一份，然后对a执行+1操作，于是a变成了11，但是拷贝出来的值还是10，a++运算完毕后，再将拷贝出来的值10赋值给了a，所以最后变量a的值是10。</p>
<h1 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h1><p>逗号运算符（,）主要用于连接表达式，用逗号运算符连接起来的表达式称为逗号表达式。它的一般形式为：表达式1, 表达式2, … …, 表达式n。</p>
<p>逗号表达式的运算过程是：从左到右的顺序，先计算表达式1，接着计算表达式2，…，最后计算表达式n，整个逗号表达式的值是最后一个表达式的值：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line">c = (++a, a *= <span class="number">2</span>, b = a / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c = %d"</span>, c);</span><br></pre></td></tr></table></figure>
<p>++a的结果为3，a *= 2的结果为6，b = a / 3的结果为2。因此，输出结果为：c = 2</p>
<p>这里要注意的是，右边的表达式是有用括号()包住的，如果不用括号包住，也就是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = ++a, a *= <span class="number">2</span>, b = a / <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c = %d"</span>, c);</span><br></pre></td></tr></table></figure>
<p>输出结果将为：c = 3，因为c = ++a也属于逗号表达式的一部分，跟后面的a *= 2以及b = a / 3是相互独立的。</p>
<h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><h2 id="“真”与“假”"><a href="#“真”与“假”" class="headerlink" title="“真”与“假”"></a>“真”与“假”</h2><p>默认情况下，我们在程序中写的每一句正确代码都会被执行。但很多时候，我们想在某个条件成立的情况下才执行某一段代码。比如微信的这个界面：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160731215744731-1017647345.png" alt=""></p>
<p>如果用户点击了注册按钮，我们就执行“跳转到注册界面”的代码；如果用户点击了登录按钮，我们就执行“跳转到登录界面”的代码。如果用户没做出任何操作，就不执行前面所说的两段代码。像这种情况的话可以使用条件语句来完成，但是我们暂时不学习条件语句，先来看一些更基础的知识：如何判断一个条件成不成立。如果这个都不会判断，还执行什么代码。</p>
<p>在C语言中，条件成立称为“真”，条件不成立称为“假”，因此，判断条件是否成立，就是判断条件的“真假”。那怎么判断真假呢？C语言规定，任何非0值都为“真”，只有0才为“假”。也就是说，108、-18、4.5、-10.5等都是“真”，0则是“假”。</p>
<h2 id="关系运算符的简单使用"><a href="#关系运算符的简单使用" class="headerlink" title="关系运算符的简单使用"></a>关系运算符的简单使用</h2><p>（1）小于。比如a<5。 （2）小于等于。比如a<="5。" （3）大于。比如a="">5。<br>（4）大于等于。比如a&gt;=5。<br>（5）等于。比如a==5。<br>（6）不等于。比如a!=5。</5。></p>
<p>关系运算符的运算结果只有2种：如果条件成立，结果就为1，也就是“真”；如果条件不成立，结果就为0，也就是“假”。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a1 = <span class="number">5</span> &gt; <span class="number">4</span>; <span class="comment">// 1</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">5</span> &lt; <span class="number">4</span>; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h2 id="关系运算符的使用注意"><a href="#关系运算符的使用注意" class="headerlink" title="关系运算符的使用注意"></a>关系运算符的使用注意</h2><p>（1）关系运算符中==、!=的优先级相等，&lt;、&lt;=、&gt;、&gt;=的优先级相等，且前者的优先级低于后者。<br>　　例如2==3&gt;1 ：先算3&gt;1，条件成立，结果为1。再计算2==1，条件不成立，结果为0。因此2==3&gt;1的结果为0。<br>（2）关系运算符的结合方向为“从左往右”。<br>　　例如4&gt;3&gt;2 ：先算4&gt;3，条件成立，结果为1。再与2比较，即1&gt;2，条件不成立，结果为0。因此4&gt;3&gt;2的结果为0。<br>（3）关系运算符的优先级小于算术运算符。<br>　　例如3+4&gt;8-2 ：先计算3+4，结果为7。再计算8-2，结果为6。最后计算7&gt;6，条件成立，结果为1。因此3+4&gt;8-2的结果为1。</p>
<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>　<br>有时候，我们需要在多个条件同时成立的时候才能执行某段代码，比如：用户只有同时输入了QQ和密码，才能执行登录代码，如果只输入了QQ或者只输入了密码，就不能执行登录代码。这种情况下，我们就要借助于C语言提供的逻辑运算符。</p>
<p>C语言提供了3个逻辑运算符：&amp;&amp;（逻辑与）、||（逻辑或）、!（逻辑非）。注意：这些都是英文字符，不要写成中文字符。跟关系运算符一样，逻辑运算的结果只有2个：“真”为1，“假”为0。</p>
<h2 id="amp-amp-逻辑与"><a href="#amp-amp-逻辑与" class="headerlink" title="&amp;&amp; 逻辑与"></a>&amp;&amp; 逻辑与</h2><h3 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h3><p>“条件A &amp;&amp; 条件B”</p>
<h3 id="运算结果"><a href="#运算结果" class="headerlink" title="运算结果"></a>运算结果</h3><p>只有当条件A和条件B都成立时，结果才为1，也就是“真”；其余情况的结果都为0，也就是“假”。因此，条件A或条件B只要有一个不成立，结果都为0，也就是“假”</p>
<h3 id="运算过程"><a href="#运算过程" class="headerlink" title="运算过程"></a>运算过程</h3><p>（1）总是先判断条件A是否成立。<br>（2）如果条件A成立，接着再判断条件B是否成立：如果条件B成立，“条件A &amp;&amp; 条件B”的结果就为1，即“真”，如果条件B不成立，结果就为0，即“假”。<br>（3）如果条件A不成立，就不会再去判断条件B是否成立：因为条件A已经不成立了，不管条件B如何，“条件A &amp;&amp; 条件B”的结果肯定是0，也就是“假”。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>逻辑与的结合方向是“自左至右”。比如表达式 (a&gt;3) &amp;&amp; (a&lt;5)：</p>
<p>（1）若a的值是4：先判断a&gt;3，成立；再判断a<5，也成立。因此结果为1。 （2）若a的值是2：先判断a="">3，不成立，停止判断。因此结果为0。<br>（3）因此，如果a的值在(3, 5)这个范围内，结果就为1；否则，结果就为0。</5，也成立。因此结果为1。></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>（1）若想判断a的值是否在(3, 5)范围内，千万不能写成3<a<5，因为关系运算符的结合方向为“从左往右”。比如a为2，它会先算3<a，也就是3<2，条件不成立，结果为0。再与5比较，即0<5，条件成立，结果为1。因此3<a<5的结果为1，条件成立，也就是说当a的值为2时，a的值是在(3, 5)范围内的。这明显是不对的。正确的判断方法是：(a="">3) &amp;&amp; (a&lt;5)。<br>（2）C语言规定：任何非0值都为“真”，只有0才为“假”。因此逻辑与也适用于数值。比如 5 &amp;&amp; 4的结果是1，为“真”；-6 &amp;&amp; 0的结果是0，为“假”。</a<5，因为关系运算符的结合方向为“从左往右”。比如a为2，它会先算3<a，也就是3<2，条件不成立，结果为0。再与5比较，即0<5，条件成立，结果为1。因此3<a<5的结果为1，条件成立，也就是说当a的值为2时，a的值是在(3,></p>
<h2 id="逻辑或"><a href="#逻辑或" class="headerlink" title="||  逻辑或"></a>||  逻辑或</h2><h3 id="使用格式-1"><a href="#使用格式-1" class="headerlink" title="使用格式"></a>使用格式</h3><p>“条件A || 条件B”</p>
<h3 id="运算结果-1"><a href="#运算结果-1" class="headerlink" title="运算结果"></a>运算结果</h3><p>当条件A或条件B只要有一个成立时（也包括条件A和条件B都成立），结果就为1，也就是“真”；只有当条件A和条件B都不成立时，结果才为0，也就是“假”。</p>
<h3 id="运算过程-1"><a href="#运算过程-1" class="headerlink" title="运算过程"></a>运算过程</h3><p>（1）总是先判断条件A是否成立。<br>（2）如果条件A成立，就不会再去判断条件B是否成立：因为条件A已经成立了，不管条件B如何，“条件A || 条件B”的结果肯定是1，也就是“真”。<br>（3）如果条件A不成立，接着再判断条件B是否成立：如果条件B成立，“条件A || 条件B”的结果就为1，即“真”，如果条件B不成立，结果就为0，即“假”。</p>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>逻辑或的结合方向是“自左至右”，比如表达式 (a<3) ||="" (a="">5)：</3)></p>
<p>（1）若a的值是4：先判断a<3，不成立；再判断a>5，也不成立。因此结果为0。<br>（2）若a的值是2：先判断a&lt;3，成立，停止判断。因此结果为1。<br>（3）因此，如果a的值在(-∞, 3)或者(5, +∞)范围内，结果就为1；否则，结果就为0。</3，不成立；再判断a></p>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>C语言规定：任何非0值都为“真”，只有0才为“假”。因此逻辑或也适用于数值。比如 5 || 4的结果是1，为“真”；-6 || 0的结果是1，为“真”；0 || 0的结果是0，为“假”。</p>
<h2 id="逻辑非"><a href="#逻辑非" class="headerlink" title="! 逻辑非"></a>! 逻辑非</h2><h3 id="使用格式-2"><a href="#使用格式-2" class="headerlink" title="使用格式"></a>使用格式</h3><p>“! 条件A”</p>
<h3 id="运算结果-2"><a href="#运算结果-2" class="headerlink" title="运算结果"></a>运算结果</h3><p>其实就是对条件A进行取反：若条件A成立，结果就为0，即“假”；若条件A不成立，结果就为1，即“真”。也就是说：真的变假，假的变真。</p>
<h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><p>逻辑非的结合方向是“自右至左”。比如表达式 ! (a&gt;5)：</p>
<p>（1）若a的值是6：先判断a&gt;5，成立，再取反之后的结果为0。<br>（2）若a的值是2：先判断a&gt;3，不成立，再取反之后的结果为1。<br>（3）因此，如果a的值大于5，结果就为0；否则，结果就为1。</p>
<h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p>（1）可以多次连续使用逻辑非运算符：!(4&gt;2)结果为0，是“假”，!!(4&gt;2)结果为1，是“真”，!!!(4&gt;2)结果为0，是“假”。<br>（2）C语言规定：任何非0值都为“真”，只有0才为“假”。因此，对非0值进行逻辑非!运算的结果都是0，对0值进行逻辑非!运算的结果为1。!5、!6.7、!-9的结果都为0，!0的结果为1。</p>
<h2 id="优先级-1"><a href="#优先级-1" class="headerlink" title="优先级"></a>优先级</h2><p>逻辑运算符的优先级顺序为： 小括号() &gt; 负号 - &gt; ! &gt; 算术运算符 &gt; 关系运算符 &gt; &amp;&amp; &gt; ||：</p>
<p>（1）表达式!(3&gt;5) || (2<4) &&="" (6<1)="" ：先计算="" !(3="">5)、(2<4)、(6<1)，结果为1，式子变为1 1="" ||="" &&="" 0，再计算1="" 0，式子变为1="" 0，最后的结果为1。="" （2）表达式3+2<5||6="">3 等价于 ((3+2) &lt; 5) || (6&gt;3)，结果为1。<br>（3）表达式4&gt;3 &amp;&amp; !-5&gt;2 等价于 (4&gt;3) &amp;&amp;  ((!(-5)) &gt; 2) ，结果为0。</4)、(6<1)，结果为1，式子变为1></4)></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【11】流程控制]]></title>
      <url>http://sanfordy.com/2016/07/31/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9011%E3%80%91%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="默认的运行流程"><a href="#默认的运行流程" class="headerlink" title="默认的运行流程"></a>默认的运行流程</h2><p>默认情况下，程序的运行流程是这样的：运行程序后，系统会按书写顺序执行程序中的每一行代码。比如下面的程序：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello-1\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello-2\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello-3\n"</span>);</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行后，会按顺序执行第6、7、8行语句，于是输出结果为：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160731215737763-1144972758.png" alt=""></p>
<h2 id="其他运行流程"><a href="#其他运行流程" class="headerlink" title="其他运行流程"></a>其他运行流程</h2><p>但很多时候，我们并不想要按照默认的运行流程去走，比如想在某个条件成立的情况下才执行某一段代码，否则不执行。比如微信的这个界面：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160731215744731-1017647345.png" alt=""></p>
<p>如果用户点击了注册按钮，我们就执行“跳转到注册界面”的代码；如果用户点击了登录按钮，我们就执行“跳转到登录界面”的代码。如果用户没做出任何操作，就不执行前面所说的两段代码。要想实现这种功能，那就要学会如何去控制程序的运行流程。</p>
<h2 id="流程结构"><a href="#流程结构" class="headerlink" title="流程结构"></a>流程结构</h2><p>为了方便我们控制程序的运行流程，C语言提供3种流程结构，不同的流程结构可以实现不同的运行流程。这3种流程结构分别是：</p>
<p>（1）顺序结构：默认的流程结构。按照书写顺序执行每一条语句。<br>（2）选择结构：对给定的条件进行判断，再根据判断结果来决定执行哪一段代码。<br>（3）循环结构：在给定条件成立的情况下，反复执行某一段代码。</p>
<p>下面是这3种结构的流程图，大致预览一下即可：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160731215752450-665863719.png" alt=""></p>
<h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><p>　<br>顺序结构是3种结构中最简单的，也是默认的流程结构：程序中的语句是按照书写顺序执行的。在文章开头开始列出的代码段，就是顺序结构，这里就不多介绍了。</p>
<h1 id="选择结构1-if语句"><a href="#选择结构1-if语句" class="headerlink" title="选择结构1-if语句"></a>选择结构1-if语句</h1><h2 id="形式一"><a href="#形式一" class="headerlink" title="形式一"></a>形式一</h2><p>先来看看if语句最简单的形式</p>
<h3 id="语法简介"><a href="#语法简介" class="headerlink" title="语法简介"></a>语法简介</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件 )</span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果if右边小括号()中的条件成立，也就是为“真”时，就会执行第2~6行大括号{}中的语句；如果条件为假，就不执行大括号{}中的语句。这里的if是关键字。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"条件a成立\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a的值为真"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C语言规定所有非0值都为“真”，而a的值是7，因此第3行的条件是成立的，接着就会执行第5、6行代码。输出结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">条件a成立</span><br><span class="line">a的值为真</span><br></pre></td></tr></table></figure>
<p>如果将a的值改为0，那么第3行的条件就不成立，就不会执行第5、6行代码。</p>
<h3 id="省略大括号"><a href="#省略大括号" class="headerlink" title="省略大括号{}"></a>省略大括号{}</h3><p>如果if后面大括号{}中只有一行代码时，可以省略大括号。形式如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件 )</span><br><span class="line">    语句<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：如果条件成立，只会执行if后面的第1条语句；如果条件不成立，就不会执行if后面的第1条语句。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"aaa"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bbb"</span>);</span><br></pre></td></tr></table></figure>
<p>因为第3行的a&gt;9是不成立的，所以不会执行第4行代码。而第5行代码跟if语句是没有任何联系的，因此，第5行代码照常执行。于是会看到屏幕上只输出：bbb。</p>
<p>由于第5行代码跟if语句是没有任何联系的，所以一般会把代码写成下面这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"aaa"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bbb"</span>);</span><br></pre></td></tr></table></figure>
<p>为了保证代码的可读性，不建议省略大括号！！！</p>
<h3 id="语句嵌套"><a href="#语句嵌套" class="headerlink" title="语句嵌套"></a>语句嵌套</h3><p>if语句内部是可以嵌套其他if语句的，如下面的例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a的值大于0\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( a&lt;<span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a的值小于9"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第3行的a&gt;0是成立的，因此会按顺序执行第4~11大括号中的代码。执行到第7行的时候，a&lt;9也是成立的，因此会执行第9行代码。输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a的值大于<span class="number">0</span></span><br><span class="line">a的值小于<span class="number">9</span></span><br></pre></td></tr></table></figure>
<h2 id="形式二"><a href="#形式二" class="headerlink" title="形式二"></a>形式二</h2><p>if还可以跟关键字else一起使用</p>
<h3 id="语法简介-1"><a href="#语法简介-1" class="headerlink" title="语法简介"></a>语法简介</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件 ) &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果条件成立，就会执行if后面大括号{}中的语句；如果条件不成立，就会执行else后面大括号{}中的语句。总之，两个大括号中一定会有1个被执行，而且只能执行的1个。</p>
<p>当然，也可以省略大括号，写成下面的格式：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件 )</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>如果条件成立，就执行if后面的第1条语句；如果条件不成立，就执行else后面的第1条语句。但还是不建议省略大括号{}。</p>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> ( a==<span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a等于0"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a不等于0"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第2行的a==0不成立，所以会执行第5行代码，输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a不等于<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="形式三"><a href="#形式三" class="headerlink" title="形式三"></a>形式三</h2><p>if和else还有一种比较复杂的用法</p>
<h3 id="语法简介-2"><a href="#语法简介-2" class="headerlink" title="语法简介"></a>语法简介</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件<span class="number">1</span> )&#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( 条件<span class="number">2</span> )&#123;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( 条件<span class="number">3</span> )&#123;</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    其他语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）如果条件1成立，就执行条件1后面大括号{}中的内容：第2~4行<br>（2）如果条件1不成立，条件2成立，就执行条件2后面大括号{}中的内容：第6~8行<br>（3）如果条件1、条件2都不成立，条件3成立，就执行条件3后面大括号{}中的内容：第10~12行<br>（4）第13行的…表示可以有无限个else if<br>（5）如果所有的条件都不成立，就会执行else后面大括号{}中的内容：第15~17行</p>
<blockquote>
<p><strong>注意</strong>：这么多大括号中，只有1个大括号内的代码会被执行。跟之前一样，所有的大括号都可以省略，但是不建议省略。必要的时候，最后面的else那一段（第14~17行）是可以省略的。</p>
</blockquote>
<h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> ( a==<span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a等于0"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>( a&gt;<span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a大于0"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a小于0"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第2行中的a==0不成立，接着会检查第4行。第4行的a&gt;0成立，因此会执行第5行代码。输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a大于<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>如果a的值是负数，那么第2、4行的条件都不成立，于是就会执行第7行代码。</p>
<h1 id="选择结构2-switch语句"><a href="#选择结构2-switch语句" class="headerlink" title="选择结构2-switch语句"></a>选择结构2-switch语句</h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><p>先来看看switch语句的使用形式：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(整型表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 数值<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 数值<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">case</span> 数值n:</span><br><span class="line">        语句n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        语句n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）当整型表达式的值等于“数值1”时，就会执行“语句1”，后面的break表示退出整个switch语句，也就是直接跳到第16行代码。<br>（2）当整形表达式的值等于“数值2”时，就会执行“语句2”；后面的以此类推。如果在数值1~数值n中，没有一个值等于整型表达式的值，那么就会执行default中的语句n+1。<br>（3）由于所有的case后面都有个break，因此执行完任意一个case中的语句后，都会直接退出switch语句。</p>
<h2 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"这是一个0"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"这是一个5"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"这是一个10"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"什么也不是"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为a的值刚好等于第10行case后面的10，所以会执行第11行代码，输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break关键字的作用是退出整个switch语句。默认的格式中，每个case后面都有个break，因此执行完case中的语句后，就会退出switch语句。</p>
<p>如果某个case后面没有break，意味着执行完这个case中的语句后，会按顺序执行后面所有case和default中的语句，直到遇到break为止：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"这是一个0\n"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"这是一个5\n"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"这是一个10\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"什么也不是\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个<span class="number">0</span></span><br><span class="line">这是一个<span class="number">5</span></span><br><span class="line">这是一个<span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>（1）由于变量a的值等于第4行case后面的0，因此肯定会执行第5行代码。<br>（2）由于case 0中没有break语句，就不会退出switch语句，继续往下执行代码。<br>（3）由于a的值已经等于第4行case的值，接着不会再判断a的值是否等于其他case的值了，直接按顺序执行第7、9行代码。在第10行有个break，接着就会退出switch语句。</p>
<h2 id="在case中定义变量"><a href="#在case中定义变量" class="headerlink" title="在case中定义变量"></a>在case中定义变量</h2><p>有时候，我们可能会想在case中定义一些变量，这个时候，就必须用大括号{}括住case中的所有语句。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> op = <span class="string">'-'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (op)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a + b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a+b=%d\n"</span>, sum);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minus = a - b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a-b=%d\n"</span>, minus);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"不能识别的符号"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第10、17分别定义两个变量。输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-b=<span class="number">6</span></span><br></pre></td></tr></table></figure>
<h1 id="循环结构1-while循环"><a href="#循环结构1-while循环" class="headerlink" title="循环结构1-while循环"></a>循环结构1-while循环</h1><p>　<br>while通常用于不知道循环次数的循环。</p>
<h2 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( 条件 )</span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）如果条件成立，就会执行循环体中的语句（“循环体”就是while后面大括号{}中的内容）。然后再次判断条件，重复上述过程，直到条件不成立就结束while循环<br>（2）while循环的特点：如果while中的条件一开始就不成立，那么循环体中的语句永远不会被执行</p>
<p>可以省略大括号{}，但是只会影响到while后面的第一条语句。不建议省略大括号：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( 条件 )</span><br><span class="line">    语句<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h2><p>在屏幕上重复输出10次Hello World，每输出一次的换行。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( count &lt; <span class="number">10</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">   </span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果省略第6行的count++，count就一直是0，那么count&lt;10一直都是成立的，这个while循环将会陷入“死循环”，一直在重复执行第4行代码。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果写成下面这样，也会让程序进入“死循环”：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( count &lt; <span class="number">10</span> );</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    </span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）注意第3行，while后面不小心加了个分号; ，一个分号表示一条空语句。<br>（2）可以看出：while循环只会影响到第3行的空语句，而第4~8行的代码块是不受while循环影响的<br>（3）由于count是0，那么count&lt;10一直都是成立的，程序将会一直重复执行第3行的空语句，陷入死循环。</p>
<h1 id="循环结构2-do-while循环"><a href="#循环结构2-do-while循环" class="headerlink" title="循环结构2-do while循环"></a>循环结构2-do while循环</h1><p>　<br>do…while不是特别常用，通常用于需要先执行一次的循环。</p>
<p>形式如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure>
<p>（1）注意第5行，后面是加上一个分号;的。<br>（2）当执行到do-while循环时，首先会执行一遍循环体中的语句（“循环体”就是do后面大括号{}中的内容）。接着判断while中的条件，如果条件成立，就执行循环体中的语句。然后再次判断条件，重复上述过程，直到条件不成立就结束while循环。<br>（3）do-while循环的特点：不管while中的条件是否成立，循环体中的语句至少会被执行一遍。<br>（4）其实do while循环的用法跟while循环是差不多的，这里就不举例子了。</p>
<h1 id="循环结构3-for循环"><a href="#循环结构3-for循环" class="headerlink" title="循环结构3-for循环"></a>循环结构3-for循环</h1><p>　<br>for最常用，通常用于知道循环次数的循环。 </p>
<h2 id="形式-2"><a href="#形式-2" class="headerlink" title="形式"></a>形式</h2><p>for循环是所有循环结构中最复杂的。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句<span class="number">1</span>; 条件; 语句<span class="number">2</span>) &#123;</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">    语句<span class="number">4</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）for循环开始时，会先执行语句1，而且在整个循环过程中只执行一次语句1。<br>（2）接着判断条件，如果条件成立，就会执行循环体中的语句（“循环体”就是for后面大括号{}中的内容）。<br>（3）循环体执行完毕后，接下来会执行语句2，然后再次判断条件，重复上述过程，直到条件不成立就结束for循环。</p>
<h2 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d  "</span>, i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是：变量i的作用域是第1~4行。一旦离开了这个for循环，变量i就失效了。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果for循环的初始化语句和循环一次后执行的语句是由多条语句组成的，就用逗号,隔开。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y =<span class="number">0</span>; x&lt;<span class="number">3</span>; x++, y+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x=%d, y=%d \n"</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">0</span>, y=<span class="number">0</span> </span><br><span class="line">x=<span class="number">1</span>, y=<span class="number">2</span> </span><br><span class="line">x=<span class="number">2</span>, y=<span class="number">4</span></span><br></pre></td></tr></table></figure>
<h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><p>　<br>接下来，介绍两个比较重要的语句：break和continue。</p>
<p>break跳出本层循环，continue结束本次循环。这两者通常与if连⽤。</p>
<h2 id="break-1"><a href="#break-1" class="headerlink" title="break"></a>break</h2><p>前面在switch语句中已经用到了break，它的作用是跳出switch语句。它也可以用在循环结构中，这时候它的作用是跳出整个循环语句。</p>
<h3 id="举例-6"><a href="#举例-6" class="headerlink" title="举例"></a>举例</h3><p>这里以for循环为例子，break也可以用在while循环、do-while循环中。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"i=%d \n"</span>, i);</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">if</span> (i&gt;<span class="number">2</span>) &#123;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码的意思是当i&gt;2时，就跳出整个for循环，也就是结束for循环，所以输出结果是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span> </span><br><span class="line">i=<span class="number">1</span> </span><br><span class="line">i=<span class="number">2</span> </span><br><span class="line">i=<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h3><p>先来看一个for循环嵌套的例子，嵌套的意思就是：for循环内部又一个for循环：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;<span class="number">2</span>; x++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y&lt;<span class="number">2</span>; y++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"x=%d, y=%d \n"</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">0</span>, y=<span class="number">0</span> </span><br><span class="line">x=<span class="number">0</span>, y=<span class="number">1</span> </span><br><span class="line">x=<span class="number">1</span>, y=<span class="number">0</span> </span><br><span class="line">x=<span class="number">1</span>, y=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这个时候如果在for循环中加入一个break，那么这个break究竟是跳出里面还是外面的for循环呢？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;<span class="number">2</span>; x++) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y&lt;<span class="number">2</span>; y++) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"x=%d, y=%d \n"</span>, x, y);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>注意第5行的break，这个break的作用是跳出里面的for循环，并非外面的for循环。所以输出结果是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">0</span>, y=<span class="number">0</span> </span><br><span class="line">x=<span class="number">1</span>, y=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>如果改变一下break的位置</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;<span class="number">2</span>; x++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y&lt;<span class="number">2</span>; y++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"x=%d, y=%d \n"</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第6行的break，这个break的作用是跳出外面的for循环，并非里面的for循环。所以输出结果是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">0</span>, y=<span class="number">0</span> </span><br><span class="line">x=<span class="number">0</span>, y=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>规律已经很明显了：break只会影响它所在的那个for循环。</p>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue只能使用在循环结构中，它的作用是跳过这一次循环，直接进入下一次循环。</p>
<p>这里以for循环为例子，continue也可以用在while循环、do-while循环中。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;<span class="number">10</span>; x++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x=%d \n"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第2行，当x%2==0，也就是当x是2的倍数时，就跳过这次循环，不执行第6行语句，直接进入下一次循环。输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span> </span><br><span class="line">x=<span class="number">3</span> </span><br><span class="line">x=<span class="number">5</span> </span><br><span class="line">x=<span class="number">7</span> </span><br><span class="line">x=<span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>跟break一样，continue只会影响它所在的那个for循环。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【10】函数]]></title>
      <url>http://sanfordy.com/2016/07/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9010%E3%80%91%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>任何一个C语言程序都是由一个或者多个程序段（小程序）构成的，每个程序段都有自己的功能，我们一般称这些程序段为“函数”。所以，你可以说C语言程序是由函数构成的。</p>
<p>比如你用C语言编写了一个MP3播放器程序，那么它的程序结构如下图所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160707155751452-1805121758.png" alt=""></p>
<p>（1）从上图可以看出：函数就是用来实现某个功能的程序段，每一个函数都有自己的功能。因此，你应该把实现某个功能所需的代码都写在函数中。比如，有个函数的功能是播放MP3，那么播放MP3的代码都应该写到这个函数中。<br>（2）当调用（执行）一个函数时，计算机就会按顺序执行函数中的所有代码，从而展示函数所实现的功能。</p>
<h2 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h2><p>一般来说，我们会将不同的功能交给不同的函数去实现。比如，将暂停播放MP3的代码写到一个函数中，将停止播放MP3的代码写到另一个函数中。因此，一个C程序中可能会有很多的函数。为了方便调用和区分这些函数，我们需要为每一个函数都起一个唯一的名称，函数的命名必须按照标识符命名规则。利用函数名就可以调用到对应的函数。</p>
<h1 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h1><p>　<br>前面已经说过，C语言中的函数就是面向对象中的”方法”，C语言的函数可以大概分为3类：</p>
<p>（1）主函数，也就是main函数。每个程序中只能有一个、也必须有一个主函数。无论主函数写在什么位置，C程序总是从主函数开始执行。<br>（2）开发人员自定义的函数，可有可无，数目不限。<br>（3）C语言提供的库函数，例如stdio.h中的输出函数printf()和输入函数scanf()。</p>
<h1 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h1><h2 id="在C语言中，函数的定义顺序是有讲究的"><a href="#在C语言中，函数的定义顺序是有讲究的" class="headerlink" title="在C语言中，函数的定义顺序是有讲究的"></a>在C语言中，函数的定义顺序是有讲究的</h2><p>默认情况下，只有后面定义的函数才可以调用前面定义过的函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = sum(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第5行定义的main函数调用了第1行的sum函数，这是合法的。如果调换sum函数和main函数的顺序，在标准的C编译器环境下是不合法的（不过在GCC编译器环境下只是一个警告）。</p>
<h2 id="函数的声明-1"><a href="#函数的声明-1" class="headerlink" title="函数的声明"></a>函数的声明</h2><p>如果想把函数的定义写在main函数后面，而且main函数能正常调用这些函数，那就必须在main函数的前面进行函数的声明：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只是做个函数声明，并不用实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = sum(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的定义(实现)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第11行定义了sum函数，在第2行对sum函数进行了声明，然后在第6行(main函数中)就可以正常调用sum函数了。</p>
<p>格式：返回值类型 函数名 (参数1, 参数2, …)</p>
<p>只要你在main函数前面声明过一个函数，main函数就知道这个函数的存在，就可以调用这个函数。而且只要知道函数名、函数的返回值、函数接收多少个参数、每个参数是什么类型的，就能够调用这个函数了，因此，声明函数的时候可以省略参数名称。比如上面的sum函数声明可以写成这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>究竟这个函数是做什么用的，还要看函数的定义。</p>
<h2 id="函数声明的注意事项"><a href="#函数声明的注意事项" class="headerlink" title="函数声明的注意事项"></a>函数声明的注意事项</h2><p>如果只有函数的声明，而没有函数的定义，那么程序将会在链接时出错。</p>
<p>下面的写法是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    sum(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）在第1行声明了一个sum函数，但是并没有对sum函数进行定义，接着在第6行调用sum函数。<br>（2）这个程序是可以编译成功的，因为我们在main函数前面声明了sum函数(函数的声明和定义是两码事)，这个函数声明可以理解为：在语法上，骗一下main函数，告诉它sum函数是存在的，所以从语法的角度上main函数是可以调用sum函数的。究竟这个sum函数存不存在呢，有没有被定义呢？编译器是不管的。在编译阶段，编译器并不检测函数有没有定义，只有在链接的时候才会检测这个函数存不存在，也就是检测函数有没有被定义。<br>（3）因此，这个程序会在链接的时候报错，错误信息如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160707155851108-1963224110.png" alt=""></p>
<p>（4）我这里的源文件是main.c文件，所以编译成功后生成一个main.o文件。链接的时候，链接器会检测main.o中的函数有没有被定义。<br>（5）上面的错误信息大致意思是：在main.o文件中找不到sum这个标识符。<br>（6）错误信息中的linker是链接器的意思，下次看到这个linker，说明是链接阶段出错了。链接出错了，就不能生成可执行文件，程序就不能运行。<br>（7）这个错误的解决方案就是加上sum函数的定义。</p>
<h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><p>　<br>任何一个函数在使用之前都必须进行定义，定义函数的目的就是为了写清楚你这个函数是干啥用的，里面包含了哪些代码。函数的定义格式如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回值类型  函数名(形式参数列表)</span><br><span class="line">  &#123;</span><br><span class="line">      函数体</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数定义示例"><a href="#函数定义示例" class="headerlink" title="函数定义示例"></a>函数定义示例</h2><p>比如定义一个函数用来计算两个整数的和。那么可以写成下面这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d = sum(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"d is %d"</span>, d);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）分别在第3行、第9行定义了sum函数、main函数，其中sum函数的作用是计算两个整数的和。<br>（2）函数定义好后，并不会马上执行函数内部的代码，要有人调用它才会执行内部的代码。就好像你的手机虽然有打电话的功能，但是只有按了拨号键，才会执行打电话的功能。<br>（3）程序运行时就会先调用main函数，按顺序执行第11~14行代码，因为main函数是程序的入口。<br>（4）第11行的sum(10, 11)是调用sum函数，sum函数被调用了，就会分配存储空间给形式参数列表中的所有参数，也就是第3行中的变量a和变量b，它们都是“形式参数”。<br>（5）第11行中的10、11称为“实际参数”，它们将分别赋值给变量a、变量b，也就是相当于：</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="number">2</span>   <span class="keyword">int</span> b = <span class="number">11</span>;</span><br></pre></td></tr></table></figure>
<p>（6）既然调用了sum函数，就会按顺序执行sum函数中的代码，也就是第5~6行代码。<br>（7）第5行将a+b的值21赋值给了变量c，第6行使用return关键字将变量c返回给了函数调用者，也是说，第11行sum(10, 11)的值是21。那么变量d的值就是21。<br>（8）第13行的输出结果为：d is 21<br>（9）第3~7行中的变量a、b、c都只有在调用sum函数时，才会分配存储空间，当sum函数执行完毕后，变量a、b、c就会被释放存储空间。因此，它们的作用域仅限于sum函数内部。<br>（10）第3行sum左边的int称为“返回值类型”，第6行return关键字后面跟着的数值称为“返回值”，因此第6行的变量c就是返回值，返回值的数据类型应该跟“返回值类型”保持一致。</p>
<h2 id="函数定义的注意"><a href="#函数定义的注意" class="headerlink" title="函数定义的注意"></a>函数定义的注意</h2><h3 id="函数名不能重复"><a href="#函数名不能重复" class="headerlink" title="函数名不能重复"></a>函数名不能重复</h3><p>默认情况下，函数的名字必须唯一。下面的写法是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    return <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第1、6行定义的函数的名称都是test，编译器会直接报错。</p>
<h3 id="函数都应该独立定义，不能嵌套定义"><a href="#函数都应该独立定义，不能嵌套定义" class="headerlink" title="函数都应该独立定义，不能嵌套定义"></a>函数都应该独立定义，不能嵌套定义</h3><p>下面的写法是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行把test函数定义在了main函数内部，这是错误的写法。</p>
<h1 id="形式参数和实际参数"><a href="#形式参数和实际参数" class="headerlink" title="形式参数和实际参数"></a>形式参数和实际参数</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>形式参数：在定义函数时，函数名后面的小括号()中定义的变量称为形式参数，简称形参。</p>
<p>实际参数：在调用函数时传入的值称为实际参数，简称实参。</p>
<h2 id="实参必须和形参个数一致"><a href="#实参必须和形参个数一致" class="headerlink" title="实参必须和形参个数一致"></a>实参必须和形参个数一致</h2><p>调用函数时传递的实参个数 必须和 函数的形参个数必须保持一致：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    return a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    sum(<span class="number">10</span>, <span class="number">9</span>, <span class="number">7</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第1行中sum函数中有3个形参，因此在第8行调用sum函数时，需要传入3个实参。</p>
<h2 id="值传递注意"><a href="#值传递注意" class="headerlink" title="值传递注意"></a>值传递注意</h2><p>当使用基本数据类型（char、int、float等）作为实参时，实参和形参之间只是值传递，修改形参的值并不影响到实参：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">char</span> a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    test(b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b的值是%d"</span>, b);</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）在第3行定义了test函数，只有一个形参a。<br>（2）在第14行调用了test函数，接着就会分配内存给变量a。这里将变量b当做实参，那么变量b的值将传递给变量a。这个时候，内存中大致如下图所示：</p>
<p> <img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160707155855624-785321241.png" alt=""></p>
<blockquote>
<p><strong>注意</strong>：其实在内存中存储的是二进制数据，这里我写成10进制是为了直观性</p>
</blockquote>
<p>（3）执行完第5行代码后，变量a的值变成了10，但是变量b的值依然是5：</p>
<p> <img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160707155901561-302125664.png" alt="f"></p>
<p>（4）第16行代码的输出结果是：</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b的值是<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>因此，在函数内部修改了形参的值，并不会影响到外面的实参。</p>
<h2 id="函数可以没有形参"><a href="#函数可以没有形参" class="headerlink" title="函数可以没有形参"></a>函数可以没有形参</h2><p>定义一个函数时是可以没有形参的，比如下面的函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"调用了test函数"</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    test();</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）在第3行定义了test函数，可以发现，它的形参列表是空的，也就是没有形参。<br>（2）那么在第11行调用test函数时，就不用传递任何实参。<br>（3）其实，第9行定义的main函数也是没有形参的。</p>
<h2 id="数组作为实参"><a href="#数组作为实参" class="headerlink" title="数组作为实参"></a>数组作为实参</h2><p>数组元素作为参数，与普通变量一样，把数组名传入，即数组的首地址。</p>
<blockquote>
<p><strong>注意</strong>：此时，形参和实参实际上是同一段内存空间。</p>
</blockquote>
<h1 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h1><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回值就是函数调用完后，返回给函数调用者的结果，用return关键字进行返回。定义函数时，要指明函数的返回值类型：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pi</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    return <span class="number">3.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = pi();</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）第1行定义了一个pi函数，返回值类型是double，因此用return返回的数值应该是double类型的，这里返回的是3.14。<br>（2）第8行pi函数调用完毕后，函数调用者得到的值就是3.14，因此，变量a的值是3.14。</p>
<h2 id="函数可以没有返回值"><a href="#函数可以没有返回值" class="headerlink" title="函数可以没有返回值"></a>函数可以没有返回值</h2><p>一个函数可以没有返回值，如果没有返回值，应该用void表示返回值类型：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"调用了test函数"</span>);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    test();</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）在第3行定义了一个test函数，它是没有返回值的，所以第6行的return后面没有跟上任何数值，最后面的return语句可以省略。<br>（2）在第11行调用了test函数。</p>
<h2 id="函数默认返回值类型是int"><a href="#函数默认返回值类型是int" class="headerlink" title="函数默认返回值类型是int"></a>函数默认返回值类型是int</h2><p>如果一个函数没有明确写出返回值类型，那么代表这个函数的返回值类型是int：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">       return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，第1行定义的sum函数没有明确写出返回值类型，那么这个sum函数的返回值类型就是int。因此，第3行return后面跟随的是int类型数据。</p>
<h1 id="return"><a href="#return" class="headerlink" title="return"></a>return</h1><p>　<br>return语句可以在函数内部返回一个值给函数调用者：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = sum(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第3行使用了return语句，将a+b的值返回给了函数调用者，因此第8行变量c的值是13</p>
<blockquote>
<p><strong>注意</strong>：一个函数内部可以多次使用return语句，使用了return语句后，函数就会马上停止执行，return语句后面的代码就不再被执行</p>
</blockquote>
<h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>　<br>函数自身调用自身，即函数内部又使用到了该函数功能，这个函数就叫做递归函数。</p>
<p>在计算机中阶乘就可以使用递归调用。</p>
<p>&lt; 代码示例 &gt;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import &lt;Foundation/Foundation.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input an number "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    y = fac(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d!=%d\n"</span>,n,y);</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m ;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"n&lt; 0,data error"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>|| n== <span class="number">1</span>)</span><br><span class="line">        m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> m = fac(n <span class="number">-1</span>)*n;<span class="comment">//精华(解释在下面)</span></span><br><span class="line"></span><br><span class="line">    return m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 步骤：从里往外算，一层一层嵌套。</span><br><span class="line"> </span><br><span class="line">假设n = 4;</span><br><span class="line">1.m = f(4 - 1) * 4,</span><br><span class="line">2.m = f(3 - 1) * 3 * 4,</span><br><span class="line">3.m = f(2 - 1) * 2 * 3 * 4,</span><br><span class="line">4.此时n = 2,return m,即m返回给上一个调用他的函数 m = f(2 - 1) = 1;</span><br><span class="line">所以 m = 1 * 2 * 3 * 4 = 24</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<p>&lt; 运行结果 &gt;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input an number <span class="number">4</span></span><br><span class="line"><span class="number">4</span>!=<span class="number">24</span></span><br><span class="line">Program ended with <span class="built_in">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：递归一定要有出口。 </p>
</blockquote>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>　<br>通过函数指针调用函数的函数。如果你把函数A的指针（地址）作为参数传递给另一个函数B，当这个指针被用来调用其所指向的函数A时，我们就说函数A是回调函数。 </p>
<p>&lt; 代码示例 &gt; </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">//  shouwNum内有两个参数：1.类型为整形的整数参数 2.类型为void (*)()的指针参数</span><br><span class="line">void showNum (int,void (*)(int));</span><br><span class="line">//  回调函数</span><br><span class="line">void printNum(int);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    showNum(110, printNum);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void showNum(int a,void (*ptr)(int))&#123;</span><br><span class="line">    (* ptr)(a);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">void printNum(int b)&#123;</span><br><span class="line">    printf("%d \n",b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt; 输出结果 &gt;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">110</span> </span><br><span class="line">Program ended with <span class="built_in">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p>从第一个C语言程序开始，就认识了这个main函数。main函数是整个C程序的入口，有了main函数，C程序才能运行成功，而且整个C程序中只能有一个main函数。</p>
<p>main函数的简单定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它可以没有形式参数，返回值是int类型。它的返回值用于说明程序的退出状态：如果返回0，则代表程序正常退出，否则代表程序异常退出。</p>
<h2 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h2><p>这是在stdio.h中声明的一个函数，因此使用前必须加入#include <stdio.h>。调用scanf函数时，需要传入变量的地址作为参数，scanf函数会等待标准输入设备（比如键盘）输入数据，并且将输入的数据赋值给地址对应的变量。</stdio.h></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input your age:"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;age);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Your age is %d."</span>, age);</span><br></pre></td></tr></table></figure>
<p>运行程序，执行完第1行代码，控制台会输出一句提示信息：please input your age:</p>
<p>执行到第4行的scanf函数时，会等待用户的键盘输入，并不会往后执行代码。scanf的第1个参数是”%d”，说明要求用户以10进制的形式输入一个整数。这里要注意，scanf的第2个参数传递的不是age变量，而是age变量的地址&amp;age，&amp;是C语言中的一个地址运算符，可以用来获取变量的地址。</p>
<p>接着我们可以在提示信息后面输入个8：please input your age:8</p>
<p>输入完毕后，敲一下回车键，目的是告诉scanf函数我们已经输入完毕了，scanf函数会将输入的8赋值给age变量。</p>
<p>scanf函数赋值完毕后，才会往后执行代码，执行到第6行时，控制器会输出：Your age is 8.</p>
<p>scanf的注意事项：</p>
<p>（1）以回车确定输入结束。切记：只有回⻋才会结束输入。<br>（2）scanf(“%d%d”,&amp;num1,&amp;num2); // 限制输入格式。<br>（3）不要在格式串后面加’\n’字符，否则会抵消掉人工输⼊的回车。</p>
<h2 id="printf函数"><a href="#printf函数" class="headerlink" title="printf函数"></a>printf函数</h2><p>这是在stdio.h中声明的一个函数，因此使用前必须加入#include <stdio.h>，使用它可以向标准输出设备（比如屏幕）输出数据。</stdio.h></p>
<h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><p>printf(字符串, 格式符参数)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用常量作参数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"My age is %d\n"</span>, <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用变量</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">17</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"My age is %d"</span>, age);</span><br></pre></td></tr></table></figure>
<p>（1）格式符%d表示以有符号的十进制形式输出一个整型，格式符参数中的26和age会代替%d的位置。<br>（2）第2行代码中的\n是个转义字符，表示换行，所以输出了第一句”My age is 26”后会先换行，再输出”My age is 17”。<br>（3）如果去掉第2行中的\n，将会是这样的效果：My age is 26My age is 17</p>
<blockquote>
<p><strong>总结</strong>：左边字符串中格式符的个数 必须跟 右边格式符参数的个数一样；格式符的类型决定了格式符参数的类型，比如使用%d，说明对应的格式符参数必须是整型。</p>
</blockquote>
<h3 id="常用的格式符及其含义"><a href="#常用的格式符及其含义" class="headerlink" title="常用的格式符及其含义"></a>常用的格式符及其含义</h3><p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160718141032685-1803882138.png" alt=""></p>
<h3 id="精细的格式控制"><a href="#精细的格式控制" class="headerlink" title="精细的格式控制"></a>精细的格式控制</h3><h4 id="输出宽度"><a href="#输出宽度" class="headerlink" title="输出宽度"></a>输出宽度</h4><p>（1）我们先看看默认的整型输出：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"The price is %d."</span>, <span class="number">14</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果(注意，后面是有个点的)：The price is 14.</p>
<p>（2）如果我把%d换成%4d：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"The price is %4d."</span>, <span class="number">14</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果：The price is　　14.，你会发现”is”跟”14”的距离被拉开了，%4d的意思是输出宽度为4，而”14”的宽度为2，因此多出2个宽度，多出的宽度就会在左边用空格填补，因此你会看到”14”左边多了2个空格。</p>
<p>（3）如果实际数值宽度比较大，用%4d输出宽度为6的”142434”，那就会按照实际数值宽度6来输出：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"The price is %4d."</span>, <span class="number">142434</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果：The price is 132434，”142434”的输出宽度为6。</p>
<p>（4）如果换成%-4d：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"The price is %-4d."</span>, <span class="number">14</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果：The price is 14　　.，你会发现”14”跟”.”的距离被拉开了，%-4d表示输出宽度为4，如果比实际数值宽度大，多出的宽度会在右边用空格填补。如果4比实际数值宽度小，就按照实际数值的宽度来输出。</p>
<h4 id="浮点数的小数位数"><a href="#浮点数的小数位数" class="headerlink" title="浮点数的小数位数"></a>浮点数的小数位数</h4><p>（1）我们先看下默认的浮点数输出：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"My height is %f"</span>, <span class="number">179.95f</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果：My height is 179.949997，默认是输出6位小数。</p>
<p>（2）如果只想输出2位小数，把%f换成%.2f即可：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"My height is %.2f"</span>, <span class="number">179.95f</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果：My height is 179.95</p>
<p>（3）当然，可以同时设置输出宽度和小数位数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"My height is %8.1f"</span>, <span class="number">179.95f</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果：My height is　　179.9，输出宽度为8，保留1位小数。</p>
<h2 id="字符处理函数"><a href="#字符处理函数" class="headerlink" title="字符处理函数"></a>字符处理函数</h2><p>下面介绍的两个字符处理函数都是在stdio.h头文件中声明的。</p>
<h3 id="字符输出函数putchar"><a href="#字符输出函数putchar" class="headerlink" title="字符输出函数putchar"></a>字符输出函数putchar</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(<span class="number">65</span>); <span class="comment">// A</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'A'</span>); <span class="comment">// A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">65</span>;</span><br><span class="line"><span class="built_in">putchar</span>(a); <span class="comment">// A</span></span><br></pre></td></tr></table></figure>
<p>上面的3种用法，输出的都是大写字母A。</p>
<blockquote>
<p><strong>注意</strong>：putchar一次只能输出一个字符，而printf可以同时输出多个字符。</p>
</blockquote>
<h3 id="字符输入函数getchar"><a href="#字符输入函数getchar" class="headerlink" title="字符输入函数getchar"></a>字符输入函数getchar</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">c = getchar();</span><br></pre></td></tr></table></figure>
<p>getchar会将用户输入的字符赋值给变量c。</p>
<p>getchar函数可以读入空格、TAB，直到遇到回车为止（因为空格、TAB都有对应的ASCII码，getchar把他们当做ASCII码处理了）。</p>
<p>getchar一次只能读入一个字符。</p>
<p>getchar还能读入回车换行符，这时候你要敲2次回车键。第1次敲的回车换行符被getchar读入，第2次敲的回车键代表输入结束。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【09】ASCII码]]></title>
      <url>http://sanfordy.com/2016/06/19/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9009%E3%80%91ASCII%E7%A0%81/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="ASCII码简介"><a href="#ASCII码简介" class="headerlink" title="ASCII码简介"></a>ASCII码简介</h1><p>　<br>ASCII码是基于拉丁字母的一套电脑编码系统，是现今最通用的单字节编码系统，全称是“American Standard Code for Information Interchange”。编码系统，看起来好像很高级，其实就是一个字符集—字符的集合。</p>
<p>ASCII字符集包括了：所有的大写和小写英文字母，数字0到9，标点符号，以及一些特殊控制字符：如退格、删除、制表、回车，一共128个字符，全部都是“单字节字符”。</p>
<p>在计算机中的任何数据都是以二进制形式存储的，因此每个ASCII字符在内存中是以二进制形式存储的，而且只占用1个字节，二进制数的值就称为这个ASCII字符的ASCII值。比如大写字母’A’在内存中的二进制形式是：0100 0001，那么它的ASCII值就是65。</p>
<h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><p>　<br>下面是一张ASCII码字符表，ASCII码值的范围是0~127：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160701092939656-1944808901.png" alt=""></p>
<h1 id="ASCII码使用"><a href="#ASCII码使用" class="headerlink" title="ASCII码使用"></a>ASCII码使用</h1><p>　<br>我们都知道1个char型变量只占用1个字节的存储空间，而所有的ASCII字符都是单字节字符，因此char型变量能存储任何ASCII字符。而且在使用char型变量存储ASCII字符时，可以直接用ASCII字符，也可以用ASCII值：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c1 = <span class="number">65</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c2 = <span class="string">'A'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c1=%c  c2=%c \n"</span>, c1, c2);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）在第5、7行分别定义了字符型变量c1、c2。很明显，变量c2存储的是ACII字符’A’；变量c1存储的是65，而ASCII值65对应的ASCII字符就是’A’，因此变量c1存储的也是’A’。<br>（2）由于第9行用的是%c，表示以字符格式输出，输出结果：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160701092945312-1155107796.png" alt=""></p>
<p>经过上面的例子后，应该知道6和’6’的区别了吧。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c1 = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c2 = <span class="string">'6'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c1=%d  c2=%d \n"</span>, c1, c2);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）第5行给变量c1赋值了整数6，第7行给变量c2赋值了字符’6’，’6’的ASCII值是54。<br>（2）由于第9行用的是%d，表示以十进制整数格式输出，输出结果：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201607/776348-20160701092954437-678167137.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【08】进制]]></title>
      <url>http://sanfordy.com/2016/06/19/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9008%E3%80%91%E8%BF%9B%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　<br>我们先来看看平时是如何表示一个整数的，最常见的肯定是用阿拉伯数字表示，比如“十二”，我们可以用12来表示，其实这种表示方式是基于一种叫做“十进制”的计数方式。“进制”是一种计数方式，编程中常见的进制有4种：十进制、二进制、八进制、十六进制。也就是说，同一个整数，我们至少有4种表示方式。</p>
<h1 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>十进制是我们最熟悉、最常用的一种计数方式，它有两个特点：由0、1、2….9十个基本数字组成；运算规则是“逢十进一”。</p>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>所谓“逢十进一”，似乎在小学数学中都已经学过了，也就是当数值满十时，就要向前进一位：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160623102519860-1011222561.png" alt=""></p>
<p>个位数为9+1，满十了，十位数就进一。</p>
<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>二进制是计算机内部使用的一种计数方式，它有两个特点：由0、1两个基本数字组成；运算规则是“逢二进一”。</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>有人可能会问：为什么二进制里面没有2~9这些数字呢？都说了，逢二进一，因此当数字满二的时候就会进位。</p>
<p>如果我写个1010，你能看出它是二进制还是十进制么？为了跟其他进制区分开来，书写二进制数的时候，需要以<code>0b</code>或者<code>0B</code>开头。比如0b1010是个二进制数，而1010则还是我们熟悉的十进制数，就是“一千零一十”</p>
<h2 id="运算-1"><a href="#运算-1" class="headerlink" title="运算"></a>运算</h2><p>做个简单的运算吧，比如1+1：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160623102524750-87756776.png" alt=""></p>
<p>个位数是1+1，值满二了，于是十位数要进一。因此，在二进制中：1 + 1 = 0b10，这里的0b10表示的是十进制中的“二”，并不是“十”。</p>
<p>以此类推，11 + 1 = 0b100：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160623102530235-234384441.png" alt=""></p>
<h2 id="二进制转为十进制"><a href="#二进制转为十进制" class="headerlink" title="二进制转为十进制"></a>二进制转为十进制</h2><p>进制里面有个“基数”的概念，基数是用来计算数值的，比如十进制的基数是10，因此十进制是这样算数的：1230 = 0 x 10<sup>0</sup> + 3 x 10<sup>1</sup> + 2 x 10<sup>2</sup> + 1 x 10<sup>3</sup> = 0 x 1 + 3 x 10 + 2 x 100 + 1 x 1000。</p>
<p>二进制的基数是2，以此类推：0b1011 = 1 x 2<sup>0</sup> + 1 x 2<sup>1</sup> + 0 x 2<sup>2</sup> + 1 x 2<sup>3</sup> = 1 x 1 + 1 x 2 + 0 x 4 + 1 x 8 = 1 + 2 + 0 + 8 = 11，因此二进制数0b1011表示的数值是十进制中的11。</p>
<p>一位二进制数能表示的最大值是1，而n位二进制数所能表示的最大值是0b111…1111，也就是说n位二进制数都是1，那么它的十进制数值为：1 x 2<sup>0</sup> + 1 x 2<sup>1</sup> + 1 x 2<sup>2</sup> + 1 x 2<sup>3</sup> + …. + 1 x 2<sup>n-1</sup> = 2<sup>n</sup> - 1。因此，n位二进制数所能表示的最大值是2<sup>n</sup> - 1。也就是说，4位二进制数能表示的最大值是0b1111，十进制数值为：2<sup>4</sup> - 1 = 15。</p>
<h1 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>八进制有两个特点：由0~7八个基本数字组成；运算规则是“逢八进一”。</p>
<h2 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h2><p>由于十进制和八进制中都包含了0~7，为了区分开来，在书写八进制数的时候，需要在前面加个<code>0</code>。比如076是个八进制数，76则是个十进制数。</p>
<h2 id="运算-2"><a href="#运算-2" class="headerlink" title="运算"></a>运算</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160623102534906-1731486194.png" alt=""></p>
<p>个位数是7+1，值满八了，于是十位数要进一。因此，在八进制中，7 + 1 = 010。010则表示十进制中的“八”，而不是“十”。</p>
<h2 id="八进制转十进制"><a href="#八进制转十进制" class="headerlink" title="八进制转十进制"></a>八进制转十进制</h2><p>八进制的基数是8，因此027计算出来就是十进制中的23：027 = 7 x 8<sup>0</sup> + 2 x 8<sup>1</sup> = 7 x 1 + 2 x 8 = 23。</p>
<h2 id="二进制转八进制"><a href="#二进制转八进制" class="headerlink" title="二进制转八进制"></a>二进制转八进制</h2><p>不难发现一个十进制数可以表示的最大值是9，而一个八进制数可以表示的最大值是7，恰好一个3位进制数可以表示的最大值0b111也是7。因此，我们可以用一个3位二进制数来代替一个1位八进制数：</p>
<p>0b11110011 = 0b 011  110  011  = 0363。</p>
<h2 id="八进制转二进制"><a href="#八进制转二进制" class="headerlink" title="八进制转二进制"></a>八进制转二进制</h2><p>如果是八进制转为二进制，那就反过来，用一个3位二进制数来表示一个1位八进制数：</p>
<p>025 = 0b 010  101 = 0b10101。</p>
<h1 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p>十六进制有两个特点：由0~9和A~F组成，A~F分别表示10~15；运算规则是“逢十六进一”。</p>
<h2 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h2><p>由于十进制、八进制、十六进制中都包含了0~7，为了区分开来，在书写十六进制数的时候，需要在前面加个<code>0x</code>或者<code>0X</code>。比如0x76是个十六进制数，076是个八进制数，76则是个十进制数。</p>
<h2 id="运算-3"><a href="#运算-3" class="headerlink" title="运算"></a>运算</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160623102539938-225212688.png" alt=""></p>
<p>个位数是B+5，也就是11+5，值满十六了，于是十位数要进一。因此，在十六进制中，B + 5 = 0x10。0x10则表示十进制中的“十六”，而不是“十”。</p>
<h2 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h2><p>十六进制的基数是16，F表示十进制中的15，因此0x2F计算出来就是十进制中的47：</p>
<p>0x2F = 15 x 16<sup>0</sup> + 2 x 16<sup>1</sup> = 15 x 1 + 2 x 16 = 47</p>
<h2 id="二进制转十六进制"><a href="#二进制转十六进制" class="headerlink" title="二进制转十六进制"></a>二进制转十六进制</h2><p>一个十六进制数可以表示的最大值是15，恰好一个4位二进制数可以表示的最大值0b1111也是15。因此，我们可以用一个4位二进制数来代替一个1位十六进制数：</p>
<p>0b11110011 = 0b 1111  0011  = 0xF3</p>
<h2 id="十六进制转二进制"><a href="#十六进制转二进制" class="headerlink" title="十六进制转二进制"></a>十六进制转二进制</h2><p>如果是十六进制转为二进制，那就反过来，用一个4位二进制数来表示一个1位十六进制数：</p>
<p>0x25 = 0b 0010  0101=0b100101</p>
<h1 id="变量与进制"><a href="#变量与进制" class="headerlink" title="变量与进制"></a>变量与进制</h1><h2 id="十进制与变量"><a href="#十进制与变量" class="headerlink" title="十进制与变量"></a>十进制与变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了一个变量a，存储的是十进制整数10。其实，这个变量a在内存中是以二进制数的形式存储的，10的二进制形式是1010。</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160623102544594-718950591.png" alt=""></p>
<h2 id="其他进制与变量"><a href="#其他进制与变量" class="headerlink" title="其他进制与变量"></a>其他进制与变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>b110; <span class="comment">// 十进制数：6</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">021</span>; <span class="comment">// 十进制数：17</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">12</span>; <span class="comment">// 十进制数：12</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">0x1D</span>; <span class="comment">// 十进制数：29</span></span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，分别将4种不同进制的数值赋值给不同的整型变量。对应的十进制数值已经写在右边的注释中。它们最终都是以二进制的形式存储在内存中：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160623102549172-1114288608.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【07】变量（三）]]></title>
      <url>http://sanfordy.com/2016/06/18/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9007%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="类型修饰符"><a href="#类型修饰符" class="headerlink" title="类型修饰符"></a>类型修饰符</h1><h2 id="什么是类型修饰符"><a href="#什么是类型修饰符" class="headerlink" title="什么是类型修饰符"></a>什么是类型修饰符</h2><p>我们已经知道，在64bit编译器环境下，1个int类型变量取值范围是-231 ~ 231 - 1，最大值是231-1。有时候，我们要使用的整数可能比231-1还大，比如234这个整数，如果还坚持用int类型变量来存储这个值的话，就会损失精度，得到的是垃圾数据。为了解决这个问题，C语言允许我们给int类型的变量加一些类型修饰符，某些类型修饰符可以增大int类型变量的长度，这样的话，int类型变量能存储的数据范围就变大了。</p>
<p>C语言提供了以下4种类型修饰符，4个都属于关键字：</p>
<p>（1）short  短型。<br>（2）long  长型。<br>（3）signed  有符号型。<br>（4）unsigned  无符号型。</p>
<p>按照用途进行分类，short和long是一类，signed和unsigned是一类。</p>
<h2 id="用法演示"><a href="#用法演示" class="headerlink" title="用法演示"></a>用法演示</h2><p>这些说明符一般就是用来修饰int类型的，所以在使用时可以省略int：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面两种写法是等价的</span></span><br><span class="line"> <span class="keyword">short</span> <span class="keyword">int</span> s1 = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">short</span> s2 = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 下面两种写法是等价的</span></span><br><span class="line"> <span class="keyword">long</span> <span class="keyword">int</span> l1 = <span class="number">2</span>;</span><br><span class="line"> <span class="keyword">long</span> l2 = <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 可以连续使用2个long</span></span><br><span class="line"> <span class="keyword">long</span> <span class="keyword">long</span> ll = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 下面两种写法是等价的</span></span><br><span class="line"> <span class="keyword">signed</span> <span class="keyword">int</span> si1 = <span class="number">3</span>;</span><br><span class="line"> <span class="keyword">signed</span> si2 = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 下面两种写法是等价的</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> us1 = <span class="number">4</span>;</span><br><span class="line"> <span class="keyword">unsigned</span> us2 = <span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 也可以同时使用2种修饰符</span></span><br><span class="line"> <span class="keyword">signed</span> <span class="keyword">short</span> <span class="keyword">int</span> ss = <span class="number">5</span>;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> ul = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>（1）第2行中的short int和第3行中的short是等价的。<br>（2）看第10行，可以连续使用两个long。long的作用会在后面解释。<br>（3）注意第21和22行，可以同时使用两种不同的说明符。但是不能同时使用相同类型的修饰符，也就是说不能同时使用short和long 或者 不能同时使用signed和unsigned。</p>
<h2 id="short和long"><a href="#short和long" class="headerlink" title="short和long"></a>short和long</h2><p>short和long可以提供不同长度的整型数，也就是可以改变整型数的取值范围。在64bit编译器环境下，int占用4个字节（32bit），取值范围是-231~231-1；short占用2个字节（16bit），取值范围是-215~215-1；long占用8个字节（64bit），取值范围是-263~263-1。</p>
<p>在64位编译器环境下，short占2个字节(16位)，int占4个字节(32位)，long占8个字节(64位)。因此，如果使用的整数不是很大的话，可以使用short代替int，这样的话，更节省内存开销。</p>
<p>世界上的编译器林林总总，不同编译器环境下，int、short、long的取值范围和占用的长度又是不一样的。比如在16bit编译器环境下，long只占用4个字节。不过幸运的是，ANSI \ ISO制定了以下规则：</p>
<p>（1）short跟int至少为16位（2字节）。<br>（2）long至少为32位（4字节）。<br>（3）short的长度不能大于int，int的长度不能大于long。<br>（4）char一定为为8位（1字节），毕竟char是我们编程能用的最小数据类型。</p>
<p>可以连续使用2个long，也就是long long。一般来说，long long的范围是不小于long的，比如在32bit编译器环境下，long long占用8个字节，long占用4个字节。不过在64bit编译器环境下，long long跟long是一样的，都占用8个字节。</p>
<p>还有一点要明确的是：short int等价于short，long int等价于long，long long int等价于long long。</p>
<h2 id="long的使用注意"><a href="#long的使用注意" class="headerlink" title="long的使用注意"></a>long的使用注意</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>long和int都能够存储整型常量，为了区分long和int，一般会在整型常量后面加个小写字母l，比如100l，表示long类型的常量。如果是long long类型呢，就加2个l，比如100ll。如果什么都不加，就是int类型的常量。因此，100是int类型的常量，100l是long类型的常量，100ll是long long类型的常量：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> b = <span class="number">100l</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c = <span class="number">100l</span>l;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变量a、b、c最终存储的值其实都是100，只不过占用的字节不相同，变量a用4个字节来存储100，变量b、c则用8个字节来存储100。</p>
<p>其实，你直接将100赋值给long类型的变量也是没问题的，照样使用。因为100是个int类型的常量，只要有4个字节，就能存储它，而long类型的变量b有8个字节，那肯定可以装下100啦：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> b = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a = <span class="number">100000000000l</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第5行定义了long类型变量a，在第7行尝试输出a的值。注意了，这里用的是%d，表示以十进制整数格式输出，%d会把a当做int类型来输出，它认为a是4个字节的。由于a是long类型的，占用8个字节，但是输出a的时候，只会取其中4个字节的内容进行输出，所以输出结果是：<code>1215752192</code>。又是传说的垃圾数据。</p>
<p>那怎样才能完整地输出long类型呢？应该用格式符%ld：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a = <span class="number">100000000000l</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, a);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第7行，双引号里面的是%ld，表示输出1个long类型的整数，这时候的输出结果是：1000000000000</p>
<p>如果是long long类型，应该用%lld：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">100000000000l</span>l;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="signed和unsigned"><a href="#signed和unsigned" class="headerlink" title="signed和unsigned"></a>signed和unsigned</h2><p>首先要明确的：<code>signed int</code>等价于<code>signed</code>，<code>unsigned int</code>等价于<code>unsigned</code>。</p>
<p><code>signed</code>和<code>unsigned</code>的区别就是它们的最高位是否要当做符号位，并不会像<code>short</code>和<code>long</code>那样改变数据的长度，即所占的字节数。</p>
<h3 id="signed"><a href="#signed" class="headerlink" title="signed"></a>signed</h3><p><code>signed</code>表示有符号，也就是说最高位要当做符号位，所以包括正数、负数和0。其实int的最高位本来就是符号位，已经包括了正负数和0了，因此signed和int是一样的，signed等价于signed int，也等价于int。signed的取值范围是-231 ~ 231 - 1。</p>
<h3 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h3><p><code>unsigned</code>表示无符号，也就是说最高位并不当做符号位，所以不包括负数。在64bit编译器环境下面，int占用4个字节（32bit），因此unsigned的取值范围是：0000 0000 0000 0000 0000 0000 0000 0000 ~ 1111 1111 1111 1111 1111 1111 1111 1111，也就是0 ~ 232 - 1。</p>
<blockquote>
<p><strong>注意</strong>：signed、unsigned也可以修饰char，long还可以修饰double。</p>
</blockquote>
<h2 id="不同数据类型所占用的存储空间"><a href="#不同数据类型所占用的存储空间" class="headerlink" title="不同数据类型所占用的存储空间"></a>不同数据类型所占用的存储空间</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160618225017760-1752659694.png" alt=""></p>
<h1 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h1><h2 id="什么是自动类型提升"><a href="#什么是自动类型提升" class="headerlink" title="什么是自动类型提升"></a>什么是自动类型提升</h2><p>先来看看下面的一则运算：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> d = a + <span class="number">9.5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f \n"</span>, d);</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）在第5行定义了一个int类型的变量a，赋值了一个整数10。<br>（2）接着在第7行取出a的值10，加上浮点数9.5，这里做了一个“加法运算”，并且将“和”赋值给d。所以d的值应该是19.5。<br>（3）在第9行使用格式符%f输出浮点型变量d，默认是保留6位小数的。输出结果为：<code>19.500000</code><br>（4）看似这么简单的运算，其实包含了一些语法细节在里面。严格来说，相同数据类型的值才能进行运算（比如加法运算），而且运算结果依然是同一种数据类型。第7行的情况是：变量a的值10是int类型（4字节），9.5是double类型（8字节）。很明显，10和9.5并不是相同数据类型。按理来说，10和9.5是不允许进行加法运算的。但是，系统会自动对占用内存较少的类型做一个“自动类型提升”的操作，也就把10提升为double类型。也就是说，本来是用4个字节来存放10的，现在改为用8个字节来存放10。因此，10和9.5现在都是用8个字节来存放的，都是double类型，然后就可以进行运算了。并且把运算结果赋值给double类型的变量d。<br>（5）需要注意的是：经过第7行代码后，变量a一直都还是int类型的，并没有变成double类型。1个变量在它定义的时候是什么类型，那么就一直都是什么类型。“自动类型提升”只是在运算过程中进行的。</p>
<h2 id="常见的自动类型提升"><a href="#常见的自动类型提升" class="headerlink" title="常见的自动类型提升"></a>常见的自动类型提升</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a = <span class="number">10</span> + <span class="number">3.45f</span>;<span class="comment">// int 提升为 float</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b = <span class="string">'A'</span> + <span class="number">32</span>; <span class="comment">// char 提升为 int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> c = <span class="number">10.3f</span> + <span class="number">5.7</span>; <span class="comment">// float 提升为 double</span></span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）注意第5行，系统会将字符’A’提升为int类型数据，也就是转为’A’的ASCII值后再跟32进行加法运算。’A’的ASCII值是65，因此变量b的值为65+32=97。<br>（2）这个自动类型提升，知道有这么一回事就行了，不用死记这规则，因为系统会自动执行这个操作。</p>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><h2 id="什么是强制类型转换"><a href="#什么是强制类型转换" class="headerlink" title="什么是强制类型转换"></a>什么是强制类型转换</h2><p>先来看看下面的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10.7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> j = (int) <span class="number">10.7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, j);</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）注意第5行，我们将一个8个字节的浮点数10.7赋值给了只有4个字节存储空间的整型变量i。可以想象得到，把8个字节的内容塞给4个字节，肯定会损失精度。在第7行将变量i的值输出，输出结果是：<code>10</code>，这是必然的。<br>（2）这里面也有一点语法细节，其实第5行做了一个“强制类型转换”的操作：由于左边是int类型的变量i，那么就会强制把double类型的10.7转换为int类型的10，并且把转换后的值赋值给了整型变量i。由于C语言是语法限制不严格，所以系统会自动强制转换，如果换做是其他语法严格的语言，比如Java，第5行代码早就报错了。<br>（3）如果写得严格一点，明显地进行“强制类型转换”，应该写成第8行，在10.7的前面加了个(int)，表示强制转换为int类型的数据。这样就绝对不会有语法问题了。总之你将一个浮点型数据转换为整型数据，就会丢失小数部分的值。</p>
<h2 id="常见的强制类型转换"><a href="#常见的强制类型转换" class="headerlink" title="常见的强制类型转换"></a>常见的强制类型转换</h2><p>这个强制类型转换，知道有这么一回事就行了，不用死记这规则，因为很多时候系统会自动执行这个操作：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">198l</span>; <span class="comment">// long 转换为 int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">65</span>; <span class="comment">// int 转换为 char</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">19.5f</span>; <span class="comment">// float 转换为 int</span></span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>前面看到的强制转换好像都是“大类型”转为“小类型”，其实这是不一样的，也可以由“小类型”转为“大类型”：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> b = (double)a  + <span class="number">9.6</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第5行，先将a的值强制转换为double类型后，再跟9.6进行加法运算。这样的话，系统就不用执行“自动类型提升”的操作了。其实你不强转也可以的，因为系统会做一个“自动类型提升”的操作，将变量a的值10提升为double类型。知道有这用法就行了，以后某些地方会用得上。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【06】变量（二）]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9006%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="变量和内存的关系"><a href="#变量和内存的关系" class="headerlink" title="变量和内存的关系"></a>变量和内存的关系</h1><h2 id="变量示例"><a href="#变量示例" class="headerlink" title="变量示例"></a>变量示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">'A'</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在64bit编译器环境下，系统为变量a、b分别分配1个字节、4个字节的存储单元。也就是说：</p>
<p>（1）变量a中的’A’是用1个字节来存储的，1个字节共8位，变量a在内存中的存储形式是0100 0001，至于为什么’A’的二进制是这样呢，后面再讨论。<br>（2）变量b中的10是用4个字节来存储的，4个字节共32位，因此变量b在内存中的存储形式应该是0000 0000 0000 0000 0000 0000 0000 1010。</p>
<p>上述变量a、b在内存中的存储情况大致如下表所示（“存储的内容”那一列的一个小格子就代表一个字节，“地址”那一列是指每个字节的地址。）：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225259808-1160410400.png" alt=""></p>
<p>（1）从图中可以看出，变量b占用了内存地址从ffc1~ffc4的4个字节，变量a占用了内存地址为ffc5的1个字节。每个字节都有自己的地址，其实变量也有地址。变量存储单元的第一个字节的地址就是该变量的地址。变量a的地址是ffc5，变量b的地址是ffc1。<br>（2）内存寻址是从大到小的，也就是说做什么事都会先从内存地址较大的字节开始，因此系统会优先分配地址值较大的字节给变量。由于是先定义变量a、后定义变量b，因此你会看到变量a的地址ffc5比变量b的地址ffc1大。<br>（3）注意看表格中变量b存储的内容，变量b的二进制形式是：0000 0000 0000 0000 0000 0000 0000 1010。由于内存寻址是从大到小的，所以是从内存地址最大的字节开始存储数据，存放顺序是ffc4-&gt;ffc3-&gt; ffc2-&gt;ffc1，所以把前面的0000 0000都放在ffc2~ffc4中，最后面的八位0000 1010放在ffc1中。</p>
<h2 id="查看变量的内存地址"><a href="#查看变量的内存地址" class="headerlink" title="查看变量的内存地址"></a>查看变量的内存地址</h2><p>在调试过程中，我们经常会采取打印的方式查看变量的地址。</p>
<p>&lt; 代码示例 &gt;</p>
<p><em>main.c</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"变量a的地址是：%p"</span>, &amp;a);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt; 输出结果 &gt;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量a的地址是：<span class="number">0x7fff5fbff8f8</span></span><br></pre></td></tr></table></figure>
<p>第6行中的&amp;是一个地址运算符，&amp;a表示取得变量a的地址。格式符%p是专门用来输出地址的。这个0x7fff5fbff8f8就是变量a的内存地址。</p>
<h1 id="变量的使用注意"><a href="#变量的使用注意" class="headerlink" title="变量的使用注意"></a>变量的使用注意</h1><h2 id="不能重复定义同一个变量"><a href="#不能重复定义同一个变量" class="headerlink" title="不能重复定义同一个变量"></a>不能重复定义同一个变量</h2><p>下面的代码是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">89</span>;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译器会报第5行的错，错误的原因很简单，第3行和第5行都是定义变量i，因此在内存中会是这样：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225305090-942626929.png" alt=""></p>
<p>内存中会出现两块存储空间，而且名字都叫i，那如果我想取出变量i的值，那你说计算机取10好还是取89好呢？因此，这种做法肯定是不可以的。</p>
<h2 id="同类型变量之间可以相互赋值"><a href="#同类型变量之间可以相互赋值" class="headerlink" title="同类型变量之间可以相互赋值"></a>同类型变量之间可以相互赋值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = i;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了变量i且初始值为10；接着在第5行定义了变量a，并且将变量i的值赋值给了a。在内存中大致如下图所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225310043-2108240599.png" alt=""></p>
<p>变量i和变量a存储的值都是10。</p>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>变量的作用范围（作用域）是从定义变量的那一行代码开始，下面的代码是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b = i;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译器会报第3行的错误，错误原因是：标识符i找不到。我们是在第5行定义了变量i，因此变量i从第5行开始才有效，在前面的第3行是无效的。</p>
<h2 id="没有经过初始化的变量是可以使用的"><a href="#没有经过初始化的变量是可以使用的" class="headerlink" title="没有经过初始化的变量是可以使用的"></a>没有经过初始化的变量是可以使用的</h2><p>在C语言中，你声明一个局部变量后，没有经过初始化赋值是可以使用的，但这是很危险的，不建议这样做。大多数人应该觉得变量b打印出来应该是0，其实不是。因为系统会随意给变量b赋值，得到的是垃圾数据。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b;           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, b);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码的打印结果是：1606422622。因此，局部变量还是必须先进行初始化赋值，然后再使用，这样才是最安全的做法。</p>
<p>如果是全局的int类型变量，系统会默认赋值为0：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225318965-1449503471.png" alt=""></p>
<h2 id="char使用注意事项"><a href="#char使用注意事项" class="headerlink" title="char使用注意事项"></a>char使用注意事项</h2><h3 id="char的取值范围"><a href="#char的取值范围" class="headerlink" title="char的取值范围"></a>char的取值范围</h3><p>char的取值范围是ASCII码字符或者-128~127的整数，所以使用char存储大写字母A有2种赋值方式：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="number">65</span>;</span><br></pre></td></tr></table></figure>
<p>上面两种方式是等效的，因为大写字母A的ASCII码值刚好为65。</p>
<h3 id="char只能存储一个字符"><a href="#char只能存储一个字符" class="headerlink" title="char只能存储一个字符"></a>char只能存储一个字符</h3><p>汉字或者字符串需要用字符数组来存储，因为一个汉字占了2个字符，一个字符串是由一个或者多个字符组成的。因此，下面的写法都是错误的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char c1 = '我';</span><br><span class="line">char c2 = '123';</span><br><span class="line">char c3 = "123";</span><br></pre></td></tr></table></figure>
<h2 id="负数的二进制形式"><a href="#负数的二进制形式" class="headerlink" title="负数的二进制形式"></a>负数的二进制形式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">-10</span>;</span><br><span class="line">   return <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了一个整型变量，它的值是-10。-10在内存中怎样存储的呢？其实任何数值在内存中都是以补码的形式存储的：</p>
<p>（1）正数的补码与原码相同。比如9的原码和补码都是1001。<br>（2）负数的补码等于它正数的原码取反后再+1。（取反的意思就是0变1、1变0）。那么-10的补码计算过程如下：<br>　　a. 先算出10的二进制形式：0000 0000 0000 0000 0000 0000 0000 1010。<br>　　b. 对10的二进制进行取反：1111 1111 1111 1111 1111 1111 1111 0101。<br>　　c. 对取反后的结果+1：1111 1111 1111 1111 1111 1111 1111 0110，因此，整数-10在内存中的二进制形式是：1111 1111 1111 1111 1111 1111 1111 0110。如下图：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225323355-2088972388.png" alt=""></p>
<h1 id="变量的作用域-1"><a href="#变量的作用域-1" class="headerlink" title="变量的作用域"></a>变量的作用域</h1><h2 id="作用域简介"><a href="#作用域简介" class="headerlink" title="作用域简介"></a>作用域简介</h2><p>变量的作用域就是指变量的作用范围。先来看看下面的程序：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）在第3行定义了一个变量a，当执行到这行代码时，系统就会为变量a分配存储空间。<br>（2）当main函数执行完毕，也就是执行完第5行代码了，变量a所占用的内存就会被系统自动回收。<br>（3）因此，变量a的作用范围是从定义它的那行开始，一直到它所在的大括号{}结束，也就是第3~6行，一旦离开这个范围，变量a就失效了。</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块其实就是用大括号{}括住的一块代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a=%d"</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    a = <span class="number">9</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）注意第3~7行的大括号，这就是一个代码块。<br>（2）当执行到第4行时，系统会分配内存给变量a。<br>（3）当代码块执行完毕，也就是执行完第6行代码后，变量a所占用的内存就会被系统回收。<br>（4）因此，变量a的作用范围是从定义它的那行开始，一直到它所在的大括号{}结束，也就是第4~7行，离开这个范围，变量a就失效了。<br>（5）所以，上面的程序是编译失败的，第9行代码是错误的，变量a在第7行的时候已经失效了，不可能在第9行使用。</p>
<p>如果是下面这种情况：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a=%d"</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）注意第3、6行，各自定义了一个变量a，这种情况是没问题的。C语言规定：在不同作用域中允许有同名变量，系统会为它们分配不同的存储空间。<br>（2）在第3行定义的变量a的作用域是：第3~12行；在第6行定义的变量a的作用域是：第6~9行。<br>（3）最后注意第8行：尝试输出变量a的值。那这里输出的是哪一个变量a呢？其实这里采取的是“就近原则”，也就是第8行访问的是在第6行定义的变量a，并不是在第3行的变量a。输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【05】变量（一）]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9005%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h1><p>　<br>常量表示的数据是不可以改的，而用变量表示的数据是可以经常修改的。</p>
<h1 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h1><p>　<br>跟其他语言一样，C语言中用变量来存储计算过程使用的值，任何变量都必须先定义类型再使用。为什么一定要先定义呢？因为变量的类型决定了变量占用的存储空间，所以定义变量类型，就是为了给该变量分配适当的存储空间，以便存放数据。比如你是char类型，我就只给你分配1个字节就够了，没必要分配2个字节、3个字节乃至更多的存储空间。</p>
<h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><p>　<br>我们在定义变量的时候，需要指明变量类型，系统会根据变量类型来分配相应的存储空间。不同数据类型所占用的存储空间是不一样的，如果是字符型（char）变量，就分配1个字节的存储空间；如果是整型（int）变量，就分配4个字节的存储空间。</p>
<p>变量类型的还一个作用是用来约束变量所存放数据的类型。一旦给变量指明了类型，那么这个变量就只能存储这种类型的数据，比如整型（int）变量只能存储整型数据，不能存储浮点型数据。</p>
<h1 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h1><p>　<br>在程序运行过程，肯定会定义大量的变量，每个变量都有自己的存储空间。那怎么区分这些变量呢？怎么找到变量对应的存储空间呢？为了区分这些变量，定义变量的时候应该为每个变量指定一个变量名，变量名也是标识符的一种。当我们要修改变量的数据时，系统会根据变量名找到变量对应的存储空间，将存储空间里面的数据改掉。</p>
<p>变量的命名规则：</p>
<p>（1）只能由数字、字母、下划线组成，并且不能以数字开头。<br>（2）不可以与系统保留字同名。<br>（3）不能使用重复的变量名。<br>（4）见名知意（规范）。</p>
<h1 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h1><h2 id="根据变量的作用域"><a href="#根据变量的作用域" class="headerlink" title="根据变量的作用域"></a>根据变量的作用域</h2><p>C语言根据变量作用域的不同，将变量分为<code>局部变量</code>、<code>全局变量</code>。</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>（1）定义：在函数内部定义的变量，称为局部变量。形式参数也属于局部变量。<br>（2）作用域：局部变量只在定义它的函数内部有效，即局部变量只有在定义它的函数内部使用，其它函数不能使用它。</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>（1）定义：在所有函数外部定义的变量，称为全局变量。<br>（2）作用域：全局变量的作用范围是从定义变量的位置开始到源程序结束，即全局变量可以被在其定义位置之后的其它函数所共享。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第1行的变量a是全局变量，第5行的变量b是局部变量。</p>
<h2 id="根据变量的存储地点"><a href="#根据变量的存储地点" class="headerlink" title="根据变量的存储地点"></a>根据变量的存储地点</h2><p>有3个地方可以用于存储变量：普通内存、运行时堆栈、硬件寄存器。变量的存储地点决定了变量何时创建、何时销毁以及它的值能保持多久，也就是决定了变量的生命周期。</p>
<p>C语言根据变量存储地点的不同，可以把变量分为：<code>自动变量</code>、<code>静态变量</code>、<code>寄存器变量</code>。</p>
<h3 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h3><p>（1）定义：自动变量是存储在堆栈中的。<br>（2）哪些是自动变量：被关键字<code>auto</code>修饰的局部变量都是自动变量，但是极少使用这个关键字，基本上是废的，因为所有的局部变量在默认情况下都是自动变量。<br>（3）生命周期：在程序执行到声明自动变量的代码块（函数）时，自动变量才被创建，当自动变量所在的代码块（函数）执行完毕后，这些自动变量就会自行销毁。如果一个函数被重复调用，这些自动变量每次都会重新创建。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> c = a + b;</span><br><span class="line">      <span class="keyword">auto</span> <span class="keyword">int</span> d;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>第1行的变量a、b，第2行的变量c、第4行的变量d都是自动变量。</p>
<h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>（1）定义：静态变量是存储在静态内存中的，也就是不属于堆栈。<br>（2）哪些是静态变量：<br>　　a. 所有的全局变量都是静态变量。<br>　　b. 被关键字<code>static</code>修饰的局部变量也是静态变量。<br>（3）生命周期：静态变量在程序<code>运行之前</code>创建并且只会创建一次，在程序的整个运行期间始终存在，直到程序结束。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    b++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b=%d, c=%d \n"</span>, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 连续调用3次test函数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第3行的变量a、第6行的变量b都是静态变量，第9行的变量c、第16行的变量i是自动变量。</p>
<p>因为第6行的变量b是静态变量，所以它只会被创建一次，而且生命周期会延续到程序结束。因为它只会创建一次，所以第6行代码只会执行一次，下次再调用test函数时，变量b的值不会被重新初始化为0。</p>
<blockquote>
<p><strong>注意</strong>：虽然第6行的变量b是静态变量，但是只改变了它生命周期，并没有改变它的作用域，变量b还是只能在test函数内部使用。</p>
</blockquote>
<p>我们在main函数中重复调用test函数3次，输出结果为：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607155214183-305983019.png" alt=""></p>
<h3 id="寄存器变量"><a href="#寄存器变量" class="headerlink" title="寄存器变量"></a>寄存器变量</h3><p>（1）定义：存储在硬件寄存器中的变量，称为寄存器变量。寄存器变量比存储在内存中的变量访问效率更高（默认情况下，自动变量和静态变量都是放在内存中的）。<br>（2）哪些变量是寄存器变量：被关键字<code>register</code>修饰的自动变量都是寄存器变量。<br>　　a. 只有局部变量才可以是寄存器变量。<br>　　b. 寄存器变量只限于int、char和指针类型变量使用。<br>（3）生命周期：因为寄存器变量本身就是局部变量，所以函数中的寄存器变量在调用该函数时占用寄存器中存放的值，当函数结束时释放寄存器，变量消失。<br>（4）使用注意：<br>　　a. 由于计算机中寄存器数目有限，不能使用太多的寄存器变量。如果寄存器使用饱和时，程序将寄存器变量自动转换为自动变量处理。<br>　　b. 为了提高运算速度，一般会将一些频繁使用的局部变量定义为寄存器变量，这样程序尽可能地为它分配寄存器存放，而不用内存。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">register</span> <span class="keyword">int</span> a;</span><br><span class="line">     return <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>第2行的变量a是个寄存器变量。</p>
<h1 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h1><p>　<br>总结可得，定义变量需要2个条件：变量类型、变量名。定义变量的格式为：变量类型  变量名：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了一个名字为i的整型变量，说明i只能存储整型数据；在第5行定义了一个名字为c的字符型变量，说明c只能存储字符型数据。第3、5、7行的代码都称为“语句”，每条语句后面都有个分号“;”。</p>
<p>于是，系统就会在内存中分别为变量i、c分配一定的存储空间，如下图所示，i和c各占用一块存储空间：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607173556355-1508318186.png" alt=""></p>
<p>如果是同一种类型的变量，可以连续定义，变量名之间用逗号,隔开。格式为：变量类型  变量名1, 变量名2, 变量名3, … ;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, c;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第3行代码的意思是定义了2个int类型的变量，变量名分别为a、c。</p>
<h1 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h1><h2 id="先定义，再初始化"><a href="#先定义，再初始化" class="headerlink" title="先定义，再初始化"></a>先定义，再初始化</h2><p>前面已经定义了两个变量，但是这两个变量并没有存储任何值，我们需要给变量进行第一次赋值，也叫做“初始化”。</p>
<p>变量赋值的格式是：变量名 = 值;</p>
<p>这个等号”=”是一个赋值运算符，将右边的值赋值给左边的变量，也就是将右边的值存储到左边变量的存储空间中。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    c = <span class="string">'A'</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第4行给变量i赋值一个整型常量10，在第7行给变量c赋值一个字符型常量’A’。像第4、7行这样的赋值操作，称为“赋值运算”。</p>
<p>内存中大致如下图所示，整数10存储在i的存储空间中，字母A存储在c的存储空间中。（其实我这个图并不是很准确，因为内存中的所有数据都是以0和1的形式存储的，比如10，它会存储成1010；字母 A ，它会存储成1000001。这里为了达到直观的效果，就没有写成二进制形式）</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607173911043-638078260.png" alt=""></p>
<h2 id="定义的同时初始化"><a href="#定义的同时初始化" class="headerlink" title="定义的同时初始化"></a>定义的同时初始化</h2><p>上面的代码也可以写成下面这样，在定义变量的同时进行初始化：变量类型  变量名 = 值;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">10.9f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">9.8</span>;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607174035683-177628936.png" alt=""></p>
<h2 id="可以不断修改"><a href="#可以不断修改" class="headerlink" title="可以不断修改"></a>可以不断修改</h2><p>既然i是个变量，说明它的值可以不断地改变，看下面的代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">89</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了变量i，并且初始值为10。紧接着在第5行把i的值改为89，这个89会覆盖以前存储的10。</p>
<h2 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h2><p>刚才提到，默认情况下，变量的值是可以不断改变的。不过，有时候我们会希望变量的值只在定义的时候初始化一次，以后都不能再改变，这个时候我们就可以使用<code>const</code>关键字来修饰变量。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">11</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第3行，在<code>int</code>的前面加了个<code>const</code>关键字。表示变量i的值只会初始化一次，也就是说i的值永远都是一开始的10，以后都不能再改了。所以编译器会报第5行代码的错误，不允许再次修改i的值。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【04】常量]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9004%E3%80%91%E5%B8%B8%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="什么是常量"><a href="#什么是常量" class="headerlink" title="什么是常量"></a>什么是常量</h1><p>　<br>“量”表示数据。常量，则表示一些固定的数据，也就是不能改变的数据。</p>
<h1 id="常量的类型"><a href="#常量的类型" class="headerlink" title="常量的类型"></a>常量的类型</h1><h2 id="整型常量（int）"><a href="#整型常量（int）" class="headerlink" title="整型常量（int）"></a>整型常量（int）</h2><p>其实就是<code>int</code>类型的数据，包括了所有的整数，比如6、27、109、256、-10、0、-289等。</p>
<h2 id="浮点型常量（float-double）"><a href="#浮点型常量（float-double）" class="headerlink" title="浮点型常量（float\double）"></a>浮点型常量（float\double）</h2><p>浮点型常量分为<code>double</code>和<code>float</code>两种数据类型：</p>
<p>（1）<code>double</code>：双精度浮点型，其实就是小数。比如5.43、-2.3、0.0等，注意，0.0也算是个小数。<br>（2）<code>float</code>：单精度浮点型，也是小数，比<code>double</code>的精确程度低，也就是说所能表示的小数位数比较少。为了跟<code>double</code>区分开来， <code>float</code> 型数据都是以<code>f</code>结尾的，比如5.43f、-2.3f、0.0f。需要注意的是，绝对不能有10f这样格式的，编译器会直接报错，只有小数才允许加上f。</p>
<h2 id="字符常量（char）"><a href="#字符常量（char）" class="headerlink" title="字符常量（char）"></a>字符常量（char）</h2><p>将一个数字（0~9）、英文字母（a~z、A~Z）或者其他符号（+、-、!、?等）用单引号括起来，这样构成的就是字符常量。比如’6’、’a’、’F’、’+’、’$’等。</p>
<blockquote>
<p><strong>注意</strong>：单引号只能括住1个字符，而且不能是中文字符，下面的写法是错误的：’abc’、’123456’、’男’。</p>
</blockquote>
<h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>将一个或者多个字符用双引号（””）括起来，这样构成的就是字符串常量。比如”6”、”男”、”哇哈哈”、”abcd”、”my_car4”，其实printf(“Hello World”);语句中的”Hello World”就是字符串常量。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【03】数据]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9003%E3%80%91%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　<br>在我们使用计算机的过程中，会接触到各种各样的数据，有文档数据、图片数据、视频数据，还有聊QQ时产生的文字数据、用迅雷下载的文件数据等。这讲我们就来介绍C语言中数据的处理。</p>
<h1 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h1><h2 id="数据形态"><a href="#数据形态" class="headerlink" title="数据形态"></a>数据形态</h2><p>首先来看看计算机是怎么存储数据的。总的来说，计算机中存储的数据可以分为两种：静态数据和动态数据。</p>
<h3 id="静态数据"><a href="#静态数据" class="headerlink" title="静态数据"></a>静态数据</h3><p>（1）概念：静态数据是指一些永久性的数据，一般存储在硬盘中。硬盘的存储空间一般都比较大，现在普通计算机的硬盘都有500G左右，因此硬盘中可以存放一些比较大的文件。<br>（2）存储的时长：计算机关闭之后再开启，这些数据依旧还在，只要你不主动删掉或者硬盘没坏，这些数据永远都在。<br>（3）哪些是静态数据：静态数据一般是以文件的形式存储在硬盘上，比如文档、照片、视频等。</p>
<h3 id="动态数据"><a href="#动态数据" class="headerlink" title="动态数据"></a>动态数据</h3><p>（1）概念：动态数据指在程序运行过程中，动态产生的临时数据，一般存储在内存中。内存的存储空间一般都比较小，现在普通计算机的内存只有4G左右，因此要谨慎使用内存，不要占用太多的内存空间。<br>（2）存储的时长：计算机关闭之后，这些临时数据就会被清除。<br>（3）哪些是动态数据：当运行某个程序（软件）时，整个程序就会被加载到内存中，在程序运行过程中，会产生各种各样的临时数据，这些临时数据都是存储在内存中的。当程序停止运行或者计算机被强制关闭时，这个程序产生的所有临时数据都会被清除。</p>
<p>你可能会问，既然硬盘的存储空间这么大，为何不把所有的应用程序加载到硬盘中去执行呢？有个主要原因是内存的访问速度比硬盘快N倍。</p>
<h3 id="动态数据和静态数据的转换"><a href="#动态数据和静态数据的转换" class="headerlink" title="动态数据和静态数据的转换"></a>动态数据和静态数据的转换</h3><p>硬盘和内存是计算机使用最频繁的两个硬件，它们之间的数据经常要进行转换。</p>
<p>比如，硬盘上有个叫做“C语言.mp4”的视频文件，现在要使用暴风影音来播放：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143556418-1431912984.png" alt=""></p>
<p>首先打开暴风影音软件，计算机会将暴风影音加载到内存中，紧接着计算机会读取硬盘中视频文件的内容到内存中。暴风影音会解析读取到的文件内容，以视频的形式呈现给用户看。这就完成了一个由静态数据到动态数据的转换。</p>
<p>再比如，你使用迅雷从网上下载一个叫做“C语言.mp4”的视频文件：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143719574-1356202246.png" alt=""></p>
<p>首先打开迅雷软件，计算机会将迅雷加载到内存中，紧接着迅雷就会从互联网下载视频文件。大家都知道，这个下载过程肯定是要耗点时间的，主要受文件大小和下载速度的影响。每个时间段内下载获取的数据都是先放到内存中，然后再写入到硬盘中。所有数据下载完毕后，硬盘中就会有一个完整的视频文件。这就完成了动态数据到静态数据的转换。</p>
<h2 id="存储形式"><a href="#存储形式" class="headerlink" title="存储形式"></a>存储形式</h2><h3 id="二进制存储"><a href="#二进制存储" class="headerlink" title="二进制存储"></a>二进制存储</h3><p>计算机只能识别0和1。因此，前面所说的静态数据和动态数据，都是以0和1的形式存储的，这种存储方式称为“二进制存储”。有人可能觉得很诧异，只是0和1怎么可能表示这多的数据呢？没错，如果只是一位数字的话，只能表示2种数据：要么是0，要么是1。但是如果有多位数字的话，那情况就不一样了。如果有2位数字，那么就能表示4种数据：00、01、10、11；如果有3位数字呢，就能表示8种数据；以此类推，如果有n位数字，就能表示2的n次方种数据。可以发现，只要位数足够，0和1所能表示的数据是非常庞大的。</p>
<h3 id="比特位和字节"><a href="#比特位和字节" class="headerlink" title="比特位和字节"></a>比特位和字节</h3><p>平时我们在计算机上看到的MP4、MP3、照片等文件，都是由0和1组合成的，只不过计算机解析了这些0和1，以图形界面的形式呈现在我们眼前。文件越大，所包含的0和1就越多，为了方便计算文件大小，对计量单位做了个规定：1个二进制位为1bit，也就是1个0或1就为1bit，bit的中文翻译是“比特位”；8个二进制位为1byte，也就是8个0或1就为1byte，1byte=8bit，byte的中文翻译是“字节”。平时我们所说的某个文件大小为64B，就是64字节的意思，内部包含了64x8个0和1。</p>
<p>数据换算：1 KB = 1024 B，1 MB = 1024 KB，1 GB = 1024 MB，1 TB = 1024 GB。</p>
<h1 id="数据的类型"><a href="#数据的类型" class="headerlink" title="数据的类型"></a>数据的类型</h1><p>　<br>C语言有丰富的数据类型，因此它很适合用来编写数据库，如DB2、Oracle都是C语言写的。</p>
<p>作为程序员，最关心的肯定是内存中的动态数据，因为我们写的程序就是运行在内存中的。程序在运行过程中，会产生各种各样的动态临时数据，为了方便数据的运算和操作，C语言对这些数据进行了分类，提供了丰富的数据类型。大致如下图所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143724168-1786196972.jpg" alt=""></p>
<p>在图中众多数据类型中，最常用的是4种基本数据类型：char、int、float、double，而最重要的是指针类型，指针使用得当的话，不仅可以节省代码量，还可以优化内存管理、提高性能。因此，指针是一个非常重要的概念，必须重视。如果你说C语言中除了指针，其他都学得挺好的，那你干脆说你没学过C语言。</p>
<p>这些丰富的数据在C语言中可以用常量或者变量来表示（后面会介绍常量和变量的使用）。</p>
<h1 id="数据的访问"><a href="#数据的访问" class="headerlink" title="数据的访问"></a>数据的访问</h1><p>　<br>数据访问一般分为直接访问和间接访问：</p>
<p>（1）直接访问：直接访问内存单元中的内容。例如: a = 20; b = 2 * a等。<br>（2）间接访问：通过内存单元编号以及数据所占字节数访问内存中数据。</p>
<blockquote>
<p><strong>注意</strong>：指针是间接访问的常用方式。</p>
</blockquote>
<h1 id="不同编译器环境下基本数据类型的存储长度"><a href="#不同编译器环境下基本数据类型的存储长度" class="headerlink" title="不同编译器环境下基本数据类型的存储长度"></a>不同编译器环境下基本数据类型的存储长度</h1><p>　<br>红色的代表常用的数据类型：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143728402-1476722878.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【02】C语言语法]]></title>
      <url>http://sanfordy.com/2016/05/30/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9002%E3%80%91C%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　<br>C语言属于一门高级语言，其实所有的高级语言的基本语法组成部分都是一样的，只是表现形式不太一样。就好像亚洲人和非洲人，大家都有人类的结构：2只手、2只脚、1个头，只是他们外表不太一样，比如肤色、脸型。因此，你掌握好了一门高级语言，再去学习其他高级语言，那是相当快的。而且，很多其他高级语言，比如后面要学习的Objective-C，都是基于C语言、从C语言衍生出来的，好好学习C语言吧，绝对不吃亏。</p>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="什么是关键字"><a href="#什么是关键字" class="headerlink" title="什么是关键字"></a>什么是关键字</h2><p>关键字就是C语言提供的有特殊含义的符号，有些地方也叫做“保留字”。</p>
<h2 id="都有哪些关键字"><a href="#都有哪些关键字" class="headerlink" title="都有哪些关键字"></a>都有哪些关键字</h2><p>C语言一共提供了32个关键字，这些关键字都被C语言赋予了特殊含义。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">double</span> <span class="keyword">int</span> <span class="keyword">struct</span> <span class="keyword">break</span> <span class="keyword">else</span> <span class="keyword">long</span> <span class="keyword">switch</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">enum</span> <span class="keyword">register</span> <span class="keyword">typedef</span> <span class="keyword">char</span> <span class="keyword">extern</span> return <span class="keyword">union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> <span class="keyword">short</span> <span class="keyword">unsigned</span> <span class="keyword">continue</span> <span class="keyword">for</span> <span class="keyword">signed</span> <span class="keyword">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span> <span class="keyword">goto</span> <span class="keyword">sizeof</span> <span class="keyword">volatile</span> <span class="keyword">do</span> <span class="keyword">if</span> <span class="keyword">while</span> <span class="keyword">static</span></span><br></pre></td></tr></table></figure>
<p>大致浏览一遍即可，不用去百度每个关键字的作用，这些关键字以后会经常用到的，到时候你想不记住都难。</p>
<h2 id="如何辨别关键字"><a href="#如何辨别关键字" class="headerlink" title="如何辨别关键字"></a>如何辨别关键字</h2><p>这些关键字会经常跟其他符号混在一起使用，一个程序里面这么多英文符号，我怎么知道那些是关键字呢？关键字有2大特征：</p>
<ol>
<li>全部都是小写。</li>
<li>在开发工具或者智能文本编辑工具（比如UltraEdit）中会显示特殊颜色。</li>
</ol>
<p>比如下面这段C程序在UltraEdit中呈现的样子：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607104437855-2085184487.png" alt=""></p>
<p>在这段代码中，只有int和return是关键字，C语言中的所有关键字在UltraEdit中都会显示蓝色！可以看出，main并不是关键字。至于int和return究竟有什么特殊含义，这里先不做讨论，后面会详细介绍。</p>
<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><h2 id="什么是标识符"><a href="#什么是标识符" class="headerlink" title="什么是标识符"></a>什么是标识符</h2><p>在程序中使用的变量名、函数名、标号等统称为标识符。除库函数的函数名由系统定义外，其余都由用户自定义。C规定，标识符只能是字母(A～Z，a～z)、数字(0～9)、下划线(_)组成的字符串，并且其第一个字符不能是数字。</p>
<h2 id="在使用标识符时还必须注意以下几点"><a href="#在使用标识符时还必须注意以下几点" class="headerlink" title="在使用标识符时还必须注意以下几点"></a>在使用标识符时还必须注意以下几点</h2><p>（1）标准C不限制标识符的长度，但它受各种版本的C语言编译系统限制，同时也受到具体机器的限制。例如在某版本C中规定标识符前八位有效，当两个标识符前八位相同时，则被认为是同一个标识符。<br>（2）在标识符中，大小写是有区别的。例如BOOK和book是两个不同的标识符。<br>（3）标识符虽然可由程序员随意定义，但标识符是用于标识某个量的符号。因此，命名应尽量有相应的意义，以便阅读理解，作到“顾名思义”。如果标识符中含有多个单词，可以使用驼峰标识（除开第一个单词，后面每个单词的首字母都是大写）：firstName、myFirstName，或者使用下划线_来连接：first_name、my_first_name。</p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>　<br>表达式是由常量、变量与运算符组成的。例如：3+5，a += b!</p>
<blockquote>
<p><strong>注意</strong>：表达式都会返回值。</p>
</blockquote>
<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><p>　<br>语句是程序执⾏的最小单位，以分号结尾。 </p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【01】第一个C程序代码分析]]></title>
      <url>http://sanfordy.com/2016/05/17/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9001%E3%80%91%E7%AC%AC%E4%B8%80%E4%B8%AAC%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="Xcode创建C程序步骤"><a href="#Xcode创建C程序步骤" class="headerlink" title="Xcode创建C程序步骤"></a>Xcode创建C程序步骤</h1><h2 id="打开Xcode"><a href="#打开Xcode" class="headerlink" title="打开Xcode"></a>打开Xcode</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114753808-1887444754.png" alt=""></p>
<h2 id="选择命令行程序"><a href="#选择命令行程序" class="headerlink" title="选择命令行程序"></a>选择命令行程序</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114803121-1487331799.png" alt=""></p>
<h2 id="填写项目名称并选择使用C语言"><a href="#填写项目名称并选择使用C语言" class="headerlink" title="填写项目名称并选择使用C语言"></a>填写项目名称并选择使用C语言</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114813058-523307311.png" alt=""></p>
<h2 id="选择保存目录"><a href="#选择保存目录" class="headerlink" title="选择保存目录"></a>选择保存目录</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114825027-90093732.png" alt=""></p>
<h2 id="自动生成如下代码"><a href="#自动生成如下代码" class="headerlink" title="自动生成如下代码"></a>自动生成如下代码</h2><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114837011-470505554.png" alt=""></p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>　<br>打开项目中的main.c文件（C程序的源文件拓展名为<code>.c</code>），可以发现它是C程序中的唯一一个源文件，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来分析一下每行代码的意义。</p>
<h2 id="预处理命令：-include"><a href="#预处理命令：-include" class="headerlink" title="预处理命令：#include"></a>预处理命令：#include</h2><p><code>#include</code>是C语言的预处理指令之一，所谓预处理，就是在编译之前做的处理，预处理指令一般以<code>#</code>开头。</p>
<p><code>#include</code>指令后面会跟着一个文件名，预处理器发现<code>#include</code>指令后，就会根据文件名去查找文件，并把这个文件的内容包含到当前文件中。被包含文件中的文本将替换源文件中的<code>#include</code>指令，就像你把被包含文件中的全部内容拷贝到这个<code>#include</code>指令所在的位置一样。</p>
<p>如果被包含的文件拓展名为<code>.h</code>，我们称之为”头文件”（Header File），头文件可以用来声明函数（”函数”就是面向对象中的”方法”），要想使用这些函数，就必须先用<code>#include</code>指令包含函数所在的头文件。</p>
<p><code>#include</code>指令不仅仅限于<code>.h</code>头文件，<code>可以包含任何编译器能识别的C/C++代码文件</code>，包括<code>.c</code>、<code>.hpp</code>、.<code>cpp</code>等，甚至<code>.txt</code>、<code>.abc</code>等等都可以，也就是说你完全可以将第3行到第9行的代码放到其他文件中，然后用 <code>#include</code>指令包含进来。比如将第3行到第9行的代码放到 my.txt 中：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114905949-694429859.png" alt=""></p>
<p>在<code>main.c</code>源文件中包含my.txt文件：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114916043-985670090.png" alt=""></p>
<p>程序还是可以照常运行的，因为<code>#include</code>的功能就是将文件内容完全拷贝到<code>#include</code>指令所在的位置。</p>
<blockquote>
<p><strong>注意</strong>：不过你可能会疑惑，为什么<code>stdio.h</code>用尖括号&lt;&gt;，而my.txt用双引号””？这个很好区别，如果是系统自带的文件，最好用&lt;&gt;；如果是开发人员自己创建的文件，最好用””。</p>
<p><strong>说明</strong>：这里用txt文件纯属演示，平时做项目不会这样做，除非吃饱了撑着，才会把代码都写到txt中去。</p>
</blockquote>
<h2 id="库函数：stdio-h"><a href="#库函数：stdio-h" class="headerlink" title="库函数：stdio.h"></a>库函数：stdio.h</h2><p><code>stdio.h</code>是C语言函数库中的一个头文件，里面定义了一些标准输入输出函数。在main.c的第1行代码中，用<code>#include</code>指令包含了<code>stdio.h</code>文件。</p>
<p>这里之所以包含<code>stdio.h</code>文件，是因为在第7行中用到了在<code>stdio.h</code>内部声明的<code>printf</code>函数，这个函数可以向标准输出设备（比如显示器屏幕）输出数据，屏幕上输出的文字就是第7行代码<code>printf(&quot;Hello, World!\n&quot;)</code>造成的，双引号””内的文本为C语言的字符串。</p>
<h2 id="主函数：main"><a href="#主函数：main" class="headerlink" title="主函数：main"></a>主函数：main</h2><p>前面也已经提到，C中的函数就是面向对象中的”方法”。 C语言是一门面向过程的语言，是以过程为中心的编程思想，就是先分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用函数就可以了。</p>
<p>一个C程序中一定会有一个<code>main</code>函数，也只能有一个<code>main</code>函数。<code>main</code>函数是整个C程序的入口。<code>main.c</code>的第3行代码就定义了一个<code>main</code>函数。</p>
<p><code>main</code>函数的返回值为<code>int</code>类型，接收2个参数，其实可以不写参数， main 函数可以简化成这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：这里的main函数没有写返回值类型，并不代表函数没有返回值，而是表示返回值类型为int类型，void才代表函数没有返回值。</p>
</blockquote>
<p>由于C语言的语法限制不严格，我们还可以进一步简化 main 函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：虽然它要求main函数返回int类型的值，但我们可以不返回。</p>
</blockquote>
<h1 id="开发和运行C程序的步骤"><a href="#开发和运行C程序的步骤" class="headerlink" title="开发和运行C程序的步骤"></a>开发和运行C程序的步骤</h1><p>　<br>步骤图如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114923027-1543894669.png" alt=""></p>
<h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><p>C语言源文件的扩展名为<code>.c</code>，源程序（代码）以<code>ASCII</code>码形式存储于源文件，不能直接被计算机执行，因为计算机只能识别二进制指令，也就是0和1。</p>
<h2 id="编译（生成目标文件）"><a href="#编译（生成目标文件）" class="headerlink" title="编译（生成目标文件）"></a>编译（生成目标文件）</h2><p>把C的源文件（代码）翻译成计算机可以识别的二进制形式的目标文件，这个过程称为编译，由C的编译器完成。</p>
<p>在编译的同时，还对源程序的语法等进行检查。若出现语法错误，则编译失败。如果编译成功则生成目标文件，目标文件名跟源程序文件名一样，扩展名为<code>.obj</code>。比如，mj.c编译后生成目标文件mj.obj。</p>
<p>每个源文件是单独进行编译的，假如一个项目中有多个.c源文件，编译成功会生成多个对应的<code>.obj</code>目标。一般情况下，目标文件之间是有关联的，比如a.obj可能会调用b.obj中定义的一个函数，因此它们都不能够单独被计算机执行，而且<code>目标文件中并不包含程序运行所需要的库函数</code>等。</p>
<blockquote>
<p><strong>提示</strong>：在编译之前会进行预处理（例如<code>#include</code>指令）。</p>
<p><strong>注意</strong>：编译器不会编译<code>.h</code>文件，因为在编译前会进行预处理，预处理会把<code>.h</code>文件的代码拷贝到<code>.c</code>文件中，从而一起编译。</p>
</blockquote>
<h2 id="链接（生成可执行文件）"><a href="#链接（生成可执行文件）" class="headerlink" title="链接（生成可执行文件）"></a>链接（生成可执行文件）</h2><p>将所有有关联的<code>obj</code>目标文件，以及系统提供的C库函数等组合在一起生成一个可执行文件的过程，称为”链接”。链接生成的可执行文件的文件名跟源程序文件同名，扩展名为<code>.exe</code>，计算机可以直接执行。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>如果是在Windows环境下，直接双击<code>.exe</code>文件即可运行C语言程序。</p>
<p>由于我们的第一个C程序，是在Mac OS X系统环境下用Xcode创建的命令行项目，Mac OS X系统是基于UNIX系统的，因此生成的可执行文件的这样的:</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114929699-1395943059.png" alt=""></p>
<p>双击可以用终端打开：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114935215-625977268.png" alt=""></p>
<h1 id="多文件开发"><a href="#多文件开发" class="headerlink" title="多文件开发"></a>多文件开发</h1><p>　<br>在大型项目开发中程序中所有的代码都写到一个文件中是不现实的，我们通常将一个子操作分为两个文件：<code>.c</code>文件和<code>.h</code>文件。在<code>.c</code>文件中实现对应的函数，在<code>.h</code>中进行函数声明。</p>
<p>&lt; 代码示例 &gt;</p>
<p><em>main</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"message.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    showMessage();</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main.c</span><br></pre></td></tr></table></figure>
<p><em>message.h</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p><em>message.c</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"message.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt; 输出结果 &gt;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br><span class="line">Program ended with <span class="built_in">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>可以发现程序仍然可以正常运行。</p>
<p>但是我们思考一个问题，如果我们不分成两个文件，直接在主函数文件中包含message.c是否也可以正常运行呢？答案是否定的，原因是由于编译生成的两个文件main.obj和message.obj在链接时会发现main.obj中已经有message.obj中定义的showMessage函数，抛出“标示符重复”的错误：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114940746-1062903242.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【00】C语言简介]]></title>
      <url>http://sanfordy.com/2016/05/11/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9000%E3%80%91C%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h1 id="计算机常识"><a href="#计算机常识" class="headerlink" title="计算机常识"></a>计算机常识</h1><p>　<br>在学习C语言之前，先要了解一些计算机常识</p>
<h2 id="计算机只能识别0和1"><a href="#计算机只能识别0和1" class="headerlink" title="计算机只能识别0和1"></a>计算机只能识别0和1</h2><p>大家都知道，计算机要通电才能工作，说白了，它跟电视、洗衣机一样，都是电器。电器都有个共同的能力：懂得判断通电还是断电，通电就能工作，断电就停止工作。因此，从根本上讲，计算机只能识别电信号：高电平信号（通电）、低电平信号（断电），它只知道某个开关是通电还是断电。我们用1代表高电平，0代表低电平。也就说，<code>计算机只能识别0和1。</code></p>
<h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><p>因为计算机只能识别0和1，因此计算机所能识别的指令和数据都是用二进制数（0和1）来表示的。所谓二进制，就是用0和1来表示所有的数。不过我们日常生活中最常用的是十进制，用0~9来表示所有的数。</p>
<h3 id="二进制指令"><a href="#二进制指令" class="headerlink" title="二进制指令"></a>二进制指令</h3><p>给计算机灌输一些指令，它就能执行相应的操作，而计算机只能识别由0和1组成的指令。在计算机发展初期，计算机的指令长度为16，即以16个二进制数（0或1）组成一条指令，例如，用1011011000000000这条指令，是让计算机进行一次加法运算。因此，如果要想计算机执行一系列的操作，就必须编写许多条由0和1组成的指令，可以想象的到，这个工作量是如此巨大。</p>
<h3 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h3><p>平时我们在计算机中存储的一些数据，比如文档、照片、视频等，都是以0和1的形式存储的。只不过计算机解析了这一大堆的0和1，以图形界面的形式将数据展示在我们眼前。</p>
<h1 id="程序设计语言的发展史"><a href="#程序设计语言的发展史" class="headerlink" title="程序设计语言的发展史"></a>程序设计语言的发展史</h1><p>　<br>我们可以利用程序设计语言来编写程序，再将编好的程序运行到计算机上，计算机就能够按照程序中所说的去做。从计算机诞生至今，程序设计语言大致经历了3个发展阶段：<code>机器语言</code>、<code>汇编语言</code>、<code>高级语言</code>。其中， C语言属于高级语言。</p>
<h2 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h2><h3 id="什么是机器语言"><a href="#什么是机器语言" class="headerlink" title="什么是机器语言"></a>什么是机器语言</h3><p>在计算器诞生初期， 所有的计算机程序都是直接用计算机能识别的二进制指令来编写的，也就是说所有的代码里面只有0和1。这种程序设计语言就是“机器语言”。这些由0和1组成的二进制指令，又叫做“机器指令”。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>（1）执行效率高：由于机器语言编写出来的代码是能被计算机直接识别的，因此机器语言是直接对硬件产生作用的，程序的执行效率非常高。<br>（2）可操作硬件：机器语言能直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>（1）难记：用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令和指令的涵义，指令又多又难记。<br>（2）可读性差：编出的程序全是些0和1的指令代码，可读性差，还容易出错。<br>（3）可移植性差：由于机器语言是直接对硬件产生作用的，对硬件的依赖性很强，因此不同型号计算机的机器语言又不一样。也就是说，如果2台不同型号的机器想实现一样的功能，需要编写2套完全不同的代码。</p>
<blockquote>
<p><strong>提示</strong>：机器语言很难掌握和推广，现在除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</p>
</blockquote>
<h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><h3 id="什么是汇编语言"><a href="#什么是汇编语言" class="headerlink" title="什么是汇编语言"></a>什么是汇编语言</h3><p>由于机器语言的种种弊端，严重影响开发效率，后面就出现了汇编语言。汇编语言其实就是符号化的机器语言，它用一个符号（英文单词、数字）来代表一条机器指令。比如，在机器语言中，用1011011000000000这条指令，是让计算机进行一次加法运算；而在汇编语言中，用英文单词 “ADD”就可以表示加法运算。一个有意义的英文单词，很明显比一串又臭又长的二进制指令，直观好记多了。</p>
<p>由于计算机只能识别0和1，用汇编语言编写的代码是不能被计算机所识别的，像刚才的”ADD”，计算机肯定不知道是什么意思。因此，用汇编语言编写的代码需要翻译成二进制指令后，才能被计算机识别。这个翻译的工作交给编译器去做。</p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>（1）可读性较好：对比机器语言，汇编语言的代码可读性好。<br>（2）可操作硬件：汇编语言能像机器语言一样，可以直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。使用汇编语言，可以访问所有能够被访问的软、硬件资源。<br>（3）目标代码简短：目标代码就是经编译器翻译过后的二进制代码，占用内存少，执行速度快。（计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中， CPU就会把需要运算的数据调到内存中进行运算，当运算完成后内存再将结果传送出来，内存的运行也决定了计算机的稳定运行。）计算机的内存是有限的，因此一个应用程序运行时所占用的内存越少越好。</p>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>（1）可移植性差：汇编语言是面向机器的，通常是为特定的计算机或系列计算机专门设计的。因此，不同的机器有不同的汇编语言语法和编译器，代码缺乏可移植性，也就是说，一个程序只能在一种机器上运行，换到其他机器上就不能运行。<br>（2）难记：汇编语言的符号非常多、难记，即使是完成简单的功能也需要大量的汇编语言代码，很容易产生BUG，难于调试。<br>（3）开发效率低：使用汇编语言必须对硬件非常了解，开发效率很低，周期长且单调。</p>
<h2 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h2><h3 id="什么是高级语言"><a href="#什么是高级语言" class="headerlink" title="什么是高级语言"></a>什么是高级语言</h3><p>由于汇编语言依赖于硬件，代码可移植性差，符号又多又难记，于是人类就发明了非常接近自然语言的高级语言。后面要学习的C语言就是高级语言。</p>
<h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p>（1）可读性最好：语法和结构类似于普通英文，且远离对硬件的直接操作，使得一般人经过学习之后都可以编程，而不用太熟悉硬件知识。<br>（2）代码简洁：比如要计算2个数的和，在高级语言中可以写得非常简洁：d=a+b。但是在机器语言和汇编语言中，就需要几条甚至几十条指令，而且不同机器还要编写不同的指令代码。<br>（3）可移植性好：用高级语言编写的同一个程序还可以在不同的机器上运行，具有可移植性。</p>
<blockquote>
<p><strong>注意</strong>：用高级语言编写的程序不能直接被计算机识别，需要经编译器翻译成二进制指令后，才能运行到计算机上。</p>
</blockquote>
<h1 id="C语言简史"><a href="#C语言简史" class="headerlink" title="C语言简史"></a>C语言简史</h1><p>　<br>C语言于1972年发明，首次使用是用于重写<code>UNIX</code>操作系统（<code>UNIX</code>以前是用汇编写的）。随着<code>UNIX</code>操作系统的成功，C语言也得到了大幅度地推广，至今还是世界上最流行、使用最广泛的高级程序设计语言之一。</p>
<blockquote>
<p><strong>注意</strong>：C语言是一门面向过程的语言，非面向对象的语言。</p>
</blockquote>
<h1 id="C语言的优点"><a href="#C语言的优点" class="headerlink" title="C语言的优点"></a>C语言的优点</h1><h2 id="丰富的运算符"><a href="#丰富的运算符" class="headerlink" title="丰富的运算符"></a>丰富的运算符</h2><p>计算机的基本功能就是计算，因此一门程序设计语言的计算能力是非常重要的。C语言提供了34种运算符，计算类型及其丰富，其中包括了最基本的加减乘除运算。</p>
<h2 id="丰富的数据类型"><a href="#丰富的数据类型" class="headerlink" title="丰富的数据类型"></a>丰富的数据类型</h2><p>C语言之所以生命力如何强大，很大一部分是因为它拥有丰富的数据类型。C语言的数据类型有：整型（int）、实型（float）、字符型（char）、数组类型（int []）、指针类型（void *）、结构体类型（struct）、共用体类型（union）等。众多数据类型中，最强大的是指针，通过指针我们可以直接访问内存地址。指针使用得当的话，不仅可以节省代码量，还可以优化内存管理、提高性能。因此，指针是一个非常重要的概念，必须重视。如果你说 C语言中除了指针，其他都学得挺好的，那你干脆说你没学过C语言。正因为C语言数据类型丰富，运算能力极强，因此很多数据库都是用C语言编写的，比如<code>DB2</code>、<code>Oracle</code>等。</p>
<h2 id="允许直接访问物理地址，对硬件进行操作"><a href="#允许直接访问物理地址，对硬件进行操作" class="headerlink" title="允许直接访问物理地址，对硬件进行操作"></a>允许直接访问物理地址，对硬件进行操作</h2><p>由于C语言允许直接访问物理地址，可以直接对硬件进行操作，因此它既具有高级语言的功能，又具有低级语言的许多功能，能够像汇编语言一样对位（bit）、字节和地址进行操作，而这三者是计算机最基本的工作单元。</p>
<h2 id="高效率的目标代码"><a href="#高效率的目标代码" class="headerlink" title="高效率的目标代码"></a>高效率的目标代码</h2><p>对比汇编语言，C语言可读性好，易于调试、修改和移植，代码质量与汇编语言相当。</p>
<h2 id="可移植性好"><a href="#可移植性好" class="headerlink" title="可移植性好"></a>可移植性好</h2><p>在一个环境上用C语言编写的程序，不改动或稍加改动，就可移植到另一个完全不同的环境中运行。</p>
<h1 id="C语言的缺点"><a href="#C语言的缺点" class="headerlink" title="C语言的缺点"></a>C语言的缺点</h1><h2 id="封装性差、安全性低"><a href="#封装性差、安全性低" class="headerlink" title="封装性差、安全性低"></a>封装性差、安全性低</h2><p>由于C语言是面向过程的，因此它的数据封装性差、安全性低，这就是C语言和其他面向对象语言的区别之一。面向对象语言的特性之一就是数据的封装性。</p>
<h2 id="语法限制不严格"><a href="#语法限制不严格" class="headerlink" title="语法限制不严格"></a>语法限制不严格</h2><p>对变量的类型约束不严格，对数组下标越界不作检查等。</p>
<h1 id="C语言能做什么"><a href="#C语言能做什么" class="headerlink" title="C语言能做什么"></a>C语言能做什么</h1><h2 id="开发计算机软件"><a href="#开发计算机软件" class="headerlink" title="开发计算机软件"></a>开发计算机软件</h2><p>由于C语言具有强大的数据处理能力，而且允许直接访问物理地址，直接对硬件操作，因此它适于编写系统软件、图形处理、单片机程序、嵌入式系统开发甚至是用于科研。</p>
<h2 id="开发Android"><a href="#开发Android" class="headerlink" title="开发Android"></a>开发Android</h2><p>很多操作系统的底层都是用C语言写的，比如 android 。</p>
<h2 id="开发iOS"><a href="#开发iOS" class="headerlink" title="开发iOS"></a>开发iOS</h2><p>iOS开发中的核心语言是Objective-C（简称OC），OC是在C语言的基础上加了一层面向对象语法。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>　<br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
  
  
</search>
