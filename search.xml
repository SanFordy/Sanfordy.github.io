<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[【06】变量（二）]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9006%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h2 id="变量和内存的关系"><a href="#变量和内存的关系" class="headerlink" title="变量和内存的关系"></a>变量和内存的关系</h2><h3 id="变量示例"><a href="#变量示例" class="headerlink" title="变量示例"></a>变量示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">'A'</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在64bit编译器环境下，系统为变量a、b分别分配1个字节、4个字节的存储单元。也就是说：</p>
<ul>
<li>变量b中的10是用4个字节来存储的，4个字节共32位，因此变量b在内存中的存储形式应该是0000 0000 0000 0000 0000 0000 0000 1010。</li>
<li>变量a中的’A’是用1个字节来存储的，1个字节共8位，变量a在内存中的存储形式是0100 0001，至于为什么’A’的二进制是这样呢，后面再讨论。</li>
</ul>
<p>上述变量a、b在内存中的存储情况大致如下表所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225259808-1160410400.png" alt=""></p>
<blockquote>
<p><strong>提示</strong>：”存储的内容”那一列的一个小格子就代表一个字节，”地址”那一列是指每个字节的地址。</p>
</blockquote>
<ul>
<li>从图中可以看出，变量b占用了内存地址从ffc1~ffc4的4个字节，变量a占用了内存地址为ffc5的1个字节。每个字节都有自己的地址，其实变量也有地址。变量存储单元的第一个字节的地址就是该变量的地址。变量a的地址是ffc5，变量b的地址是ffc1。</li>
<li>内存寻址是从大到小的，也就是说做什么事都会先从内存地址较大的字节开始，因此系统会优先分配地址值较大的字节给变量。由于是先定义变量a、后定义变量b，因此你会看到变量a的地址ffc5比变量b的地址ffc1大。</li>
<li>注意看表格中变量b存储的内容，变量b的二进制形式是：0000 0000 0000 0000 0000 0000 0000 1010。由于内存寻址是从大到小的，所以是从内存地址最大的字节开始存储数据，存放顺序是ffc4 -&gt; ffc3 -&gt; ffc2 -&gt; ffc1，所以把前面的0000 0000都放在ffc2~ffc4中，最后面的八位0000 1010放在ffc1中。</li>
</ul>
<h3 id="查看变量的内存地址"><a href="#查看变量的内存地址" class="headerlink" title="查看变量的内存地址"></a>查看变量的内存地址</h3><p>在调试过程中，我们经常会采取打印的方式查看变量的地址：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"变量a的地址是：%p"</span>, &amp;a);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第6行中的&amp;是一个地址运算符，&amp;a表示取得变量a的地址。格式符%p是专门用来输出地址的。输出结果是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量a的地址是：<span class="number">0x7fff5fbff8f8</span></span><br></pre></td></tr></table></figure>
<p>这个0x7fff5fbff8f8就是变量a的内存地址。</p>
<h2 id="变量的使用注意"><a href="#变量的使用注意" class="headerlink" title="变量的使用注意"></a>变量的使用注意</h2><h3 id="不能重复定义同一个变量"><a href="#不能重复定义同一个变量" class="headerlink" title="不能重复定义同一个变量"></a>不能重复定义同一个变量</h3><p>下面的代码是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">89</span>;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译器会报第5行的错，错误的原因很简单，第3行和第5行都是定义变量i，因此在内存中会是这样：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225305090-942626929.png" alt=""></p>
<p>内存中会出现两块存储空间，而且名字都叫i，那如果我想取出变量i的值，那你说计算机取10好还是取89好呢？因此，这种做法肯定是不可以的。</p>
<h3 id="可以将一个变量的值赋值给另外一个变量"><a href="#可以将一个变量的值赋值给另外一个变量" class="headerlink" title="可以将一个变量的值赋值给另外一个变量"></a>可以将一个变量的值赋值给另外一个变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = i;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了变量i且初始值为10；接着在第5行定义了变量a，并且将变量i的值赋值给了a。在内存中大致如下图所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225310043-2108240599.png" alt=""></p>
<p>变量i和变量a存储的值都是10。</p>
<h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>变量的作用范围（作用域）是从定义变量的那一行代码开始，下面的代码是错误的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b = i;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译器会报第3行的错误，错误原因是：标识符i找不到。我们是在第5行定义了变量i，因此变量i从第5行开始才有效，在前面的第3行是无效的。</p>
<h3 id="没有经过初始化的变量是可以使用的"><a href="#没有经过初始化的变量是可以使用的" class="headerlink" title="没有经过初始化的变量是可以使用的"></a>没有经过初始化的变量是可以使用的</h3><p>在C语言中，你声明一个局部变量后，没有经过初始化赋值是可以使用的，但这是很危险的，不建议这样做。大多数人应该觉得变量b打印出来应该是0，其实不是。因为系统会随意给变量b赋值，得到的是垃圾数据。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b;           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, b);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码的打印结果是：1606422622。因此，局部变量还是必须先进行初始化赋值，然后再使用，这样才是最安全的做法。</p>
<p>如果是全局的int类型变量，系统会默认赋值为0：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607225318965-1449503471.png" alt=""></p>
<h3 id="char使用注意事项"><a href="#char使用注意事项" class="headerlink" title="char使用注意事项"></a>char使用注意事项</h3><ol>
<li>char的取值范围是：ASCII码字符 或者 -128~127的整数，所以使用char存储大写字母A有2种赋值方式：</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="number">65</span>;</span><br></pre></td></tr></table></figure>
<p>上面两种方式是等效的，因为大写字母A的ASCII码值刚好为65。</p>
<ol>
<li>char只能存储一个字符</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【05】变量（一）]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9005%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>常量表示的数据是不可以改的，而用变量表示的数据是可以经常修改的。</p>
<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>跟其他语言一样，C语言中用变量来存储计算过程使用的值，任何变量都必须先定义类型再使用。为什么一定要先定义呢？因为变量的类型决定了变量占用的存储空间，所以定义变量类型，就是为了给该变量分配适当的存储空间，以便存放数据。比如你是char类型，我就只给你分配1个字节就够了，没必要分配2个字节、3个字节乃至更多的存储空间。</p>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>我们在定义变量的时候，需要指明变量类型，系统会根据变量类型来分配相应的存储空间。不同数据类型所占用的存储空间是不一样的，如果是字符型（char）变量，就分配1个字节的存储空间；如果是整型（int）变量，就分配4个字节的存储空间。</p>
<p>变量类型的还一个作用是用来约束变量所存放数据的类型。一旦给变量指明了类型，那么这个变量就只能存储这种类型的数据，比如整型（int）变量只能存储整型数据，不能存储浮点型数据。</p>
<h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>在程序运行过程，肯定会定义大量的变量，每个变量都有自己的存储空间。那怎么区分这些变量呢？怎么找到变量对应的存储空间呢？为了区分这些变量，定义变量的时候应该为每个变量指定一个变量名，变量名也是标识符的一种。当我们要修改变量的数据时，系统会根据变量名找到变量对应的存储空间，将存储空间里面的数据改掉。</p>
<p>变量的命名规则：</p>
<ol>
<li>只能由数字、字母、下划线组成，并且不能以数字开头。</li>
<li>不可以与系统保留字同名。</li>
<li>不能使用重复的变量名。</li>
<li>见名知意（规范）。</li>
</ol>
<h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><h3 id="根据变量的作用域"><a href="#根据变量的作用域" class="headerlink" title="根据变量的作用域"></a>根据变量的作用域</h3><p>C语言根据变量作用域的不同，将变量分为<code>局部变量</code>、<code>全局变量</code>。</p>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ol>
<li>定义：在函数内部定义的变量，称为局部变量。形式参数也属于局部变量。</li>
<li>作用域：局部变量只在定义它的函数内部有效，即局部变量只有在定义它的函数内部使用，其它函数不能使用它。</li>
</ol>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ol>
<li>定义：在所有函数外部定义的变量，称为全局变量。</li>
<li>作用域：全局变量的作用范围是从定义变量的位置开始到源程序结束，即全局变量可以被在其定义位置之后的其它函数所共享。</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第1行的变量a是全局变量，第5行的变量b是局部变量。</p>
<h3 id="根据变量的存储地点"><a href="#根据变量的存储地点" class="headerlink" title="根据变量的存储地点"></a>根据变量的存储地点</h3><p>有3个地方可以用于存储变量：普通内存、运行时堆栈、硬件寄存器。变量的存储地点决定了变量何时创建、何时销毁以及它的值能保持多久，也就是决定了变量的生命周期。</p>
<p>C语言根据变量存储地点的不同，可以把变量分为：<code>自动变量</code>、<code>静态变量</code>、<code>寄存器变量</code>。</p>
<h4 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h4><ol>
<li>定义：自动变量是存储在堆栈中的。</li>
<li>哪些是自动变量：被关键字<code>auto</code>修饰的局部变量都是自动变量，但是极少使用这个关键字，基本上是废的，因为所有的局部变量在默认情况下都是自动变量。</li>
<li>生命周期：在程序执行到声明自动变量的代码块（函数）时，自动变量才被创建，当自动变量所在的代码块（函数）执行完毕后，这些自动变量就会自行销毁。如果一个函数被重复调用，这些自动变量每次都会重新创建。</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> c = a + b;</span><br><span class="line">      <span class="keyword">auto</span> <span class="keyword">int</span> d;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>第1行的变量a、b，第2行的变量c、第4行的变量d都是自动变量。</p>
<h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><ol>
<li>定义：静态变量是存储在静态内存中的，也就是不属于堆栈。</li>
<li>哪些是静态变量：<ul>
<li>所有的全局变量都是静态变量。</li>
<li>被关键字<code>static</code>修饰的局部变量也是静态变量。</li>
</ul>
</li>
<li>生命周期：静态变量在程序<code>运行之前</code>创建并且只会创建一次，在程序的整个运行期间始终存在，直到程序结束。</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    b++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b=%d, c=%d \n"</span>, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 连续调用3次test函数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第3行的变量a、第6行的变量b都是静态变量，第9行的变量c、第16行的变量i是自动变量。</p>
<p>因为第6行的变量b是静态变量，所以它只会被创建一次，而且生命周期会延续到程序结束。因为它只会创建一次，所以第6行代码只会执行一次，下次再调用test函数时，变量b的值不会被重新初始化为0。</p>
<blockquote>
<p><strong>注意</strong>：虽然第6行的变量b是静态变量，但是只改变了它生命周期，并没有改变它的作用域，变量b还是只能在test函数内部使用。</p>
</blockquote>
<p>我们在main函数中重复调用test函数3次，输出结果为：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607155214183-305983019.png" alt=""></p>
<h4 id="寄存器变量"><a href="#寄存器变量" class="headerlink" title="寄存器变量"></a>寄存器变量</h4><ol>
<li>定义：存储在硬件寄存器中的变量，称为寄存器变量。寄存器变量比存储在内存中的变量访问效率更高（默认情况下，自动变量和静态变量都是放在内存中的）。</li>
<li>哪些变量是寄存器变量：被关键字<code>register</code>修饰的自动变量都是寄存器变量。<ul>
<li>只有局部变量才可以是寄存器变量。</li>
<li>寄存器变量只限于int、char和指针类型变量使用。</li>
</ul>
</li>
<li>生命周期：因为寄存器变量本身就是局部变量，所以函数中的寄存器变量在调用该函数时占用寄存器中存放的值，当函数结束时释放寄存器，变量消失。</li>
<li>使用注意：<ul>
<li>由于计算机中寄存器数目有限，不能使用太多的寄存器变量。如果寄存器使用饱和时，程序将寄存器变量自动转换为自动变量处理。</li>
<li>为了提高运算速度，一般会将一些频繁使用的局部变量定义为寄存器变量，这样程序尽可能地为它分配寄存器存放，而不用内存。</li>
</ul>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">register</span> <span class="keyword">int</span> a;</span><br><span class="line">     return <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>第2行的变量 a 是个寄存器变量。</p>
<h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>总结可得，定义变量需要2个条件：变量类型、变量名。定义变量的格式为：变量类型  变量名；</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了一个名字为i的整型变量，说明i只能存储整型数据；在第5行定义了一个名字为c的字符型变量，说明c只能存储字符型数据。第3、5、7行的代码都称为“语句”，每条语句后面都有个分号“;”。</p>
<p>于是，系统就会在内存中分别为变量i、c分配一定的存储空间，如下图所示，i和c各占用一块存储空间。</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607173556355-1508318186.png" alt=""></p>
<p>如果是同一种类型的变量，可以连续定义，变量名之间用逗号,隔开。格式为：变量类型  变量名1, 变量名2, 变量名3, … ;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, c;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第3行代码的意思是定义了2个int类型的变量，变量名分别为a、c。</p>
<h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><h3 id="先定义，再初始化"><a href="#先定义，再初始化" class="headerlink" title="先定义，再初始化"></a>先定义，再初始化</h3><p>前面已经定义了两个变量，但是这两个变量并没有存储任何值，我们需要给变量进行第一次赋值，也叫做“初始化”。</p>
<p>变量赋值的格式是：变量名 = 值;</p>
<p>这个等号”=”是一个赋值运算符，将右边的值赋值给左边的变量，也就是将右边的值存储到左边变量的存储空间中。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    c = <span class="string">'A'</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第4行给变量i赋值一个整型常量10，在第7行给变量c赋值一个字符型常量’A’。像第4、7行这样的赋值操作，称为“赋值运算”。</p>
<p>内存中大致如下图所示，整数10存储在i的存储空间中，字母A存储在c的存储空间中。（其实我这个图并不是很准确，因为内存中的所有数据都是以0和1的形式存储的，比如10，它会存储成1010；字母 A ，它会存储成1000001。这里为了达到直观的效果，就没有写成二进制形式）</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607173911043-638078260.png" alt=""></p>
<h3 id="定义的同时初始化"><a href="#定义的同时初始化" class="headerlink" title="定义的同时初始化"></a>定义的同时初始化</h3><p>上面的代码也可以写成下面这样，在定义变量的同时进行初始化：变量类型  变量名 = 值;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">10.9f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">9.8</span>;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607174035683-177628936.png" alt=""></p>
<h3 id="可以不断修改"><a href="#可以不断修改" class="headerlink" title="可以不断修改"></a>可以不断修改</h3><p>既然i是个变量，说明它的值可以不断地改变，看下面的代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">89</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第3行定义了变量i，并且初始值为10。紧接着在第5行把i的值改为89，这个89会覆盖以前存储的10。</p>
<h3 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h3><p>刚才提到，默认情况下，变量的值是可以不断改变的。不过，有时候我们会希望变量的值只在定义的时候初始化一次，以后都不能再改变，这个时候我们就可以使用<code>const</code>关键字来修饰变量。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">11</span>;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第3行，在<code>int</code>的前面加了个<code>const</code>关键字。表示变量i的值只会初始化一次，也就是说i的值永远都是一开始的10，以后都不能再改了。所以编译器会报第5行代码的错误，不允许再次修改i的值。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【04】常量]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9004%E3%80%91%E5%B8%B8%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h2 id="什么是常量"><a href="#什么是常量" class="headerlink" title="什么是常量"></a>什么是常量</h2><p><code>&quot;量&quot;表示数据</code>。常量，则表示一些固定的数据，也就是不能改变的数据。</p>
<h2 id="常量的类型"><a href="#常量的类型" class="headerlink" title="常量的类型"></a>常量的类型</h2><h3 id="整型常量（int）"><a href="#整型常量（int）" class="headerlink" title="整型常量（int）"></a>整型常量（int）</h3><p>其实就是<code>int</code>类型的数据，包括了所有的整数，比如6、27、109、256、-10、0、-289等。</p>
<h3 id="浮点型常量（float-double）"><a href="#浮点型常量（float-double）" class="headerlink" title="浮点型常量（float\double）"></a>浮点型常量（float\double）</h3><p>浮点型常量分为<code>double</code>和<code>float</code>两种数据类型：</p>
<ol>
<li><code>double</code>：双精度浮点型，其实就是小数。比如5.43、-2.3、0.0等，注意，0.0也算是个小数。</li>
<li><code>float</code>：单精度浮点型，也是小数，比<code>double</code>的精确程度低，也就是说所能表示的小数位数比较少。为了跟<code>double</code>区分开来， <code>float</code> 型数据都是以<code>f</code>结尾的，比如5.43f、-2.3f、0.0f。需要注意的是，绝对不能有10f这样格式的，编译器会直接报错，只有小数才允许加上f。</li>
</ol>
<h3 id="字符常量（char）"><a href="#字符常量（char）" class="headerlink" title="字符常量（char）"></a>字符常量（char）</h3><p>将一个数字（0~9）、英文字母（a~z、A~Z）或者其他符号（+、-、!、?等）用单引号括起来，这样构成的就是字符常量。比如’6’、’a’、’F’、’+’、’$’等。</p>
<blockquote>
<p><strong>注意</strong>：单引号只能括住1个字符，而且不能是中文字符，下面的写法是错误的：’abc’、’123456’、’男’。</p>
</blockquote>
<h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>将一个或者多个字符用双引号（””）括起来，这样构成的就是字符串常量。比如”6”、”男”、”哇哈哈”、”abcd”、”my_car4”，其实printf(“Hello World”);语句中的”Hello World”就是字符串常量。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【03】数据]]></title>
      <url>http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9003%E3%80%91%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们使用计算机的过程中，会接触到各种各样的数据，有文档数据、图片数据、视频数据，还有聊QQ时产生的文字数据、用迅雷下载的文件数据等。这讲我们就来介绍C语言中数据的处理。</p>
<h2 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h2><h3 id="数据形态"><a href="#数据形态" class="headerlink" title="数据形态"></a>数据形态</h3><p>首先来看看计算机是怎么存储数据的。总的来说，计算机中存储的数据可以分为两种：静态数据和动态数据。</p>
<h4 id="静态数据"><a href="#静态数据" class="headerlink" title="静态数据"></a>静态数据</h4><ol>
<li>概念：静态数据是指一些永久性的数据，一般存储在硬盘中。硬盘的存储空间一般都比较大，现在普通计算机的硬盘都有500G左右，因此硬盘中可以存放一些比较大的文件。</li>
<li>存储的时长：计算机关闭之后再开启，这些数据依旧还在，只要你不主动删掉或者硬盘没坏，这些数据永远都在。</li>
<li>哪些是静态数据：静态数据一般是以文件的形式存储在硬盘上，比如文档、照片、视频等。</li>
</ol>
<h4 id="动态数据"><a href="#动态数据" class="headerlink" title="动态数据"></a>动态数据</h4><ol>
<li>概念：动态数据指在程序运行过程中，动态产生的临时数据，一般存储在内存中。内存的存储空间一般都比较小，现在普通计算机的内存只有4G左右，因此要谨慎使用内存，不要占用太多的内存空间。</li>
<li>存储的时长：计算机关闭之后，这些临时数据就会被清除。</li>
<li>哪些是动态数据：当运行某个程序（软件）时，整个程序就会被加载到内存中，在程序运行过程中，会产生各种各样的临时数据，这些临时数据都是存储在内存中的。当程序停止运行或者计算机被强制关闭时，这个程序产生的所有临时数据都会被清除。</li>
</ol>
<p>你可能会问，既然硬盘的存储空间这么大，为何不把所有的应用程序加载到硬盘中去执行呢？有个主要原因是内存的访问速度比硬盘快N倍。</p>
<h4 id="动态数据和静态数据的转换"><a href="#动态数据和静态数据的转换" class="headerlink" title="动态数据和静态数据的转换"></a>动态数据和静态数据的转换</h4><p>硬盘和内存是计算机使用最频繁的两个硬件，它们之间的数据经常要进行转换。</p>
<p>比如，硬盘上有个叫做“C语言.mp4”的视频文件，现在要使用暴风影音来播放：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143556418-1431912984.png" alt=""></p>
<p>首先打开暴风影音软件，计算机会将暴风影音加载到内存中，紧接着计算机会读取硬盘中视频文件的内容到内存中。暴风影音会解析读取到的文件内容，以视频的形式呈现给用户看。这就完成了一个由静态数据到动态数据的转换。</p>
<p>再比如，你使用迅雷从网上下载一个叫做“C语言.mp4”的视频文件：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143719574-1356202246.png" alt=""></p>
<p>首先打开迅雷软件，计算机会将迅雷加载到内存中，紧接着迅雷就会从互联网下载视频文件。大家都知道，这个下载过程肯定是要耗点时间的，主要受文件大小和下载速度的影响。每个时间段内下载获取的数据都是先放到内存中，然后再写入到硬盘中。所有数据下载完毕后，硬盘中就会有一个完整的视频文件。这就完成了动态数据到静态数据的转换。</p>
<h3 id="存储形式"><a href="#存储形式" class="headerlink" title="存储形式"></a>存储形式</h3><h4 id="二进制存储"><a href="#二进制存储" class="headerlink" title="二进制存储"></a>二进制存储</h4><p>计算机只能识别0和1。因此，前面所说的静态数据和动态数据，都是以0和1的形式存储的，这种存储方式称为“二进制存储”。有人可能觉得很诧异，只是0和1怎么可能表示这多的数据呢？没错，如果只是一位数字的话，只能表示2种数据：要么是0，要么是1。但是如果有多位数字的话，那情况就不一样了。如果有2位数字，那么就能表示4种数据：00、01、10、11；如果有3位数字呢，就能表示8种数据；以此类推，如果有n位数字，就能表示2的n次方种数据。可以发现，只要位数足够，0和1所能表示的数据是非常庞大的。</p>
<h4 id="比特位和字节"><a href="#比特位和字节" class="headerlink" title="比特位和字节"></a>比特位和字节</h4><p>平时我们在计算机上看到的MP4、MP3、照片等文件，都是由0和1组合成的，只不过计算机解析了这些0和1，以图形界面的形式呈现在我们眼前。文件越大，所包含的0和1就越多，为了方便计算文件大小，对计量单位做了个规定：1个二进制位为1bit，也就是1个0或1就为1bit，bit的中文翻译是“比特位”；8个二进制位为1byte，也就是8个0或1就为1byte，1byte=8bit，byte的中文翻译是“字节”。平时我们所说的某个文件大小为64B，就是64字节的意思，内部包含了64x8个0和1。</p>
<p>数据换算：1 KB = 1024 B，1 MB = 1024 KB，1 GB = 1024 MB，1 TB = 1024 GB。</p>
<h2 id="数据的类型"><a href="#数据的类型" class="headerlink" title="数据的类型"></a>数据的类型</h2><p>C语言有丰富的数据类型，因此它很适合用来编写数据库，如DB2、Oracle都是C语言写的。</p>
<p>作为程序员，最关心的肯定是内存中的动态数据，因为我们写的程序就是运行在内存中的。程序在运行过程中，会产生各种各样的动态临时数据，为了方便数据的运算和操作，C语言对这些数据进行了分类，提供了丰富的数据类型。大致如下图所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143724168-1786196972.jpg" alt=""></p>
<p>在图中众多数据类型中，最常用的是4种基本数据类型：char、int、float、double，而最重要的是指针类型，指针使用得当的话，不仅可以节省代码量，还可以优化内存管理、提高性能。因此，指针是一个非常重要的概念，必须重视。如果你说C语言中除了指针，其他都学得挺好的，那你干脆说你没学过C语言。</p>
<p>这些丰富的数据在C语言中可以用常量或者变量来表示（后面会介绍常量和变量的使用）。</p>
<h2 id="数据的访问"><a href="#数据的访问" class="headerlink" title="数据的访问"></a>数据的访问</h2><p>数据访问一般分为直接访问和间接访问：</p>
<ol>
<li>直接访问：直接访问内存单元中的内容。例如: a = 20; b = 2 * a等。</li>
<li>间接访问：通过内存单元编号以及数据所占字节数访问内存中数据。</li>
</ol>
<blockquote>
<p><strong>注意</strong>：指针是间接访问的常用方式。</p>
</blockquote>
<h2 id="不同编译器环境下基本数据类型的存储长度"><a href="#不同编译器环境下基本数据类型的存储长度" class="headerlink" title="不同编译器环境下基本数据类型的存储长度"></a>不同编译器环境下基本数据类型的存储长度</h2><p>红色的代表常用的数据类型：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143728402-1476722878.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【02】C语言语法]]></title>
      <url>http://sanfordy.com/2016/05/30/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9002%E3%80%91C%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C语言属于一门高级语言，其实所有的高级语言的基本语法组成部分都是一样的，只是表现形式不太一样。就好像亚洲人和非洲人，大家都有人类的结构：2只手、2只脚、1个头，只是他们外表不太一样，比如肤色、脸型。因此，你掌握好了一门高级语言，再去学习其他高级语言，那是相当快的。而且，很多其他高级语言，比如后面要学习的Objective-C，都是基于C语言、从C语言衍生出来的，好好学习C语言吧，绝对不吃亏。</p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="什么是关键字"><a href="#什么是关键字" class="headerlink" title="什么是关键字"></a>什么是关键字</h3><p>关键字就是C语言提供的有特殊含义的符号，有些地方也叫做“保留字”。</p>
<h3 id="都有哪些关键字"><a href="#都有哪些关键字" class="headerlink" title="都有哪些关键字"></a>都有哪些关键字</h3><p>C语言一共提供了32个关键字，这些关键字都被C语言赋予了特殊含义。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">double</span> <span class="keyword">int</span> <span class="keyword">struct</span> <span class="keyword">break</span> <span class="keyword">else</span> <span class="keyword">long</span> <span class="keyword">switch</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">enum</span> <span class="keyword">register</span> <span class="keyword">typedef</span> <span class="keyword">char</span> <span class="keyword">extern</span> return <span class="keyword">union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> <span class="keyword">short</span> <span class="keyword">unsigned</span> <span class="keyword">continue</span> <span class="keyword">for</span> <span class="keyword">signed</span> <span class="keyword">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span> <span class="keyword">goto</span> <span class="keyword">sizeof</span> <span class="keyword">volatile</span> <span class="keyword">do</span> <span class="keyword">if</span> <span class="keyword">while</span> <span class="keyword">static</span></span><br></pre></td></tr></table></figure>
<p>大致浏览一遍即可，不用去百度每个关键字的作用，这些关键字以后会经常用到的，到时候你想不记住都难。</p>
<h3 id="如何辨别关键字"><a href="#如何辨别关键字" class="headerlink" title="如何辨别关键字"></a>如何辨别关键字</h3><p>这些关键字会经常跟其他符号混在一起使用，一个程序里面这么多英文符号，我怎么知道那些是关键字呢？关键字有2大特征：</p>
<ol>
<li>全部都是小写。</li>
<li>在开发工具或者智能文本编辑工具（比如UltraEdit）中会显示特殊颜色。</li>
</ol>
<p>比如下面这段C程序在UltraEdit中呈现的样子：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607104437855-2085184487.png" alt=""></p>
<p>在这段代码中，只有int和return是关键字，C语言中的所有关键字在UltraEdit中都会显示蓝色！可以看出，main并不是关键字。至于int和return究竟有什么特殊含义，这里先不做讨论，后面会详细介绍。</p>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="什么是标识符"><a href="#什么是标识符" class="headerlink" title="什么是标识符"></a>什么是标识符</h3><p>在程序中使用的变量名、函数名、标号等统称为标识符。除库函数的函数名由系统定义外，其余都由用户自定义。C规定，标识符只能是字母(A～Z，a～z)、数字(0～9)、下划线(_)组成的字符串，并且其第一个字符不能是数字。</p>
<h3 id="在使用标识符时还必须注意以下几点"><a href="#在使用标识符时还必须注意以下几点" class="headerlink" title="在使用标识符时还必须注意以下几点"></a>在使用标识符时还必须注意以下几点</h3><ol>
<li>标准C不限制标识符的长度，但它受各种版本的C语言编译系统限制，同时也受到具体机器的限制。例如在某版本C中规定标识符前八位有效，当两个标识符前八位相同时，则被认为是同一个标识符。</li>
<li>在标识符中，大小写是有区别的。例如BOOK和book是两个不同的标识符。</li>
<li>标识符虽然可由程序员随意定义，但标识符是用于标识某个量的符号。因此，命名应尽量有相应的意义，以便阅读理解，作到“顾名思义”。如果标识符中含有多个单词，可以使用驼峰标识（除开第一个单词，后面每个单词的首字母都是大写）：firstName、myFirstName，或者使用下划线_来连接：first_name、my_first_name。</li>
</ol>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式是由常量、变量与运算符组成的。例如：3+5，a += b!</p>
<blockquote>
<p><strong>注意</strong>：表达式都会返回值。</p>
</blockquote>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>语句是程序执⾏的最小单位，以分号结尾。 </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【01】第一个C程序代码分析]]></title>
      <url>http://sanfordy.com/2016/05/17/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9001%E3%80%91%E7%AC%AC%E4%B8%80%E4%B8%AAC%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h2 id="Xcode创建C程序步骤"><a href="#Xcode创建C程序步骤" class="headerlink" title="Xcode创建C程序步骤"></a>Xcode创建C程序步骤</h2><h3 id="打开Xcode"><a href="#打开Xcode" class="headerlink" title="打开Xcode"></a>打开Xcode</h3><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114753808-1887444754.png" alt=""></p>
<h3 id="选择命令行程序"><a href="#选择命令行程序" class="headerlink" title="选择命令行程序"></a>选择命令行程序</h3><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114803121-1487331799.png" alt=""></p>
<h3 id="填写项目名称并选择使用C语言"><a href="#填写项目名称并选择使用C语言" class="headerlink" title="填写项目名称并选择使用C语言"></a>填写项目名称并选择使用C语言</h3><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114813058-523307311.png" alt=""></p>
<h3 id="选择保存目录"><a href="#选择保存目录" class="headerlink" title="选择保存目录"></a>选择保存目录</h3><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114825027-90093732.png" alt=""></p>
<h3 id="自动生成如下代码"><a href="#自动生成如下代码" class="headerlink" title="自动生成如下代码"></a>自动生成如下代码</h3><p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114837011-470505554.png" alt=""></p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>打开项目中的main.c文件（C程序的源文件拓展名为<code>.c</code>），可以发现它是C程序中的唯一一个源文件，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来分析一下每行代码的意义。</p>
<h3 id="include"><a href="#include" class="headerlink" title="#include"></a>#include</h3><p><code>#include</code>是C语言的预处理指令之一，所谓预处理，就是在编译之前做的处理，预处理指令一般以<code>#</code>开头。</p>
<p><code>#include</code>指令后面会跟着一个文件名，预处理器发现<code>#include</code>指令后，就会根据文件名去查找文件，并把这个文件的内容包含到当前文件中。被包含文件中的文本将替换源文件中的<code>#include</code>指令，就像你把被包含文件中的全部内容拷贝到这个<code>#include</code>指令所在的位置一样。</p>
<p>如果被包含的文件拓展名为<code>.h</code>，我们称之为”头文件”（Header File），头文件可以用来声明函数（”函数”就是面向对象中的”方法”），要想使用这些函数，就必须先用<code>#include</code>指令包含函数所在的头文件。</p>
<p><code>#include</code>指令不仅仅限于<code>.h</code>头文件，<code>可以包含任何编译器能识别的C/C++代码文件</code>，包括<code>.c</code>、<code>.hpp</code>、.<code>cpp</code>等，甚至<code>.txt</code>、<code>.abc</code>等等都可以，也就是说你完全可以将第3行到第9行的代码放到其他文件中，然后用 <code>#include</code>指令包含进来。比如将第3行到第9行的代码放到 my.txt 中：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114905949-694429859.png" alt=""></p>
<p>在<code>main.c</code>源文件中包含my.txt文件：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114916043-985670090.png" alt=""></p>
<p>程序还是可以照常运行的，因为<code>#include</code>的功能就是将文件内容完全拷贝到<code>#include</code>指令所在的位置。</p>
<blockquote>
<p><strong>注意</strong>：不过你可能会疑惑，为什么<code>stdio.h</code>用尖括号&lt;&gt;，而my.txt用双引号””？这个很好区别，如果是系统自带的文件，最好用&lt;&gt;；如果是开发人员自己创建的文件，最好用””。</p>
<p><strong>说明</strong>：这里用txt文件纯属演示，平时做项目不会这样做，除非吃饱了撑着，才会把代码都写到txt中去。</p>
</blockquote>
<h3 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a>stdio.h</h3><p><code>stdio.h</code>是C语言函数库中的一个头文件，里面定义了一些标准输入输出函数。在main.c的第1行代码中，用<code>#include</code>指令包含了<code>stdio.h</code>文件。</p>
<p>这里之所以包含<code>stdio.h</code>文件，是因为在第7行中用到了在<code>stdio.h</code>内部声明的<code>printf</code>函数，这个函数可以向标准输出设备（比如显示器屏幕）输出数据，屏幕上输出的文字就是第7行代码<code>printf(&quot;Hello, World!\n&quot;)</code>造成的，双引号””内的文本为C语言的字符串。</p>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>前面也已经提到，C中的函数就是面向对象中的”方法”。 C语言是一门面向过程的语言，是以过程为中心的编程思想，就是先分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用函数就可以了。</p>
<p>一个C程序中一定会有一个<code>main</code>函数，也只能有一个<code>main</code>函数。<code>main</code>函数是整个C程序的入口。<code>main.c</code>的第3行代码就定义了一个<code>main</code>函数。</p>
<p><code>main</code>函数的返回值为<code>int</code>类型，接收2个参数，其实可以不写参数， main 函数可以简化成这样：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：这里的main函数没有写返回值类型，并不代表函数没有返回值，而是表示返回值类型为int类型，void才代表函数没有返回值。</p>
</blockquote>
<p>由于C语言的语法限制不严格，我们还可以进一步简化 main 函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：虽然它要求main函数返回int类型的值，但我们可以不返回。</p>
</blockquote>
<h2 id="开发和运行C程序的步骤"><a href="#开发和运行C程序的步骤" class="headerlink" title="开发和运行C程序的步骤"></a>开发和运行C程序的步骤</h2><p>步骤图如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114923027-1543894669.png" alt=""></p>
<h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p>C语言源文件的扩展名为<code>.c</code>，源程序（代码）以<code>ASCII</code>码形式存储于源文件，不能直接被计算机执行，因为计算机只能识别二进制指令，也就是0和1。</p>
<h3 id="编译（生成目标文件）"><a href="#编译（生成目标文件）" class="headerlink" title="编译（生成目标文件）"></a>编译（生成目标文件）</h3><p>把C的源文件（代码）翻译成计算机可以识别的二进制形式的目标文件，这个过程称为编译，由C的编译器完成。</p>
<p>在编译的同时，还对源程序的语法等进行检查。若出现语法错误，则编译失败。如果编译成功则生成目标文件，目标文件名跟源程序文件名一样，扩展名为<code>.obj</code>。比如，mj.c编译后生成目标文件mj.obj。</p>
<p>每个源文件是单独进行编译的，假如一个项目中有多个.c源文件，编译成功会生成多个对应的<code>.obj</code>目标。一般情况下，目标文件之间是有关联的，比如a.obj可能会调用b.obj中定义的一个函数，因此它们都不能够单独被计算机执行，而且<code>目标文件中并不包含程序运行所需要的库函数</code>等。</p>
<blockquote>
<p><strong>提示</strong>：在编译之前会进行预处理（例如<code>#include</code>指令）。</p>
<p><strong>注意</strong>：编译器不会编译<code>.h</code>文件，因为在编译前会进行预处理，预处理会把<code>.h</code>文件的代码拷贝到<code>.c</code>文件中，从而一起编译。</p>
</blockquote>
<h3 id="链接（生成可执行文件）"><a href="#链接（生成可执行文件）" class="headerlink" title="链接（生成可执行文件）"></a>链接（生成可执行文件）</h3><p>将所有有关联的<code>obj</code>目标文件，以及系统提供的C库函数等组合在一起生成一个可执行文件的过程，称为”链接”。链接生成的可执行文件的文件名跟源程序文件同名，扩展名为<code>.exe</code>，计算机可以直接执行。</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>如果是在Windows环境下，直接双击<code>.exe</code>文件即可运行C语言程序。</p>
<p>由于我们的第一个C程序，是在Mac OS X系统环境下用Xcode创建的命令行项目，Mac OS X系统是基于UNIX系统的，因此生成的可执行文件的这样的:</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114929699-1395943059.png" alt=""></p>
<p>双击可以用终端打开：</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114935215-625977268.png" alt=""></p>
<h2 id="多文件开发"><a href="#多文件开发" class="headerlink" title="多文件开发"></a>多文件开发</h2><p>在大型项目开发中程序中所有的代码都写到一个文件中是不现实的，我们通常将一个子操作分为两个文件：<code>.c</code>文件和<code>.h</code>文件。在<code>.c</code>文件中实现对应的函数，在<code>.h</code>中进行函数声明。</p>
<p>&lt; 代码示例 &gt;</p>
<p><em>main</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"message.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    showMessage();</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main.c</span><br></pre></td></tr></table></figure>
<p><em>message.h</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p><em>message.c</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"message.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt; 输出结果 &gt;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br><span class="line">Program ended with <span class="built_in">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>可以发现程序仍然可以正常运行。</p>
<p>但是我们思考一个问题，如果我们不分成两个文件，直接在主函数文件中包含message.c是否也可以正常运行呢？答案是否定的，原因是由于编译生成的两个文件main.obj和message.obj在链接时会发现main.obj中已经有message.obj中定义的showMessage函数，抛出“标示符重复”的错误。</p>
<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114940746-1062903242.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【00】C语言简介]]></title>
      <url>http://sanfordy.com/2016/05/11/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9000%E3%80%91C%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png" alt=""></p>
<a id="more"></a>
<h2 id="计算机常识"><a href="#计算机常识" class="headerlink" title="计算机常识"></a>计算机常识</h2><p>在学习C语言之前，先要了解一些计算机常识</p>
<h3 id="计算机只能识别0和1"><a href="#计算机只能识别0和1" class="headerlink" title="计算机只能识别0和1"></a>计算机只能识别0和1</h3><p>大家都知道，计算机要通电才能工作，说白了，它跟电视、洗衣机一样，都是电器。电器都有个共同的能力：懂得判断通电还是断电，通电就能工作，断电就停止工作。因此，从根本上讲，计算机只能识别电信号：高电平信号（通电）、低电平信号（断电），它只知道某个开关是通电还是断电。我们用1代表高电平，0代表低电平。也就说，<code>计算机只能识别0和1。</code></p>
<h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>因为计算机只能识别0和1，因此计算机所能识别的指令和数据都是用二进制数（0和1）来表示的。所谓二进制，就是用0和1来表示所有的数。不过我们日常生活中最常用的是十进制，用0~9来表示所有的数。</p>
<h4 id="二进制指令"><a href="#二进制指令" class="headerlink" title="二进制指令"></a>二进制指令</h4><p>给计算机灌输一些指令，它就能执行相应的操作，而计算机只能识别由0和1组成的指令。在计算机发展初期，计算机的指令长度为16，即以16个二进制数（0或1）组成一条指令，例如，用1011011000000000这条指令，是让计算机进行一次加法运算。因此，如果要想计算机执行一系列的操作，就必须编写许多条由0和1组成的指令，可以想象的到，这个工作量是如此巨大。</p>
<h4 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h4><p>平时我们在计算机中存储的一些数据，比如文档、照片、视频等，都是以0和1的形式存储的。只不过计算机解析了这一大堆的0和1，以图形界面的形式将数据展示在我们眼前。</p>
<h2 id="程序设计语言的发展史"><a href="#程序设计语言的发展史" class="headerlink" title="程序设计语言的发展史"></a>程序设计语言的发展史</h2><p>我们可以利用程序设计语言来编写程序，再将编好的程序运行到计算机上，计算机就能够按照程序中所说的去做。从计算机诞生至今，程序设计语言大致经历了3个发展阶段：<code>机器语言</code>、<code>汇编语言</code>、<code>高级语言</code>。其中， C语言属于高级语言。</p>
<h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><h4 id="什么是机器语言"><a href="#什么是机器语言" class="headerlink" title="什么是机器语言"></a>什么是机器语言</h4><p>在计算器诞生初期， 所有的计算机程序都是直接用计算机能识别的二进制指令来编写的，也就是说所有的代码里面只有0和1。这种程序设计语言就是“机器语言”。这些由0和1组成的二进制指令，又叫做“机器指令”。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>执行效率高：由于机器语言编写出来的代码是能被计算机直接识别的，因此机器语言是直接对硬件产生作用的，程序的执行效率非常高。</li>
<li>可操作硬件：机器语言能直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。</li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>难记：用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令和指令的涵义，指令又多又难记。</li>
<li>可读性差：编出的程序全是些0和1的指令代码，可读性差，还容易出错。</li>
<li>可移植性差：由于机器语言是直接对硬件产生作用的，对硬件的依赖性很强，因此不同型号计算机的机器语言又不一样。也就是说，如果2台不同型号的机器想实现一样的功能，需要编写2套完全不同的代码。</li>
</ol>
<blockquote>
<p><strong>提示</strong>：机器语言很难掌握和推广，现在除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</p>
</blockquote>
<h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><h4 id="什么是汇编语言"><a href="#什么是汇编语言" class="headerlink" title="什么是汇编语言"></a>什么是汇编语言</h4><p>由于机器语言的种种弊端，严重影响开发效率，后面就出现了汇编语言。汇编语言其实就是符号化的机器语言，它用一个符号（英文单词、数字）来代表一条机器指令。比如，在机器语言中，用1011011000000000这条指令，是让计算机进行一次加法运算；而在汇编语言中，用英文单词 “ADD”就可以表示加法运算。一个有意义的英文单词，很明显比一串又臭又长的二进制指令，直观好记多了。</p>
<p>由于计算机只能识别0和1，用汇编语言编写的代码是不能被计算机所识别的，像刚才的”ADD”，计算机肯定不知道是什么意思。因此，用汇编语言编写的代码需要翻译成二进制指令后，才能被计算机识别。这个翻译的工作交给编译器去做。</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol>
<li>可读性较好：对比机器语言，汇编语言的代码可读性好。</li>
<li>可操作硬件：汇编语言能像机器语言一样，可以直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。使用汇编语言，可以访问所有能够被访问的软、硬件资源。</li>
<li>目标代码简短：目标代码就是经编译器翻译过后的二进制代码，占用内存少，执行速度快。（计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中， CPU就会把需要运算的数据调到内存中进行运算，当运算完成后内存再将结果传送出来，内存的运行也决定了计算机的稳定运行。）计算机的内存是有限的，因此一个应用程序运行时所占用的内存越少越好。</li>
</ol>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>可移植性差：汇编语言是面向机器的，通常是为特定的计算机或系列计算机专门设计的。因此，不同的机器有不同的汇编语言语法和编译器，代码缺乏可移植性，也就是说，一个程序只能在一种机器上运行，换到其他机器上就不能运行。</li>
<li>难记：汇编语言的符号非常多、难记，即使是完成简单的功能也需要大量的汇编语言代码，很容易产生BUG，难于调试。</li>
<li>开发效率低：使用汇编语言必须对硬件非常了解，开发效率很低，周期长且单调。</li>
</ol>
<h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><h4 id="什么是高级语言"><a href="#什么是高级语言" class="headerlink" title="什么是高级语言"></a>什么是高级语言</h4><p>由于汇编语言依赖于硬件，代码可移植性差，符号又多又难记，于是人类就发明了非常接近自然语言的高级语言。后面要学习的C语言就是高级语言。</p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol>
<li>可读性最好：语法和结构类似于普通英文，且远离对硬件的直接操作，使得一般人经过学习之后都可以编程，而不用太熟悉硬件知识。</li>
<li>代码简洁：比如要计算2个数的和，在高级语言中可以写得非常简洁：d=a+b。但是在机器语言和汇编语言中，就需要几条甚至几十条指令，而且不同机器还要编写不同的指令代码。</li>
<li>可移植性好：用高级语言编写的同一个程序还可以在不同的机器上运行，具有可移植性。</li>
</ol>
<blockquote>
<p><strong>注意</strong>：用高级语言编写的程序不能直接被计算机识别，需要经编译器翻译成二进制指令后，才能运行到计算机上。</p>
</blockquote>
<h2 id="C语言简史"><a href="#C语言简史" class="headerlink" title="C语言简史"></a>C语言简史</h2><p>C语言于1972年发明，首次使用是用于重写<code>UNIX</code>操作系统（<code>UNIX</code>以前是用汇编写的）。随着<code>UNIX</code>操作系统的成功，C语言也得到了大幅度地推广，至今还是世界上最流行、使用最广泛的高级程序设计语言之一。</p>
<blockquote>
<p><strong>注意</strong>：C语言是一门面向过程的语言，非面向对象的语言。</p>
</blockquote>
<h2 id="C语言的优点"><a href="#C语言的优点" class="headerlink" title="C语言的优点"></a>C语言的优点</h2><h3 id="丰富的运算符"><a href="#丰富的运算符" class="headerlink" title="丰富的运算符"></a>丰富的运算符</h3><p>计算机的基本功能就是计算，因此一门程序设计语言的计算能力是非常重要的。C语言提供了34种运算符，计算类型及其丰富，其中包括了最基本的加减乘除运算。</p>
<h3 id="丰富的数据类型"><a href="#丰富的数据类型" class="headerlink" title="丰富的数据类型"></a>丰富的数据类型</h3><p>C语言之所以生命力如何强大，很大一部分是因为它拥有丰富的数据类型。C语言的数据类型有：整型（int）、实型（float）、字符型（char）、数组类型（int []）、指针类型（void *）、结构体类型（struct）、共用体类型（union）等。众多数据类型中，最强大的是指针，通过指针我们可以直接访问内存地址。指针使用得当的话，不仅可以节省代码量，还可以优化内存管理、提高性能。因此，指针是一个非常重要的概念，必须重视。如果你说 C语言中除了指针，其他都学得挺好的，那你干脆说你没学过C语言。正因为C语言数据类型丰富，运算能力极强，因此很多数据库都是用C语言编写的，比如<code>DB2</code>、<code>Oracle</code>等。</p>
<h3 id="允许直接访问物理地址，对硬件进行操作"><a href="#允许直接访问物理地址，对硬件进行操作" class="headerlink" title="允许直接访问物理地址，对硬件进行操作"></a>允许直接访问物理地址，对硬件进行操作</h3><p>由于C语言允许直接访问物理地址，可以直接对硬件进行操作，因此它既具有高级语言的功能，又具有低级语言的许多功能，能够像汇编语言一样对位（bit）、字节和地址进行操作，而这三者是计算机最基本的工作单元。</p>
<h3 id="高效率的目标代码"><a href="#高效率的目标代码" class="headerlink" title="高效率的目标代码"></a>高效率的目标代码</h3><p>对比汇编语言，C语言可读性好，易于调试、修改和移植，代码质量与汇编语言相当。</p>
<h3 id="可移植性好"><a href="#可移植性好" class="headerlink" title="可移植性好"></a>可移植性好</h3><p>在一个环境上用C语言编写的程序，不改动或稍加改动，就可移植到另一个完全不同的环境中运行。</p>
<h2 id="C语言的缺点"><a href="#C语言的缺点" class="headerlink" title="C语言的缺点"></a>C语言的缺点</h2><h3 id="封装性差、安全性低"><a href="#封装性差、安全性低" class="headerlink" title="封装性差、安全性低"></a>封装性差、安全性低</h3><p>由于C语言是面向过程的，因此它的数据封装性差、安全性低，这就是C语言和其他面向对象语言的区别之一。面向对象语言的特性之一就是数据的封装性。</p>
<h3 id="语法限制不严格"><a href="#语法限制不严格" class="headerlink" title="语法限制不严格"></a>语法限制不严格</h3><p>对变量的类型约束不严格，对数组下标越界不作检查等。</p>
<h2 id="C语言能做什么"><a href="#C语言能做什么" class="headerlink" title="C语言能做什么"></a>C语言能做什么</h2><h3 id="开发计算机软件"><a href="#开发计算机软件" class="headerlink" title="开发计算机软件"></a>开发计算机软件</h3><p>由于C语言具有强大的数据处理能力，而且允许直接访问物理地址，直接对硬件操作，因此它适于编写系统软件、图形处理、单片机程序、嵌入式系统开发甚至是用于科研。</p>
<h3 id="开发Android"><a href="#开发Android" class="headerlink" title="开发Android"></a>开发Android</h3><p>很多操作系统的底层都是用C语言写的，比如 android 。</p>
<h3 id="开发iOS"><a href="#开发iOS" class="headerlink" title="开发iOS"></a>开发iOS</h3><p>iOS开发中的核心语言是Objective-C（简称OC），OC是在C语言的基础上加了一层面向对象语法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="external">M了个J的博客</a></p>
<hr>
]]></content>
    </entry>
    
  
  
</search>
