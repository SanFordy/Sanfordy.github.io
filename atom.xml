<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanfordy`s home</title>
  <subtitle>Your achievement depends on how many people you can face to talk</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sanfordy.com/"/>
  <updated>2016-06-07T14:37:50.000Z</updated>
  <id>http://sanfordy.com/</id>
  
  <author>
    <name>Sanfordy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【05】变量（一）</title>
    <link href="http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9005%E3%80%91%E5%8F%98%E9%87%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://sanfordy.com/2016/06/07/1-0 .C语法/【05】变量（一）/</id>
    <published>2016-06-07T07:31:04.000Z</published>
    <updated>2016-06-07T14:37:50.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是变量&quot;&gt;&lt;a href=&quot;#什么是变量&quot; class=&quot;headerlink&quot; title=&quot;什么是变量&quot;&gt;&lt;/a&gt;什么是变量&lt;/h2&gt;&lt;p&gt;常量表示的数据是不可以改的，而用变量表示的数据是可以经常修改的。&lt;/p&gt;
&lt;h2 id=&quot;变量的定义&quot;&gt;&lt;a href=&quot;#变量的定义&quot; class=&quot;headerlink&quot; title=&quot;变量的定义&quot;&gt;&lt;/a&gt;变量的定义&lt;/h2&gt;&lt;p&gt;跟其他语言一样，C语言中用变量来存储计算过程使用的值，任何变量都必须先定义类型再使用。为什么一定要先定义呢？因为变量的类型决定了变量占用的存储空间，所以定义变量类型，就是为了给该变量分配适当的存储空间，以便存放数据。比如你是char类型，我就只给你分配1个字节就够了，没必要分配2个字节、3个字节乃至更多的存储空间。&lt;/p&gt;
&lt;h2 id=&quot;变量类型&quot;&gt;&lt;a href=&quot;#变量类型&quot; class=&quot;headerlink&quot; title=&quot;变量类型&quot;&gt;&lt;/a&gt;变量类型&lt;/h2&gt;&lt;p&gt;我们在定义变量的时候，需要指明变量类型，系统会根据变量类型来分配相应的存储空间。不同数据类型所占用的存储空间是不一样的，如果是字符型（char）变量，就分配1个字节的存储空间；如果是整型（int）变量，就分配4个字节的存储空间。&lt;/p&gt;
&lt;p&gt;变量类型的还一个作用是用来约束变量所存放数据的类型。一旦给变量指明了类型，那么这个变量就只能存储这种类型的数据，比如整型（int）变量只能存储整型数据，不能存储浮点型数据。&lt;/p&gt;
&lt;h2 id=&quot;变量名&quot;&gt;&lt;a href=&quot;#变量名&quot; class=&quot;headerlink&quot; title=&quot;变量名&quot;&gt;&lt;/a&gt;变量名&lt;/h2&gt;&lt;p&gt;在程序运行过程，肯定会定义大量的变量，每个变量都有自己的存储空间。那怎么区分这些变量呢？怎么找到变量对应的存储空间呢？为了区分这些变量，定义变量的时候应该为每个变量指定一个变量名，变量名也是标识符的一种。当我们要修改变量的数据时，系统会根据变量名找到变量对应的存储空间，将存储空间里面的数据改掉。&lt;/p&gt;
&lt;p&gt;变量的命名规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能由数字、字母、下划线组成，并且不能以数字开头。&lt;/li&gt;
&lt;li&gt;不可以与系统保留字同名。&lt;/li&gt;
&lt;li&gt;不能使用重复的变量名。&lt;/li&gt;
&lt;li&gt;见名知意（规范）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;变量的分类&quot;&gt;&lt;a href=&quot;#变量的分类&quot; class=&quot;headerlink&quot; title=&quot;变量的分类&quot;&gt;&lt;/a&gt;变量的分类&lt;/h2&gt;&lt;h3 id=&quot;根据变量的作用域&quot;&gt;&lt;a href=&quot;#根据变量的作用域&quot; class=&quot;headerlink&quot; title=&quot;根据变量的作用域&quot;&gt;&lt;/a&gt;根据变量的作用域&lt;/h3&gt;&lt;p&gt;C语言根据变量作用域的不同，将变量分为局部变量和全局变量。&lt;/p&gt;
&lt;h4 id=&quot;局部变量&quot;&gt;&lt;a href=&quot;#局部变量&quot; class=&quot;headerlink&quot; title=&quot;局部变量&quot;&gt;&lt;/a&gt;局部变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：在函数内部定义的变量，称为局部变量。形式参数也属于局部变量。&lt;/li&gt;
&lt;li&gt;作用域：局部变量只在定义它的函数内部有效，即局部变量只有在定义它的函数内部使用，其它函数不能使用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;全局变量&quot;&gt;&lt;a href=&quot;#全局变量&quot; class=&quot;headerlink&quot; title=&quot;全局变量&quot;&gt;&lt;/a&gt;全局变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：在所有函数外部定义的变量，称为全局变量。&lt;/li&gt;
&lt;li&gt;作用域：全局变量的作用范围是从定义变量的位置开始到源程序结束，即全局变量可以被在其定义位置之后的其它函数所共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第1行的变量a是全局变量，第5行的变量b是局部变量。&lt;/p&gt;
&lt;h3 id=&quot;根据变量的存储地点&quot;&gt;&lt;a href=&quot;#根据变量的存储地点&quot; class=&quot;headerlink&quot; title=&quot;根据变量的存储地点&quot;&gt;&lt;/a&gt;根据变量的存储地点&lt;/h3&gt;&lt;p&gt;有3个地方可以用于存储变量：普通内存、运行时堆栈、硬件寄存器。变量的存储地点决定了变量何时创建、何时销毁以及它的值能保持多久，也就是决定了变量的生命周期。&lt;/p&gt;
&lt;p&gt;C语言根据变量存储地点的不同，可以把变量分为：自动变量、静态变量、寄存器变量。&lt;/p&gt;
&lt;h4 id=&quot;自动变量&quot;&gt;&lt;a href=&quot;#自动变量&quot; class=&quot;headerlink&quot; title=&quot;自动变量&quot;&gt;&lt;/a&gt;自动变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：自动变量是存储在堆栈中的。&lt;/li&gt;
&lt;li&gt;哪些是自动变量：被关键字&lt;code&gt;auto&lt;/code&gt;修饰的局部变量都是自动变量，但是极少使用这个关键字，基本上是废的，因为所有的局部变量在默认情况下都是自动变量。&lt;/li&gt;
&lt;li&gt;生命周期：在程序执行到声明自动变量的代码块（函数）时，自动变量才被创建，当自动变量所在的代码块（函数）执行完毕后，这些自动变量就会自行销毁。如果一个函数被重复调用，这些自动变量每次都会重新创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第1行的变量a、b，第2行的变量c、第4行的变量d都是自动变量。&lt;/p&gt;
&lt;h4 id=&quot;静态变量&quot;&gt;&lt;a href=&quot;#静态变量&quot; class=&quot;headerlink&quot; title=&quot;静态变量&quot;&gt;&lt;/a&gt;静态变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：静态变量是存储在静态内存中的，也就是不属于堆栈。&lt;/li&gt;
&lt;li&gt;哪些是静态变量：&lt;ol&gt;
&lt;li&gt;所有的全局变量都是静态变量。&lt;/li&gt;
&lt;li&gt;被关键字&lt;code&gt;static&lt;/code&gt;修饰的局部变量也是静态变量。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;生命周期：静态变量在程序&lt;code&gt;运行之前&lt;/code&gt;创建并且只会创建一次，在程序的整个运行期间始终存在，直到程序结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;b=%d, c=%d \n&quot;&lt;/span&gt;, b, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 连续调用3次test函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第3行的变量a、第6行的变量b都是静态变量，第9行的变量c、第16行的变量i是自动变量。&lt;/p&gt;
&lt;p&gt;因为第6行的变量b是静态变量，所以它只会被创建一次，而且生命周期会延续到程序结束。因为它只会创建一次，所以第6行代码只会执行一次，下次再调用test函数时，变量b的值不会被重新初始化为0。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：虽然第6行的变量b是静态变量，但是只改变了它生命周期，并没有改变它的作用域，变量b还是只能在test函数内部使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们在main函数中重复调用test函数3次，输出结果为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607155214183-305983019.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;寄存器变量&quot;&gt;&lt;a href=&quot;#寄存器变量&quot; class=&quot;headerlink&quot; title=&quot;寄存器变量&quot;&gt;&lt;/a&gt;寄存器变量&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;定义：存储在硬件寄存器中的变量，称为寄存器变量。寄存器变量比存储在内存中的变量访问效率更高（默认情况下，自动变量和静态变量都是放在内存中的）。&lt;/li&gt;
&lt;li&gt;哪些变量是寄存器变量：被关键字&lt;code&gt;register&lt;/code&gt;修饰的自动变量都是寄存器变量。&lt;ul&gt;
&lt;li&gt;只有局部变量才可以是寄存器变量。&lt;/li&gt;
&lt;li&gt;寄存器变量只限于int、char和指针类型变量使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生命周期：因为寄存器变量本身就是局部变量，所以函数中的寄存器变量在调用该函数时占用寄存器中存放的值，当函数结束时释放寄存器，变量消失。&lt;/li&gt;
&lt;li&gt;使用注意：&lt;ul&gt;
&lt;li&gt;由于计算机中寄存器数目有限，不能使用太多的寄存器变量。如果寄存器使用饱和时，程序将寄存器变量自动转换为自动变量处理。&lt;/li&gt;
&lt;li&gt;为了提高运算速度，一般会将一些频繁使用的局部变量定义为寄存器变量，这样程序尽可能地为它分配寄存器存放，而不用内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第2行的变量 a 是个寄存器变量。&lt;/p&gt;
&lt;h2 id=&quot;变量定义&quot;&gt;&lt;a href=&quot;#变量定义&quot; class=&quot;headerlink&quot; title=&quot;变量定义&quot;&gt;&lt;/a&gt;变量定义&lt;/h2&gt;&lt;p&gt;总结可得，定义变量需要2个条件：变量类型、变量名。定义变量的格式为：变量类型  变量名；&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在第3行定义了一个名字为i的整型变量，说明i只能存储整型数据；在第5行定义了一个名字为c的字符型变量，说明c只能存储字符型数据。第3、5、7行的代码都称为“语句”，每条语句后面都有个分号“;”。&lt;/p&gt;
&lt;p&gt;于是，系统就会在内存中分别为变量i、c分配一定的存储空间，如下图所示，i和c各占用一块存储空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607173556355-1508318186.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是同一种类型的变量，可以连续定义，变量名之间用逗号,隔开。格式为：变量类型  变量名1, 变量名2, 变量名3, … ;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第3行代码的意思是定义了2个int类型的变量，变量名分别为a、c。&lt;/p&gt;
&lt;h2 id=&quot;变量的使用&quot;&gt;&lt;a href=&quot;#变量的使用&quot; class=&quot;headerlink&quot; title=&quot;变量的使用&quot;&gt;&lt;/a&gt;变量的使用&lt;/h2&gt;&lt;h3 id=&quot;先定义，再初始化&quot;&gt;&lt;a href=&quot;#先定义，再初始化&quot; class=&quot;headerlink&quot; title=&quot;先定义，再初始化&quot;&gt;&lt;/a&gt;先定义，再初始化&lt;/h3&gt;&lt;p&gt;前面已经定义了两个变量，但是这两个变量并没有存储任何值，我们需要给变量进行第一次赋值，也叫做“初始化”。&lt;/p&gt;
&lt;p&gt;变量赋值的格式是：变量名 = 值;&lt;/p&gt;
&lt;p&gt;这个等号”=”是一个赋值运算符，将右边的值赋值给左边的变量，也就是将右边的值存储到左边变量的存储空间中。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在第4行给变量i赋值一个整型常量10，在第7行给变量c赋值一个字符型常量’A’。像第4、7行这样的赋值操作，称为“赋值运算”。&lt;/p&gt;
&lt;p&gt;内存中大致如下图所示，整数10存储在i的存储空间中，字母A存储在c的存储空间中。（其实我这个图并不是很准确，因为内存中的所有数据都是以0和1的形式存储的，比如10，它会存储成1010；字母 A ，它会存储成1000001。这里为了达到直观的效果，就没有写成二进制形式）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607173911043-638078260.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;定义的同时初始化&quot;&gt;&lt;a href=&quot;#定义的同时初始化&quot; class=&quot;headerlink&quot; title=&quot;定义的同时初始化&quot;&gt;&lt;/a&gt;定义的同时初始化&lt;/h3&gt;&lt;p&gt;上面的代码也可以写成下面这样，在定义变量的同时进行初始化：变量类型  变量名 = 值;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; f = &lt;span class=&quot;number&quot;&gt;10.9f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; d = &lt;span class=&quot;number&quot;&gt;9.8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607174035683-177628936.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;可以不断修改&quot;&gt;&lt;a href=&quot;#可以不断修改&quot; class=&quot;headerlink&quot; title=&quot;可以不断修改&quot;&gt;&lt;/a&gt;可以不断修改&lt;/h3&gt;&lt;p&gt;既然i是个变量，说明它的值可以不断地改变，看下面的代码&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i = &lt;span class=&quot;number&quot;&gt;89&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在第3行定义了变量i，并且初始值为10。紧接着在第5行把i的值改为89，这个89会覆盖以前存储的10。&lt;/p&gt;
&lt;h3 id=&quot;const关键字&quot;&gt;&lt;a href=&quot;#const关键字&quot; class=&quot;headerlink&quot; title=&quot;const关键字&quot;&gt;&lt;/a&gt;const关键字&lt;/h3&gt;&lt;p&gt;刚才提到，默认情况下，变量的值是可以不断改变的。不过，有时候我们会希望变量的值只在定义的时候初始化一次，以后都不能再改变，这个时候我们就可以使用&lt;code&gt;const&lt;/code&gt;关键字来修饰变量。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i = &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意第3行，在&lt;code&gt;int&lt;/code&gt;的前面加了个&lt;code&gt;const&lt;/code&gt;关键字。表示变量i的值只会初始化一次，也就是说i的值永远都是一开始的10，以后都不能再改了。所以编译器会报第5行代码的错误，不允许再次修改i的值。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mjios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;M了个J的博客&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>【04】常量</title>
    <link href="http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9004%E3%80%91%E5%B8%B8%E9%87%8F/"/>
    <id>http://sanfordy.com/2016/06/07/1-0 .C语法/【04】常量/</id>
    <published>2016-06-07T07:13:20.000Z</published>
    <updated>2016-06-07T07:27:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是常量&quot;&gt;&lt;a href=&quot;#什么是常量&quot; class=&quot;headerlink&quot; title=&quot;什么是常量&quot;&gt;&lt;/a&gt;什么是常量&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;quot;量&amp;quot;表示数据&lt;/code&gt;。常量，则表示一些固定的数据，也就是不能改变的数据。&lt;/p&gt;
&lt;h2 id=&quot;常量的类型&quot;&gt;&lt;a href=&quot;#常量的类型&quot; class=&quot;headerlink&quot; title=&quot;常量的类型&quot;&gt;&lt;/a&gt;常量的类型&lt;/h2&gt;&lt;h3 id=&quot;整型常量（int）&quot;&gt;&lt;a href=&quot;#整型常量（int）&quot; class=&quot;headerlink&quot; title=&quot;整型常量（int）&quot;&gt;&lt;/a&gt;整型常量（int）&lt;/h3&gt;&lt;p&gt;其实就是 &lt;code&gt;int&lt;/code&gt; 类型的数据，包括了所有的整数，比如6、27、109、256、-10、0、-289等。&lt;/p&gt;
&lt;h3 id=&quot;浮点型常量（float-double）&quot;&gt;&lt;a href=&quot;#浮点型常量（float-double）&quot; class=&quot;headerlink&quot; title=&quot;浮点型常量（float\double）&quot;&gt;&lt;/a&gt;浮点型常量（float\double）&lt;/h3&gt;&lt;p&gt;浮点型常量分为&lt;code&gt;double&lt;/code&gt;和&lt;code&gt;float&lt;/code&gt;两种数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;：双精度浮点型，其实就是小数。比如5.43、-2.3、0.0等，注意，0.0也算是个小数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;：单精度浮点型，也是小数，比&lt;code&gt;double&lt;/code&gt;的精确程度低，也就是说所能表示的小数位数比较少。为了跟&lt;code&gt;double&lt;/code&gt;区分开来， &lt;code&gt;float&lt;/code&gt; 型数据都是以&lt;code&gt;f&lt;/code&gt;结尾的，比如5.43f、-2.3f、0.0f。需要注意的是，绝对不能有10f这样格式的，编译器会直接报错，只有小数才允许加上f。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;字符常量（char）&quot;&gt;&lt;a href=&quot;#字符常量（char）&quot; class=&quot;headerlink&quot; title=&quot;字符常量（char）&quot;&gt;&lt;/a&gt;字符常量（char）&lt;/h3&gt;&lt;p&gt;将一个数字（0~9）、英文字母（a~z、A~Z）或者其他符号（+、-、!、?等）用单引号括起来，这样构成的就是字符常量。比如’6’、’a’、’F’、’+’、’$’等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：单引号只能括住1个字符，而且不能是中文字符，下面的写法是错误的：’abc’、’123456’、’男’。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;字符串常量&quot;&gt;&lt;a href=&quot;#字符串常量&quot; class=&quot;headerlink&quot; title=&quot;字符串常量&quot;&gt;&lt;/a&gt;字符串常量&lt;/h3&gt;&lt;p&gt;将一个或者多个字符用双引号（””）括起来，这样构成的就是字符串常量。比如”6”、”男”、”哇哈哈”、”abcd”、”my_car4”，其实printf(“Hello World”);语句中的”Hello World”就是字符串常量。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mjios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;M了个J的博客&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>【03】数据</title>
    <link href="http://sanfordy.com/2016/06/07/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9003%E3%80%91%E6%95%B0%E6%8D%AE/"/>
    <id>http://sanfordy.com/2016/06/07/1-0 .C语法/【03】数据/</id>
    <published>2016-06-07T06:27:08.000Z</published>
    <updated>2016-06-07T07:08:10.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我们使用计算机的过程中，会接触到各种各样的数据，有文档数据、图片数据、视频数据，还有聊 QQ 时产生的文字数据、用迅雷下载的文件数据等。这讲我们就来介绍C语言中数据的处理。&lt;/p&gt;
&lt;h2 id=&quot;数据的存储&quot;&gt;&lt;a href=&quot;#数据的存储&quot; class=&quot;headerlink&quot; title=&quot;数据的存储&quot;&gt;&lt;/a&gt;数据的存储&lt;/h2&gt;&lt;h3 id=&quot;数据形态&quot;&gt;&lt;a href=&quot;#数据形态&quot; class=&quot;headerlink&quot; title=&quot;数据形态&quot;&gt;&lt;/a&gt;数据形态&lt;/h3&gt;&lt;p&gt;首先来看看计算机是怎么存储数据的。总的来说，计算机中存储的数据可以分为两种：静态数据和动态数据。&lt;/p&gt;
&lt;h4 id=&quot;静态数据&quot;&gt;&lt;a href=&quot;#静态数据&quot; class=&quot;headerlink&quot; title=&quot;静态数据&quot;&gt;&lt;/a&gt;静态数据&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;概念：静态数据是指一些永久性的数据，一般存储在硬盘中。硬盘的存储空间一般都比较大，现在普通计算机的硬盘都有500G左右，因此硬盘中可以存放一些比较大的文件。&lt;/li&gt;
&lt;li&gt;存储的时长：计算机关闭之后再开启，这些数据依旧还在，只要你不主动删掉或者硬盘没坏，这些数据永远都在。&lt;/li&gt;
&lt;li&gt;哪些是静态数据：静态数据一般是以文件的形式存储在硬盘上，比如文档、照片、视频等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;动态数据&quot;&gt;&lt;a href=&quot;#动态数据&quot; class=&quot;headerlink&quot; title=&quot;动态数据&quot;&gt;&lt;/a&gt;动态数据&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;概念：动态数据指在程序运行过程中，动态产生的临时数据，一般存储在内存中。内存的存储空间一般都比较小，现在普通计算机的内存只有4G左右，因此要谨慎使用内存，不要占用太多的内存空间。&lt;/li&gt;
&lt;li&gt;存储的时长：计算机关闭之后，这些临时数据就会被清除。&lt;/li&gt;
&lt;li&gt;哪些是动态数据：当运行某个程序（软件）时，整个程序就会被加载到内存中，在程序运行过程中，会产生各种各样的临时数据，这些临时数据都是存储在内存中的。当程序停止运行或者计算机被强制关闭时，这个程序产生的所有临时数据都会被清除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可能会问，既然硬盘的存储空间这么大，为何不把所有的应用程序加载到硬盘中去执行呢？有个主要原因是内存的访问速度比硬盘快N倍。&lt;/p&gt;
&lt;h4 id=&quot;动态数据和静态数据的转换&quot;&gt;&lt;a href=&quot;#动态数据和静态数据的转换&quot; class=&quot;headerlink&quot; title=&quot;动态数据和静态数据的转换&quot;&gt;&lt;/a&gt;动态数据和静态数据的转换&lt;/h4&gt;&lt;p&gt;硬盘和内存是计算机使用最频繁的两个硬件，它们之间的数据经常要进行转换。&lt;/p&gt;
&lt;p&gt;比如，硬盘上有个叫做“C语言.mp4”的视频文件，现在要使用暴风影音来播放：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143556418-1431912984.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先打开暴风影音软件，计算机会将暴风影音加载到内存中，紧接着计算机会读取硬盘中视频文件的内容到内存中。暴风影音会解析读取到的文件内容，以视频的形式呈现给用户看。这就完成了一个由静态数据到动态数据的转换。&lt;/p&gt;
&lt;p&gt;再比如，你使用迅雷从网上下载一个叫做“C语言.mp4”的视频文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143719574-1356202246.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先打开迅雷软件，计算机会将迅雷加载到内存中，紧接着迅雷就会从互联网下载视频文件。大家都知道，这个下载过程肯定是要耗点时间的，主要受文件大小和下载速度的影响。每个时间段内下载获取的数据都是先放到内存中，然后再写入到硬盘中。所有数据下载完毕后，硬盘中就会有一个完整的视频文件。这就完成了动态数据到静态数据的转换。&lt;/p&gt;
&lt;h3 id=&quot;存储形式&quot;&gt;&lt;a href=&quot;#存储形式&quot; class=&quot;headerlink&quot; title=&quot;存储形式&quot;&gt;&lt;/a&gt;存储形式&lt;/h3&gt;&lt;h4 id=&quot;二进制存储&quot;&gt;&lt;a href=&quot;#二进制存储&quot; class=&quot;headerlink&quot; title=&quot;二进制存储&quot;&gt;&lt;/a&gt;二进制存储&lt;/h4&gt;&lt;p&gt;计算机只能识别0和1。因此，前面所说的静态数据和动态数据，都是以0和1的形式存储的，这种存储方式称为“二进制存储”。有人可能觉得很诧异，只是0和1怎么可能表示这多的数据呢？没错，如果只是一位数字的话，只能表示2种数据：要么是0，要么是1。但是如果有多位数字的话，那情况就不一样了。如果有2位数字，那么就能表示4种数据：00、01、10、11；如果有3位数字呢，就能表示8种数据；以此类推，如果有n位数字，就能表示2的n次方种数据。可以发现，只要位数足够，0和1所能表示的数据是非常庞大的。&lt;/p&gt;
&lt;h4 id=&quot;比特位和字节&quot;&gt;&lt;a href=&quot;#比特位和字节&quot; class=&quot;headerlink&quot; title=&quot;比特位和字节&quot;&gt;&lt;/a&gt;比特位和字节&lt;/h4&gt;&lt;p&gt;平时我们在计算机上看到的MP4、MP3、照片等文件，都是由0和1组合成的，只不过计算机解析了这些0和1，以图形界面的形式呈现在我们眼前。文件越大，所包含的0和1就越多，为了方便计算文件大小，对计量单位做了个规定：1个二进制位为1bit，也就是1个0或1就为1bit，bit的中文翻译是“比特位”；8个二进制位为1byte，也就是8个0或1就为1byte，1byte=8bit，byte的中文翻译是“字节”。平时我们所说的某个文件大小为64B，就是64字节的意思，内部包含了64x8个0和1。&lt;/p&gt;
&lt;p&gt;数据换算：1 KB = 1024 B，1 MB = 1024 KB，1 GB = 1024 MB，1 TB = 1024 GB。&lt;/p&gt;
&lt;h2 id=&quot;数据的类型&quot;&gt;&lt;a href=&quot;#数据的类型&quot; class=&quot;headerlink&quot; title=&quot;数据的类型&quot;&gt;&lt;/a&gt;数据的类型&lt;/h2&gt;&lt;p&gt;C语言有丰富的数据类型，因此它很适合用来编写数据库，如DB2、Oracle都是C语言写的。&lt;/p&gt;
&lt;p&gt;作为程序员，最关心的肯定是内存中的动态数据，因为我们写的程序就是运行在内存中的。程序在运行过程中，会产生各种各样的动态临时数据，为了方便数据的运算和操作，C语言对这些数据进行了分类，提供了丰富的数据类型。大致如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143724168-1786196972.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在图中众多数据类型中，最常用的是4种基本数据类型：char、int、float、double，而最重要的是指针类型，指针使用得当的话，不仅可以节省代码量，还可以优化内存管理、提高性能。因此，指针是一个非常重要的概念，必须重视。如果你说C语言中除了指针，其他都学得挺好的，那你干脆说你没学过C语言。&lt;/p&gt;
&lt;p&gt;这些丰富的数据在C语言中可以用常量或者变量来表示（后面会介绍常量和变量的使用）。&lt;/p&gt;
&lt;h2 id=&quot;数据的访问&quot;&gt;&lt;a href=&quot;#数据的访问&quot; class=&quot;headerlink&quot; title=&quot;数据的访问&quot;&gt;&lt;/a&gt;数据的访问&lt;/h2&gt;&lt;p&gt;数据访问一般分为直接访问和间接访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接访问：直接访问内存单元中的内容。例如: a = 20; b = 2 * a等。&lt;/li&gt;
&lt;li&gt;间接访问：通过内存单元编号以及数据所占字节数访问内存中数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：指针是间接访问的常用方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;不同编译器环境下基本数据类型的存储长度&quot;&gt;&lt;a href=&quot;#不同编译器环境下基本数据类型的存储长度&quot; class=&quot;headerlink&quot; title=&quot;不同编译器环境下基本数据类型的存储长度&quot;&gt;&lt;/a&gt;不同编译器环境下基本数据类型的存储长度&lt;/h2&gt;&lt;p&gt;红色的代表常用的数据类型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607143728402-1476722878.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mjios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;M了个J的博客&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>【02】C语言语法</title>
    <link href="http://sanfordy.com/2016/05/30/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9002%E3%80%91C%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://sanfordy.com/2016/05/30/1-0 .C语法/【02】C语言语法/</id>
    <published>2016-05-30T02:23:42.000Z</published>
    <updated>2016-06-07T03:53:11.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;C语言属于一门高级语言，其实，所有的高级语言的基本语法组成部分都是一样的，只是表现形式不太一样。就好像亚洲人和非洲人，大家都有人类的结构：2只手、2只脚、1个头，只是他们外表不太一样，比如肤色、脸型。因此，你掌握好了一门高级语言，再去学习其他高级语言，那是相当快的。而且，很多其他高级语言，比如后面要学习的 Objective-C ，都是基于C语言、从C语言衍生出来的，好好学习C语言吧，绝对不吃亏。&lt;/p&gt;
&lt;h2 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;h3 id=&quot;什么是关键字&quot;&gt;&lt;a href=&quot;#什么是关键字&quot; class=&quot;headerlink&quot; title=&quot;什么是关键字&quot;&gt;&lt;/a&gt;什么是关键字&lt;/h3&gt;&lt;p&gt;关键字就是C语言提供的有特殊含义的符号，有些地方也叫做“保留字”。&lt;/p&gt;
&lt;h3 id=&quot;都有哪些关键字&quot;&gt;&lt;a href=&quot;#都有哪些关键字&quot; class=&quot;headerlink&quot; title=&quot;都有哪些关键字&quot;&gt;&lt;/a&gt;都有哪些关键字&lt;/h3&gt;&lt;p&gt;C语言一共提供了32个关键字，这些关键字都被C语言赋予了特殊含义。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; return &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大致浏览一遍即可，不用去百度每个关键字的作用，这些关键字以后会经常用到的，到时候你想不记住都难。&lt;/p&gt;
&lt;h3 id=&quot;如何辨别关键字&quot;&gt;&lt;a href=&quot;#如何辨别关键字&quot; class=&quot;headerlink&quot; title=&quot;如何辨别关键字&quot;&gt;&lt;/a&gt;如何辨别关键字&lt;/h3&gt;&lt;p&gt;这些关键字会经常跟其他符号混在一起使用，一个程序里面这么多英文符号，我怎么知道那些是关键字呢？关键字有2大特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部都是小写。&lt;/li&gt;
&lt;li&gt;在开发工具或者智能文本编辑工具（比如 UltraEdit ）中会显示特殊颜色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如下面这段C程序在 UltraEdit 中呈现的样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607104437855-2085184487.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这段代码中，只有 int 和 return 是关键字，C语言中的所有关键字在 UltraEdit 中都会显示蓝色！可以看出， main 并不是关键字。至于 int 和 return 究竟有什么特殊含义，这里先不做讨论，后面会详细介绍。&lt;/p&gt;
&lt;h2 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识符&lt;/h2&gt;&lt;h3 id=&quot;什么是标识符&quot;&gt;&lt;a href=&quot;#什么是标识符&quot; class=&quot;headerlink&quot; title=&quot;什么是标识符&quot;&gt;&lt;/a&gt;什么是标识符&lt;/h3&gt;&lt;p&gt;在程序中使用的变量名、函数名、标号等统称为标识符。除库函数的函数名由系统定义外，其余都由用户自定义。C 规定，标识符只能是字母(A～Z，a～z)、数字(0～9)、下划线(_)组成的字符串，并且其第一个字符不能是数字。&lt;/p&gt;
&lt;h3 id=&quot;在使用标识符时还必须注意以下几点&quot;&gt;&lt;a href=&quot;#在使用标识符时还必须注意以下几点&quot; class=&quot;headerlink&quot; title=&quot;在使用标识符时还必须注意以下几点&quot;&gt;&lt;/a&gt;在使用标识符时还必须注意以下几点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;标准 C 不限制标识符的长度，但它受各种版本的C语言编译系统限制，同时也受到具体机器的限制。例如在某版本 C 中规定标识符前八位有效，当两个标识符前八位相同时，则被认为是同一个标识符。&lt;/li&gt;
&lt;li&gt;在标识符中，大小写是有区别的。例如 BOOK 和 book 是两个不同的标识符。&lt;/li&gt;
&lt;li&gt;标识符虽然可由程序员随意定义，但标识符是用于标识某个量的符号。因此，命名应尽量有相应的意义，以便阅读理解，作到“顾名思义”。如果标识符中含有多个单词，可以使用驼峰标识（除开第一个单词，后面每个单词的首字母都是大写）： firstName 、 myFirstName ，或者使用下划线_来连接： first_name 、 my_first_name 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;表达式&quot;&gt;&lt;a href=&quot;#表达式&quot; class=&quot;headerlink&quot; title=&quot;表达式&quot;&gt;&lt;/a&gt;表达式&lt;/h2&gt;&lt;p&gt;表达式是由常量、变量与运算符组成的。例如：3+5 ， a += b !&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：表达式都会返回值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;语句&quot;&gt;&lt;a href=&quot;#语句&quot; class=&quot;headerlink&quot; title=&quot;语句&quot;&gt;&lt;/a&gt;语句&lt;/h2&gt;&lt;p&gt;语句是程序执⾏的最小单位，以分号结尾。 &lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mjios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;M了个J的博客&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>【01】第一个C程序代码分析</title>
    <link href="http://sanfordy.com/2016/05/17/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9001%E3%80%91%E7%AC%AC%E4%B8%80%E4%B8%AAC%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://sanfordy.com/2016/05/17/1-0 .C语法/【01】第一个C程序代码分析/</id>
    <published>2016-05-17T14:49:20.000Z</published>
    <updated>2016-06-07T03:55:52.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Xcode创建C程序步骤&quot;&gt;&lt;a href=&quot;#Xcode创建C程序步骤&quot; class=&quot;headerlink&quot; title=&quot;Xcode创建C程序步骤&quot;&gt;&lt;/a&gt;Xcode创建C程序步骤&lt;/h2&gt;&lt;h3 id=&quot;打开Xcode&quot;&gt;&lt;a href=&quot;#打开Xcode&quot; class=&quot;headerlink&quot; title=&quot;打开Xcode&quot;&gt;&lt;/a&gt;打开Xcode&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114753808-1887444754.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;选择命令行程序&quot;&gt;&lt;a href=&quot;#选择命令行程序&quot; class=&quot;headerlink&quot; title=&quot;选择命令行程序&quot;&gt;&lt;/a&gt;选择命令行程序&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114803121-1487331799.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;填写项目名称并选择使用C语言&quot;&gt;&lt;a href=&quot;#填写项目名称并选择使用C语言&quot; class=&quot;headerlink&quot; title=&quot;填写项目名称并选择使用C语言&quot;&gt;&lt;/a&gt;填写项目名称并选择使用C语言&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114813058-523307311.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;选择保存目录&quot;&gt;&lt;a href=&quot;#选择保存目录&quot; class=&quot;headerlink&quot; title=&quot;选择保存目录&quot;&gt;&lt;/a&gt;选择保存目录&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114825027-90093732.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;自动生成如下代码&quot;&gt;&lt;a href=&quot;#自动生成如下代码&quot; class=&quot;headerlink&quot; title=&quot;自动生成如下代码&quot;&gt;&lt;/a&gt;自动生成如下代码&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114837011-470505554.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码分析&quot;&gt;&lt;a href=&quot;#代码分析&quot; class=&quot;headerlink&quot; title=&quot;代码分析&quot;&gt;&lt;/a&gt;代码分析&lt;/h2&gt;&lt;p&gt;打开项目中的 main.c 文件（C程序的源文件拓展名为 .c ），可以发现它是C程序中的唯一一个源文件，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来分析一下每行代码的意义。&lt;/p&gt;
&lt;h3 id=&quot;include&quot;&gt;&lt;a href=&quot;#include&quot; class=&quot;headerlink&quot; title=&quot;#include&quot;&gt;&lt;/a&gt;#include&lt;/h3&gt;&lt;p&gt;&lt;code&gt;#include&lt;/code&gt;是C语言的预处理指令之一，所谓预处理，就是在编译之前做的处理，预处理指令一般以&lt;code&gt;#&lt;/code&gt;开头。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#include&lt;/code&gt;指令后面会跟着一个文件名，预处理器发现&lt;code&gt;#include&lt;/code&gt;指令后，就会根据文件名去查找文件，并把这个文件的内容包含到当前文件中。被包含文件中的文本将替换源文件中的&lt;code&gt;#include&lt;/code&gt;指令，就像你把被包含文件中的全部内容拷贝到这个&lt;code&gt;#include&lt;/code&gt;指令所在的位置一样。&lt;/p&gt;
&lt;p&gt;如果被包含的文件拓展名为&lt;code&gt;.h&lt;/code&gt;，我们称之为”头文件”（Header File），头文件可以用来声明函数（”函数”就是面向对象中的”方法”），要想使用这些函数，就必须先用&lt;code&gt;#include&lt;/code&gt;指令包含函数所在的头文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#include&lt;/code&gt;指令不仅仅限于&lt;code&gt;.h&lt;/code&gt;头文件，&lt;code&gt;可以包含任何编译器能识别的C/C++代码文件&lt;/code&gt;，包括&lt;code&gt;.c&lt;/code&gt;、&lt;code&gt;.hpp&lt;/code&gt;、.&lt;code&gt;cpp&lt;/code&gt;等，甚至&lt;code&gt;.txt&lt;/code&gt;、&lt;code&gt;.abc&lt;/code&gt;等等都可以，也就是说你完全可以将第3行到第9行的代码放到其他文件中，然后用 &lt;code&gt;#include&lt;/code&gt;指令包含进来。比如将第3行到第9行的代码放到 my.txt 中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114905949-694429859.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;main.c&lt;/code&gt;源文件中包含 my.txt 文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114916043-985670090.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序还是可以照常运行的，因为&lt;code&gt;#include&lt;/code&gt;的功能就是将文件内容完全拷贝到&lt;code&gt;#include&lt;/code&gt;指令所在的位置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不过你可能会疑惑，为什么&lt;code&gt;stdio.h&lt;/code&gt;用尖括号&amp;lt;&amp;gt;，而 my.txt 用双引号””？这个很好区别，如果是系统自带的文件，最好用&amp;lt;&amp;gt;；如果是开发人员自己创建的文件，最好用””。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：这里用 txt 文件纯属演示，平时做项目不会这样做，除非吃饱了撑着，才会把代码都写到 txt 中去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;stdio-h&quot;&gt;&lt;a href=&quot;#stdio-h&quot; class=&quot;headerlink&quot; title=&quot;stdio.h&quot;&gt;&lt;/a&gt;stdio.h&lt;/h3&gt;&lt;p&gt;&lt;code&gt;stdio.h&lt;/code&gt;是C语言函数库中的一个头文件，里面定义了一些标准输入输出函数。在 main.c 的第1行代码中，用&lt;code&gt;#include&lt;/code&gt;指令包含了&lt;code&gt;stdio.h&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;这里之所以包含&lt;code&gt;stdio.h&lt;/code&gt;文件，是因为在第7行中用到了在&lt;code&gt;stdio.h&lt;/code&gt;内部声明的&lt;code&gt;printf&lt;/code&gt;函数，这个函数可以向标准输出设备（比如显示器屏幕）输出数据，屏幕上输出的文字就是第7行代码&lt;code&gt;printf(&amp;quot;Hello, World!\n&amp;quot;)&lt;/code&gt;造成的，双引号””内的文本为C语言的字符串。&lt;/p&gt;
&lt;h3 id=&quot;main函数&quot;&gt;&lt;a href=&quot;#main函数&quot; class=&quot;headerlink&quot; title=&quot;main函数&quot;&gt;&lt;/a&gt;main函数&lt;/h3&gt;&lt;p&gt;前面也已经提到，C中的函数就是面向对象中的”方法”。 C语言是一门面向过程的语言，是以过程为中心的编程思想，就是先分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用函数就可以了。&lt;/p&gt;
&lt;p&gt;一个C程序中一定会有一个&lt;code&gt;main&lt;/code&gt;函数，也只能有一个&lt;code&gt;main&lt;/code&gt;函数。&lt;code&gt;main&lt;/code&gt;函数是整个 C 程序的入口。&lt;code&gt;main.c&lt;/code&gt;的第3行代码就定义了一个&lt;code&gt;main&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt;函数的返回值为&lt;code&gt;int&lt;/code&gt;类型，接收2个参数，其实可以不写参数， main 函数可以简化成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这里的 main 函数没有写返回值类型，并不代表函数没有返回值，而是表示返回值类型为 int 类型， void 才代表函数没有返回值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于C语言的语法限制不严格，我们还可以进一步简化 main 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：虽然它要求 main 函数返回 int 类型的值，但我们可以不返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;开发和运行C程序的步骤&quot;&gt;&lt;a href=&quot;#开发和运行C程序的步骤&quot; class=&quot;headerlink&quot; title=&quot;开发和运行C程序的步骤&quot;&gt;&lt;/a&gt;开发和运行C程序的步骤&lt;/h2&gt;&lt;p&gt;步骤图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114923027-1543894669.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;编写程序&quot;&gt;&lt;a href=&quot;#编写程序&quot; class=&quot;headerlink&quot; title=&quot;编写程序&quot;&gt;&lt;/a&gt;编写程序&lt;/h3&gt;&lt;p&gt;C语言源文件的扩展名为&lt;code&gt;.c&lt;/code&gt;，源程序（代码）以&lt;code&gt;ASCII&lt;/code&gt;码形式存储于源文件，不能直接被计算机执行，因为计算机只能识别二进制指令，也就是0和1。&lt;/p&gt;
&lt;h3 id=&quot;编译（生成目标文件）&quot;&gt;&lt;a href=&quot;#编译（生成目标文件）&quot; class=&quot;headerlink&quot; title=&quot;编译（生成目标文件）&quot;&gt;&lt;/a&gt;编译（生成目标文件）&lt;/h3&gt;&lt;p&gt;把 C 的源文件（代码）翻译成计算机可以识别的二进制形式的目标文件，这个过程称为编译，由 C 的编译器完成。&lt;/p&gt;
&lt;p&gt;在编译的同时，还对源程序的语法等进行检查。若出现语法错误，则编译失败。如果编译成功则生成目标文件，目标文件名跟源程序文件名一样，扩展名为&lt;code&gt;.obj&lt;/code&gt;。比如，&lt;code&gt;mj.c&lt;/code&gt;编译后生成目标文件&lt;code&gt;mj.obj&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;每个源文件是单独进行编译的，假如一个项目中有多个 .c 源文件，编译成功会生成多个对应的&lt;code&gt;.obj&lt;/code&gt;目标。一般情况下，目标文件之间是有关联的，比如&lt;code&gt;a.obj&lt;/code&gt;可能会调用&lt;code&gt;b.obj&lt;/code&gt;中定义的一个函数，因此它们都不能够单独被计算机执行，而且&lt;code&gt;目标文件中并不包含程序运行所需要的库函数&lt;/code&gt;等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：在编译之前会进行预处理（例如&lt;code&gt;#include&lt;/code&gt;指令）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：编译器不会编译&lt;code&gt;.h&lt;/code&gt;文件，因为在编译前会进行预处理，预处理会把&lt;code&gt;.h&lt;/code&gt;文件的代码拷贝到&lt;code&gt;.c&lt;/code&gt;文件中，从而一起编译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;链接（生成可执行文件）&quot;&gt;&lt;a href=&quot;#链接（生成可执行文件）&quot; class=&quot;headerlink&quot; title=&quot;链接（生成可执行文件）&quot;&gt;&lt;/a&gt;链接（生成可执行文件）&lt;/h3&gt;&lt;p&gt;将所有有关联的&lt;code&gt;obj&lt;/code&gt;目标文件，以及系统提供的C库函数等组合在一起生成一个可执行文件的过程，称为”链接”。链接生成的可执行文件的文件名跟源程序文件同名，扩展名为&lt;code&gt;.exe&lt;/code&gt;，计算机可以直接执行。&lt;/p&gt;
&lt;h3 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h3&gt;&lt;p&gt;如果是在 Windows 环境下，直接双击&lt;code&gt;.exe&lt;/code&gt;文件即可运行C语言程序。&lt;/p&gt;
&lt;p&gt;由于我们的第一个C程序，是在 Mac OS X 系统环境下用 Xcode 创建的命令行项目， Mac OS X 系统是基于 UNIX 系统的，因此生成的可执行文件的这样的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114929699-1395943059.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;双击可以用终端打开：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114935215-625977268.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;多文件开发&quot;&gt;&lt;a href=&quot;#多文件开发&quot; class=&quot;headerlink&quot; title=&quot;多文件开发&quot;&gt;&lt;/a&gt;多文件开发&lt;/h2&gt;&lt;p&gt;在大型项目开发中程序中所有的代码都写到一个文件中是不现实的，我们通常将一个子操作分为两个文件：&lt;code&gt;.c&lt;/code&gt;文件和&lt;code&gt;.h&lt;/code&gt;文件。在&lt;code&gt;.c&lt;/code&gt;文件中实现对应的函数，在&lt;code&gt;.h&lt;/code&gt;中进行函数声明。&lt;/p&gt;
&lt;p&gt;&amp;lt; 代码示例 &amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;main&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;message.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;message.h&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;message.c&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;message.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;lt; 输出结果 &amp;gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello, World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Program ended with &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; code: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现程序仍然可以正常运行。&lt;/p&gt;
&lt;p&gt;但是我们思考一个问题，如果我们不分成两个文件，直接在主函数文件中包含 message.c 是否也可以正常运行呢？答案是否定的，原因是由于编译生成的两个文件 main.obj 和 message.obj 在链接时会发现 main.obj 中已经有 message.obj 中定义的 showMessage 函数，抛出“标示符重复”的错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114940746-1062903242.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mjios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;M了个J的博客&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>【00】C语言简介</title>
    <link href="http://sanfordy.com/2016/05/11/1-0%20.C%E8%AF%AD%E6%B3%95/%E3%80%9000%E3%80%91C%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
    <id>http://sanfordy.com/2016/05/11/1-0 .C语法/【00】C语言简介/</id>
    <published>2016-05-11T15:24:05.000Z</published>
    <updated>2016-06-07T03:51:05.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;计算机常识&quot;&gt;&lt;a href=&quot;#计算机常识&quot; class=&quot;headerlink&quot; title=&quot;计算机常识&quot;&gt;&lt;/a&gt;计算机常识&lt;/h2&gt;&lt;p&gt;在学习C语言之前，先要了解一些计算机常识&lt;/p&gt;
&lt;h3 id=&quot;计算机只能识别0和1&quot;&gt;&lt;a href=&quot;#计算机只能识别0和1&quot; class=&quot;headerlink&quot; title=&quot;计算机只能识别0和1&quot;&gt;&lt;/a&gt;计算机只能识别0和1&lt;/h3&gt;&lt;p&gt;大家都知道，计算机要通电才能工作，说白了，它跟电视、洗衣机一样，都是电器。电器都有个共同的能力：懂得判断通电还是断电，通电就能工作，断电就停止工作。因此，从根本上讲，计算机只能识别电信号：高电平信号（通电）、低电平信号（断电），它只知道某个开关是通电还是断电。我们用1代表高电平，0代表低电平。&lt;/p&gt;
&lt;p&gt;也就说，计算机只能识别0和1。&lt;/p&gt;
&lt;h3 id=&quot;二进制&quot;&gt;&lt;a href=&quot;#二进制&quot; class=&quot;headerlink&quot; title=&quot;二进制&quot;&gt;&lt;/a&gt;二进制&lt;/h3&gt;&lt;p&gt;因为计算机只能识别0和1，因此计算机所能识别的指令和数据都是用二进制数（0和1）来表示的。所谓二进制，就是用0和1来表示所有的数。不过我们日常生活中最常用的是十进制，用0~9来表示所有的数。&lt;/p&gt;
&lt;h4 id=&quot;二进制指令&quot;&gt;&lt;a href=&quot;#二进制指令&quot; class=&quot;headerlink&quot; title=&quot;二进制指令&quot;&gt;&lt;/a&gt;二进制指令&lt;/h4&gt;&lt;p&gt;给计算机灌输一些指令，它就能执行相应的操作，而计算机只能识别由0和1组成的指令。在计算机发展初期，计算机的指令长度为16，即以16个二进制数（0或1）组成一条指令，例如，用1011011000000000这条指令，是让计算机进行一次加法运算。因此，如果要想计算机执行一系列的操作，就必须编写许多条由0和1组成的指令，可以想象的到，这个工作量是如此巨大。&lt;/p&gt;
&lt;h4 id=&quot;二进制数据&quot;&gt;&lt;a href=&quot;#二进制数据&quot; class=&quot;headerlink&quot; title=&quot;二进制数据&quot;&gt;&lt;/a&gt;二进制数据&lt;/h4&gt;&lt;p&gt;平时我们在计算机中存储的一些数据，比如文档、照片、视频等，都是以0和1的形式存储的。只不过计算机解析了这一大堆的0和1，以图形界面的形式将数据展示在我们眼前。&lt;/p&gt;
&lt;h2 id=&quot;程序设计语言的发展史&quot;&gt;&lt;a href=&quot;#程序设计语言的发展史&quot; class=&quot;headerlink&quot; title=&quot;程序设计语言的发展史&quot;&gt;&lt;/a&gt;程序设计语言的发展史&lt;/h2&gt;&lt;p&gt;我们可以利用程序设计语言来编写程序，再将编好的程序运行到计算机上，计算机就能够按照程序中所说的去做。从计算机诞生至今，程序设计语言大致经历了3个发展阶段：机器语言、汇编语言、高级语言。其中， C语言属于高级语言。&lt;/p&gt;
&lt;h3 id=&quot;机器语言&quot;&gt;&lt;a href=&quot;#机器语言&quot; class=&quot;headerlink&quot; title=&quot;机器语言&quot;&gt;&lt;/a&gt;机器语言&lt;/h3&gt;&lt;h4 id=&quot;什么是机器语言&quot;&gt;&lt;a href=&quot;#什么是机器语言&quot; class=&quot;headerlink&quot; title=&quot;什么是机器语言&quot;&gt;&lt;/a&gt;什么是机器语言&lt;/h4&gt;&lt;p&gt;在计算器诞生初期， 所有的计算机程序都是直接用计算机能识别的二进制指令来编写的，也就是说所有的代码里面只有0和1。这种程序设计语言就是“机器语言”。这些由0和1组成的二进制指令，又叫做“机器指令”。&lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;执行效率高：由于机器语言编写出来的代码是能被计算机直接识别的，因此机器语言是直接对硬件产生作用的，程序的执行效率非常高。&lt;/li&gt;
&lt;li&gt;可操作硬件：机器语言能直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;难记：用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令和指令的涵义，指令又多又难记。&lt;/li&gt;
&lt;li&gt;可读性差：编出的程序全是些0和1的指令代码，可读性差，还容易出错。&lt;/li&gt;
&lt;li&gt;可移植性差：由于机器语言是直接对硬件产生作用的，对硬件的依赖性很强，因此不同型号计算机的机器语言又不一样。也就是说，如果2台不同型号的机器想实现一样的功能，需要编写2套完全不同的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看出，机器语言很难掌握和推广，现在除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。&lt;/p&gt;
&lt;h3 id=&quot;汇编语言&quot;&gt;&lt;a href=&quot;#汇编语言&quot; class=&quot;headerlink&quot; title=&quot;汇编语言&quot;&gt;&lt;/a&gt;汇编语言&lt;/h3&gt;&lt;h4 id=&quot;什么是汇编语言&quot;&gt;&lt;a href=&quot;#什么是汇编语言&quot; class=&quot;headerlink&quot; title=&quot;什么是汇编语言&quot;&gt;&lt;/a&gt;什么是汇编语言&lt;/h4&gt;&lt;p&gt;由于机器语言的种种弊端，严重影响开发效率，后面就出现了汇编语言。汇编语言其实就是符号化的机器语言，它用一个符号（英文单词、数字）来代表一条机器指令。比如，在机器语言中，用1011011000000000这条指令，是让计算机进行一次加法运算；而在汇编语言中，用英文单词 “ADD” 就可以表示加法运算。一个有意义的英文单词，很明显比一串又臭又长的二进制指令，直观好记多了。&lt;/p&gt;
&lt;p&gt;由于计算机只能识别0和1，用汇编语言编写的代码是不能被计算机所识别的，像刚才的 “ADD” ，计算机肯定不知道是什么意思。因此，用汇编语言编写的代码需要翻译成二进制指令后，才能被计算机识别。这个翻译的工作交给“编译器”去做。&lt;/p&gt;
&lt;h4 id=&quot;优点-1&quot;&gt;&lt;a href=&quot;#优点-1&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可读性较好：对比机器语言，汇编语言的代码可读性好。&lt;/li&gt;
&lt;li&gt;可操作硬件：汇编语言能像机器语言一样，可以直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。使用汇编语言，可以访问所有能够被访问的软、硬件资源。&lt;/li&gt;
&lt;li&gt;目标代码简短：目标代码就是经编译器翻译过后的二进制代码，占用内存少，执行速度快。（计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。其作用是用于暂时存放 CPU 中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中， CPU 就会把需要运算的数据调到内存中进行运算，当运算完成后内存再将结果传送出来，内存的运行也决定了计算机的稳定运行。）计算机的内存是有限的，因此一个应用程序运行时所占用的内存越少越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缺点-1&quot;&gt;&lt;a href=&quot;#缺点-1&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可移植性差：汇编语言是面向机器的，通常是为特定的计算机或系列计算机专门设计的。因此，不同的机器有不同的汇编语言语法和编译器，代码缺乏可移植性，也就是说，一个程序只能在一种机器上运行，换到其他机器上就不能运行。&lt;/li&gt;
&lt;li&gt;难记：汇编语言的符号非常多、难记，即使是完成简单的功能也需要大量的汇编语言代码，很容易产生 BUG ，难于调试。&lt;/li&gt;
&lt;li&gt;开发效率低：使用汇编语言必须对硬件非常了解，开发效率很低，周期长且单调。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;高级语言&quot;&gt;&lt;a href=&quot;#高级语言&quot; class=&quot;headerlink&quot; title=&quot;高级语言&quot;&gt;&lt;/a&gt;高级语言&lt;/h3&gt;&lt;p&gt;由于汇编语言依赖于硬件，代码可移植性差，符号又多又难记，于是人类就发明了非常接近自然语言的高级语言。后面要学习的C语言就是高级语言。&lt;/p&gt;
&lt;h4 id=&quot;优点-2&quot;&gt;&lt;a href=&quot;#优点-2&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;p&gt;简单、易用、易于理解，语法和结构类似于普通英文，且远离对硬件的直接操作，使得一般人经过学习之后都可以编程，而不用太熟悉硬件知识。&lt;/p&gt;
&lt;p&gt;写出来的程序更加简洁。比如要计算2个数的和，在高级语言中可以写得非常简洁： d=a+b 。但是在机器语言和汇编语言中，就需要几条甚至几十条指令，而且不同机器还要编写不同的指令代码。&lt;/p&gt;
&lt;p&gt;用高级语言编写的同一个程序还可以在不同的机器上运行，具有可移植性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：用高级语言编写的程序不能直接被计算机识别，需要经编译器翻译成二进制指令后，才能运行到计算机上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;C语言简史&quot;&gt;&lt;a href=&quot;#C语言简史&quot; class=&quot;headerlink&quot; title=&quot;C语言简史&quot;&gt;&lt;/a&gt;C语言简史&lt;/h2&gt;&lt;p&gt;C语言于1972年发明，首次使用是用于重写&lt;code&gt;UNIX&lt;/code&gt;操作系统（&lt;code&gt;UNIX&lt;/code&gt;以前是用汇编写的）。随着&lt;code&gt;UNIX&lt;/code&gt;操作系统的成功，C语言也得到了大幅度地推广，至今还是世界上最流行、使用最广泛的高级程序设计语言之一。&lt;/p&gt;
&lt;p&gt;C语言是一门面向过程的语言，非面向对象的语言。&lt;/p&gt;
&lt;h2 id=&quot;C语言的优点&quot;&gt;&lt;a href=&quot;#C语言的优点&quot; class=&quot;headerlink&quot; title=&quot;C语言的优点&quot;&gt;&lt;/a&gt;C语言的优点&lt;/h2&gt;&lt;h3 id=&quot;丰富的运算符&quot;&gt;&lt;a href=&quot;#丰富的运算符&quot; class=&quot;headerlink&quot; title=&quot;丰富的运算符&quot;&gt;&lt;/a&gt;丰富的运算符&lt;/h3&gt;&lt;p&gt;计算机的基本功能就是计算，因此一门程序设计语言的计算能力是非常重要的。C语言提供了34种运算符，计算类型及其丰富，其中包括了最基本的加减乘除运算。&lt;/p&gt;
&lt;h3 id=&quot;丰富的数据类型&quot;&gt;&lt;a href=&quot;#丰富的数据类型&quot; class=&quot;headerlink&quot; title=&quot;丰富的数据类型&quot;&gt;&lt;/a&gt;丰富的数据类型&lt;/h3&gt;&lt;p&gt;C语言之所以生命力如何强大，很大一部分是因为它拥有丰富的数据类型。C语言的数据类型有：整型（int）、实型（float）、字符型（char）、数组类型（int []）、指针类型（void *）、结构体类型（struct）、共用体类型（union）等。众多数据类型中，最强大的是指针，通过指针我们可以直接访问内存地址。指针使用得当的话，不仅可以节省代码量，还可以优化内存管理、提高性能。因此，指针是一个非常重要的概念，必须重视。如果你说 C语言中除了指针，其他都学得挺好的，那你干脆说你没学过C语言。正因为C语言数据类型丰富，运算能力极强，因此很多数据库都是用C语言编写的，比如&lt;code&gt;DB2&lt;/code&gt;、&lt;code&gt;Oracle&lt;/code&gt;等。&lt;/p&gt;
&lt;h3 id=&quot;允许直接访问物理地址，对硬件进行操作&quot;&gt;&lt;a href=&quot;#允许直接访问物理地址，对硬件进行操作&quot; class=&quot;headerlink&quot; title=&quot;允许直接访问物理地址，对硬件进行操作&quot;&gt;&lt;/a&gt;允许直接访问物理地址，对硬件进行操作&lt;/h3&gt;&lt;p&gt;由于C语言允许直接访问物理地址，可以直接对硬件进行操作，因此它既具有高级语言的功能，又具有低级语言的许多功能，能够像汇编语言一样对位（bit）、字节和地址进行操作，而这三者是计算机最基本的工作单元。&lt;/p&gt;
&lt;h3 id=&quot;高效率的目标代码&quot;&gt;&lt;a href=&quot;#高效率的目标代码&quot; class=&quot;headerlink&quot; title=&quot;高效率的目标代码&quot;&gt;&lt;/a&gt;高效率的目标代码&lt;/h3&gt;&lt;p&gt;对比汇编语言，C语言可读性好，易于调试、修改和移植，代码质量与汇编语言相当。&lt;/p&gt;
&lt;h3 id=&quot;可移植性好&quot;&gt;&lt;a href=&quot;#可移植性好&quot; class=&quot;headerlink&quot; title=&quot;可移植性好&quot;&gt;&lt;/a&gt;可移植性好&lt;/h3&gt;&lt;p&gt;在一个环境上用C语言编写的程序，不改动或稍加改动，就可移植到另一个完全不同的环境中运行。&lt;/p&gt;
&lt;h2 id=&quot;C语言的缺点&quot;&gt;&lt;a href=&quot;#C语言的缺点&quot; class=&quot;headerlink&quot; title=&quot;C语言的缺点&quot;&gt;&lt;/a&gt;C语言的缺点&lt;/h2&gt;&lt;h3 id=&quot;封装性差、安全性低&quot;&gt;&lt;a href=&quot;#封装性差、安全性低&quot; class=&quot;headerlink&quot; title=&quot;封装性差、安全性低&quot;&gt;&lt;/a&gt;封装性差、安全性低&lt;/h3&gt;&lt;p&gt;由于C语言是面向过程的，因此它的数据封装性差、安全性低，这就是C语言和其他面向对象语言的区别之一。面向对象语言的特性之一就是数据的封装性。&lt;/p&gt;
&lt;h3 id=&quot;语法限制不严格&quot;&gt;&lt;a href=&quot;#语法限制不严格&quot; class=&quot;headerlink&quot; title=&quot;语法限制不严格&quot;&gt;&lt;/a&gt;语法限制不严格&lt;/h3&gt;&lt;p&gt;对变量的类型约束不严格，对数组下标越界不作检查等。&lt;/p&gt;
&lt;h2 id=&quot;C语言能做什么&quot;&gt;&lt;a href=&quot;#C语言能做什么&quot; class=&quot;headerlink&quot; title=&quot;C语言能做什么&quot;&gt;&lt;/a&gt;C语言能做什么&lt;/h2&gt;&lt;h3 id=&quot;开发计算机软件&quot;&gt;&lt;a href=&quot;#开发计算机软件&quot; class=&quot;headerlink&quot; title=&quot;开发计算机软件&quot;&gt;&lt;/a&gt;开发计算机软件&lt;/h3&gt;&lt;p&gt;由于C语言具有强大的数据处理能力，而且允许直接访问物理地址，直接对硬件操作，因此它适于编写系统软件、图形处理、单片机程序、嵌入式系统开发甚至是用于科研。&lt;/p&gt;
&lt;h3 id=&quot;开发Android&quot;&gt;&lt;a href=&quot;#开发Android&quot; class=&quot;headerlink&quot; title=&quot;开发Android&quot;&gt;&lt;/a&gt;开发Android&lt;/h3&gt;&lt;p&gt;很多操作系统的底层都是用C语言写的，比如 android 。&lt;/p&gt;
&lt;h3 id=&quot;开发iOS&quot;&gt;&lt;a href=&quot;#开发iOS&quot; class=&quot;headerlink&quot; title=&quot;开发iOS&quot;&gt;&lt;/a&gt;开发iOS&lt;/h3&gt;&lt;p&gt;iOS 开发中的核心语言是 Objective-C （简称OC）， OC 是在C语言的基础上加了一层面向对象语法。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mjios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;M了个J的博客&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/776348/201606/776348-20160607114713324-747211849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
