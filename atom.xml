<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanfordy`s home</title>
  <subtitle>Your achievement depends on how many people you can face to talk</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sanfordy.com/"/>
  <updated>2016-05-18T08:53:08.000Z</updated>
  <id>http://sanfordy.com/</id>
  
  <author>
    <name>Sanfordy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【01】第一个C程序代码分析</title>
    <link href="http://sanfordy.com/2016/05/17/%E3%80%9001%E3%80%91%E7%AC%AC%E4%B8%80%E4%B8%AAC%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://sanfordy.com/2016/05/17/【01】第一个C程序代码分析/</id>
    <published>2016-05-17T14:49:20.000Z</published>
    <updated>2016-05-18T08:53:08.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://i2.buimg.com/e383d656c8c135b0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Xcode创建C程序步骤&quot;&gt;&lt;a href=&quot;#Xcode创建C程序步骤&quot; class=&quot;headerlink&quot; title=&quot;Xcode创建C程序步骤&quot;&gt;&lt;/a&gt;Xcode创建C程序步骤&lt;/h2&gt;&lt;h3 id=&quot;打开Xcode&quot;&gt;&lt;a href=&quot;#打开Xcode&quot; class=&quot;headerlink&quot; title=&quot;打开Xcode&quot;&gt;&lt;/a&gt;打开Xcode&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i3.buimg.com/0ae7f5270081062e.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;选择命令行程序&quot;&gt;&lt;a href=&quot;#选择命令行程序&quot; class=&quot;headerlink&quot; title=&quot;选择命令行程序&quot;&gt;&lt;/a&gt;选择命令行程序&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i3.buimg.com/5d7cc5e88e4d4a40.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;填写项目名称并选择使用C语言&quot;&gt;&lt;a href=&quot;#填写项目名称并选择使用C语言&quot; class=&quot;headerlink&quot; title=&quot;填写项目名称并选择使用C语言&quot;&gt;&lt;/a&gt;填写项目名称并选择使用C语言&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i3.buimg.com/d5f8deaac2095553.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;选择保存目录&quot;&gt;&lt;a href=&quot;#选择保存目录&quot; class=&quot;headerlink&quot; title=&quot;选择保存目录&quot;&gt;&lt;/a&gt;选择保存目录&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i3.buimg.com/0ccfc49abcfda066.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;自动生成如下代码&quot;&gt;&lt;a href=&quot;#自动生成如下代码&quot; class=&quot;headerlink&quot; title=&quot;自动生成如下代码&quot;&gt;&lt;/a&gt;自动生成如下代码&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i3.buimg.com/ffda5fc50d03eb7a.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码分析&quot;&gt;&lt;a href=&quot;#代码分析&quot; class=&quot;headerlink&quot; title=&quot;代码分析&quot;&gt;&lt;/a&gt;代码分析&lt;/h2&gt;&lt;p&gt;打开项目中的main.c文件（C程序的源文件拓展名为.c），可以发现它是C程序中的唯一一个源文件，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;include&quot;&gt;&lt;a href=&quot;#include&quot; class=&quot;headerlink&quot; title=&quot;#include&quot;&gt;&lt;/a&gt;#include&lt;/h3&gt;&lt;p&gt; #include 是C语言的预处理指令之一，所谓预处理，就是在编译之前做的处理，预处理指令一般以 # 开头。&lt;/p&gt;
&lt;p&gt; #include 指令后面会跟着一个文件名，预处理器发现 #include 指令后，就会根据文件名去查找文件，并把这个文件的内容包含到当前文件中。被包含文件中的文本将替换源文件中的 #include 指令，就像你把被包含文件中的全部内容拷贝到这个 #include 指令所在的位置一样。&lt;/p&gt;
&lt;p&gt;如果被包含的文件拓展名为.h，我们称之为”头文件”（Header File），头文件可以用来声明函数（”函数”就是面向对象中的”方法”），要想使用这些函数，就必须先用 #include 指令包含函数所在的头文件。&lt;/p&gt;
&lt;p&gt; #include 指令不仅仅限于.h头文件，可以包含任何编译器能识别的C/C++代码文件，包括.c、.hpp、.cpp等，甚至.txt、.abc等等都可以，也就是说你完全可以将第3行到第9行的代码放到其他文件中，然后用 #include 指令包含进来。比如：&lt;br&gt;将第3行到第9行的代码放到my.txt中：&lt;br&gt;&lt;img src=&quot;http://i2.buimg.com/a4f3f34cf4adc4f8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在main.c源文件中包含my.txt文件：&lt;br&gt;&lt;img src=&quot;http://i2.buimg.com/f513cc32db6ad1e6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;程序还是可以照常运行的，因为 #include 的功能就是将文件内容完全拷贝到 #include 指令所在的位置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：不过你可能会疑惑，为什么stdio.h用尖括号&amp;lt;&amp;gt;，而my.txt用双引号”” ？这个很好区别，如果是系统自带的文件，最好用&amp;lt;&amp;gt;；如果是开发人员自己创建的文件，最好用””。&lt;/p&gt;
&lt;p&gt;说明：这里用txt文件纯属演示，平时做项目不会这样做，除非吃饱了撑着，才会把代码都写到txt中去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;stdio-h&quot;&gt;&lt;a href=&quot;#stdio-h&quot; class=&quot;headerlink&quot; title=&quot;stdio.h&quot;&gt;&lt;/a&gt;stdio.h&lt;/h3&gt;&lt;p&gt;stdio.h 是C语言函数库中的一个头文件，里面定义了一些标准输入输出函数。在main.c的第1行代码中，用#include指令包含了stdio.h文件。&lt;/p&gt;
&lt;p&gt;这里之所以包含 stdio.h 文件，是因为在第7行中用到了在 stdio.h 内部声明的printf函数，这个函数可以向标准输出设备（比如显示器屏幕）输出数据，屏幕上输出的文字就是第7行代码printf(“Hello, World!\n”);造成的，双引号””内的文本为C语言的字符串。&lt;/p&gt;
&lt;h3 id=&quot;main函数&quot;&gt;&lt;a href=&quot;#main函数&quot; class=&quot;headerlink&quot; title=&quot;main函数&quot;&gt;&lt;/a&gt;main函数&lt;/h3&gt;&lt;p&gt;前面也已经提到，C中的函数就是面向对象中的”方法”。C语言是一门面向过程的语言，是以过程为中心的编程思想，就是先分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用函数就可以了。&lt;/p&gt;
&lt;p&gt;一个C程序中一定会有一个main函数，也只能有一个main函数。main函数是整个C程序的入口。main.c的第3行代码就定义了一个main函数。&lt;/p&gt;
&lt;p&gt;main函数的返回值为int类型，接收2个参数，其实可以不写参数，main函数可以简化成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：这里的main函数没有写返回值类型，并不代表函数没有返回值，而是表示返回值类型为int类型，void才代表函数没有返回值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于C语言的语法限制不严格，我们还可以进一步简化main函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：虽然它要求main函数返回int类型的值，但我们可以不返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;开发和运行C程序的步骤&quot;&gt;&lt;a href=&quot;#开发和运行C程序的步骤&quot; class=&quot;headerlink&quot; title=&quot;开发和运行C程序的步骤&quot;&gt;&lt;/a&gt;开发和运行C程序的步骤&lt;/h2&gt;&lt;p&gt;步骤图如下：&lt;br&gt;&lt;img src=&quot;http://i4.buimg.com/fda3af31a610f9e5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;编写程序&quot;&gt;&lt;a href=&quot;#编写程序&quot; class=&quot;headerlink&quot; title=&quot;编写程序&quot;&gt;&lt;/a&gt;编写程序&lt;/h3&gt;&lt;p&gt;C语言源文件的扩展名为”.c”，源程序（代码）以ASCII码形式存储于源文件，不能直接被计算机执行，因为计算机只能识别二进制指令，也就是0和1。&lt;/p&gt;
&lt;h3 id=&quot;编译（生成目标文件）&quot;&gt;&lt;a href=&quot;#编译（生成目标文件）&quot; class=&quot;headerlink&quot; title=&quot;编译（生成目标文件）&quot;&gt;&lt;/a&gt;编译（生成目标文件）&lt;/h3&gt;&lt;p&gt;把C的源文件（代码）翻译成计算机可以识别的二进制形式的目标文件，这个过程称为编译，由C的编译器完成。&lt;/p&gt;
&lt;p&gt;在编译的同时，还对源程序的语法等进行检查。若出现语法错误，则编译失败。如果编译成功则生成目标文件，目标文件名跟源程序文件名一样，扩展名为”.obj”。比如，mj.c编译后生成目标文件mj.obj。&lt;/p&gt;
&lt;p&gt;每个源文件是单独进行编译的，假如一个项目中有多个.c源文件，编译成功会生成多个对应的.obj目标。一般情况下，目标文件之间是有关联的，比如 a.obj 可能会调用 b.obj 中定义的一个函数，因此它们都不能够单独被计算机执行，而且&lt;code&gt;目标文件中并不包含程序运行所需要的库函数&lt;/code&gt;等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：在编译之前会进行预处理（例如#include指令）。&lt;/p&gt;
&lt;p&gt;注意：编译器不会编译.h文件，因为在编译前会进行预处理，预处理会把.h文件的代码拷贝到.c文件中，从而一起编译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;链接（生成可执行文件）&quot;&gt;&lt;a href=&quot;#链接（生成可执行文件）&quot; class=&quot;headerlink&quot; title=&quot;链接（生成可执行文件）&quot;&gt;&lt;/a&gt;链接（生成可执行文件）&lt;/h3&gt;&lt;p&gt;将所有有关联的obj目标文件，以及系统提供的C库函数等组合在一起生成一个可执行文件的过程，称为”链接”。&lt;/p&gt;
&lt;p&gt;链接生成的可执行文件的文件名跟源程序文件同名，扩展名为”.exe”，计算机可以直接执行。&lt;/p&gt;
&lt;h3 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h3&gt;&lt;p&gt;如果是在Windows环境下，直接双击”.exe”文件即可运行C语言程序。&lt;/p&gt;
&lt;p&gt;由于我们的第一个C程序，是在Mac OS X系统环境下用Xcode创建的命令行项目，Mac OS X系统是基于UNIX系统的，因此生成的可执行文件的这样的:&lt;br&gt;&lt;img src=&quot;http://i4.buimg.com/6c75203e17bd6ec0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;双击可以用终端打开：&lt;br&gt;&lt;img src=&quot;http://i4.buimg.com/7a5e46c0c4d7d67d.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;多文件开发&quot;&gt;&lt;a href=&quot;#多文件开发&quot; class=&quot;headerlink&quot; title=&quot;多文件开发&quot;&gt;&lt;/a&gt;多文件开发&lt;/h2&gt;&lt;p&gt;在大型项目开发中程序中所有的代码都写到一个文件中是不现实的，我们通常将一个子操作分为两个文件：.c文件和.h文件。在.c文件中实现对应的函数，在.h中进行函数声明。&lt;br&gt;代码示例：&lt;br&gt;&lt;em&gt;main&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;message.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;message.h&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;message.c&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;message.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello, World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Program ended with &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; code: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现程序仍然可以正常运行。&lt;/p&gt;
&lt;p&gt;但是我们思考一个问题，如果我们不分成两个文件，直接在主函数文件中包含message.c是否也可以正常运行呢？&lt;br&gt;答案是否定的，原因是由于编译生成的两个文件main.obj和 message.obj在链接时会发现main.obj中已经有message.obj中定义的showMessage函数，抛出“标示符重复”的错误。&lt;br&gt;&lt;img src=&quot;http://i4.buimg.com/7d38134b7d414433.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i2.buimg.com/e383d656c8c135b0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>【00】C语言简介</title>
    <link href="http://sanfordy.com/2016/05/11/%E3%80%9000%E3%80%91C%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
    <id>http://sanfordy.com/2016/05/11/【00】C语言简介/</id>
    <published>2016-05-11T15:24:05.000Z</published>
    <updated>2016-05-18T06:19:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://i2.buimg.com/e383d656c8c135b0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;大学C语言学的就不够好，一直想自学，后来看了郝斌老师的C语言视频渐渐的开始喜欢C语言了，而这个系列是我结合网上一些参考资料总结的，记下来这些只是为了让我更踏实的学习，也为大家提供一点帮助。&lt;/p&gt;
&lt;h2 id=&quot;计算机常识&quot;&gt;&lt;a href=&quot;#计算机常识&quot; class=&quot;headerlink&quot; title=&quot;计算机常识&quot;&gt;&lt;/a&gt;计算机常识&lt;/h2&gt;&lt;p&gt;在学习C语言之前，先要了解一些计算机常识&lt;/p&gt;
&lt;h3 id=&quot;计算机只能识别0和1&quot;&gt;&lt;a href=&quot;#计算机只能识别0和1&quot; class=&quot;headerlink&quot; title=&quot;计算机只能识别0和1&quot;&gt;&lt;/a&gt;计算机只能识别0和1&lt;/h3&gt;&lt;p&gt;大家都知道，计算机要通电才能工作，说白了，它跟电视、洗衣机一样，都是电器。电器都有个共同的能力：懂得判断通电还是断电，通电就能工作，断电就停止工作。因此，从根本上讲，计算机只能识别电信号：高电平信号（通电）、低电平信号（断电），它只知道某个开关是通电还是断电。我们用1代表高电平，0代表低电平。&lt;/p&gt;
&lt;p&gt;也就说，计算机只能识别0和1。&lt;/p&gt;
&lt;h3 id=&quot;二进制&quot;&gt;&lt;a href=&quot;#二进制&quot; class=&quot;headerlink&quot; title=&quot;二进制&quot;&gt;&lt;/a&gt;二进制&lt;/h3&gt;&lt;p&gt;因为计算机只能识别0和1，因此计算机所能识别的指令和数据都是用二进制数（0和1）来表示的。所谓二进制，就是用0和1来表示所有的数。不过我们日常生活中最常用的是十进制，用0~9来表示所有的数。&lt;/p&gt;
&lt;h4 id=&quot;二进制指令&quot;&gt;&lt;a href=&quot;#二进制指令&quot; class=&quot;headerlink&quot; title=&quot;二进制指令&quot;&gt;&lt;/a&gt;二进制指令&lt;/h4&gt;&lt;p&gt;给计算机灌输一些指令，它就能执行相应的操作，而计算机只能识别由0和1组成的指令。在计算机发展初期，计算机的指令长度为16，即以16个二进制数（0或1）组成一条指令，例如，用1011011000000000这条指令，是让计算机进行一次加法运算。因此，如果要想计算机执行一系列的操作，就必须编写许多条由0和1组成的指令，可以想象的到，这个工作量是如此巨大。&lt;/p&gt;
&lt;h4 id=&quot;二进制数据&quot;&gt;&lt;a href=&quot;#二进制数据&quot; class=&quot;headerlink&quot; title=&quot;二进制数据&quot;&gt;&lt;/a&gt;二进制数据&lt;/h4&gt;&lt;p&gt;平时我们在计算机中存储的一些数据，比如文档、照片、视频等，都是以0和1的形式存储的。只不过计算机解析了这一大堆的0和1，以图形界面的形式将数据展示在我们眼前。&lt;/p&gt;
&lt;h2 id=&quot;程序设计语言的发展史&quot;&gt;&lt;a href=&quot;#程序设计语言的发展史&quot; class=&quot;headerlink&quot; title=&quot;程序设计语言的发展史&quot;&gt;&lt;/a&gt;程序设计语言的发展史&lt;/h2&gt;&lt;p&gt;我们可以利用程序设计语言来编写程序，再将编好的程序运行到计算机上，计算机就能够按照程序中所说的去做。从计算机诞生至今，程序设计语言大致经历了3个发展阶段：机器语言、汇编语言、高级语言。其中，C语言属于高级语言。&lt;/p&gt;
&lt;h3 id=&quot;机器语言&quot;&gt;&lt;a href=&quot;#机器语言&quot; class=&quot;headerlink&quot; title=&quot;机器语言&quot;&gt;&lt;/a&gt;机器语言&lt;/h3&gt;&lt;h4 id=&quot;什么是机器语言&quot;&gt;&lt;a href=&quot;#什么是机器语言&quot; class=&quot;headerlink&quot; title=&quot;什么是机器语言&quot;&gt;&lt;/a&gt;什么是机器语言&lt;/h4&gt;&lt;p&gt;在计算器诞生初期， 所有的计算机程序都是直接用计算机能识别的二进制指令来编写的，也就是说所有的代码里面只有0和1。这种程序设计语言就是“机器语言”。这些由0和1组成的二进制指令，又叫做“机器指令”。&lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;执行效率高：由于机器语言编写出来的代码是能被计算机直接识别的，因此机器语言是直接对硬件产生作用的，程序的执行效率非常高。&lt;/li&gt;
&lt;li&gt;可操作硬件：机器语言能直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;难记：用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令和指令的涵义，指令又多又难记。&lt;/li&gt;
&lt;li&gt;可读性差：编出的程序全是些0和1的指令代码，可读性差，还容易出错。&lt;/li&gt;
&lt;li&gt;可移植性差：由于机器语言是直接对硬件产生作用的，对硬件的依赖性很强，因此不同型号计算机的机器语言又不一样。也就是说，如果2台不同型号的机器想实现一样的功能，需要编写2套完全不同的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看出，机器语言很难掌握和推广，现在除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。&lt;/p&gt;
&lt;h3 id=&quot;汇编语言&quot;&gt;&lt;a href=&quot;#汇编语言&quot; class=&quot;headerlink&quot; title=&quot;汇编语言&quot;&gt;&lt;/a&gt;汇编语言&lt;/h3&gt;&lt;h4 id=&quot;什么是汇编语言&quot;&gt;&lt;a href=&quot;#什么是汇编语言&quot; class=&quot;headerlink&quot; title=&quot;什么是汇编语言&quot;&gt;&lt;/a&gt;什么是汇编语言&lt;/h4&gt;&lt;p&gt;由于机器语言的种种弊端，严重影响开发效率，后面就出现了汇编语言。汇编语言其实就是符号化的机器语言，它用一个符号（英文单词、数字）来代表一条机器指令。比如，在机器语言中，用1011011000000000这条指令，是让计算机进行一次加法运算；而在汇编语言中，用英文单词“ADD”就可以表示加法运算。一个有意义的英文单词，很明显比一串又臭又长的二进制指令，直观好记多了。&lt;/p&gt;
&lt;p&gt;由于计算机只能识别0和1，用汇编语言编写的代码是不能被计算机所识别的，像刚才的“ADD”，计算机肯定不知道是什么意思。因此，用汇编语言编写的代码需要翻译成二进制指令后，才能被计算机识别。这个翻译的工作交给“编译器”去做。&lt;/p&gt;
&lt;h4 id=&quot;优点-1&quot;&gt;&lt;a href=&quot;#优点-1&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可读性较好：对比机器语言，汇编语言的代码可读性好。&lt;/li&gt;
&lt;li&gt;可操作硬件：汇编语言能像机器语言一样，可以直接访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。使用汇编语言，可以访问所有能够被访问的软、硬件资源。&lt;/li&gt;
&lt;li&gt;目标代码简短：目标代码就是经编译器翻译过后的二进制代码，占用内存少，执行速度快。（计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中，CPU就会把需要运算的数据调到内存中进行运算，当运算完成后内存再将结果传送出来，内存的运行也决定了计算机的稳定运行。）计算机的内存是有限的，因此一个应用程序运行时所占用的内存越少越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缺点-1&quot;&gt;&lt;a href=&quot;#缺点-1&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可移植性差：汇编语言是面向机器的，通常是为特定的计算机或系列计算机专门设计的。因此，不同的机器有不同的汇编语言语法和编译器，代码缺乏可移植性，也就是说，一个程序只能在一种机器上运行，换到其他机器上就不能运行。&lt;/li&gt;
&lt;li&gt;难记：汇编语言的符号非常多、难记，即使是完成简单的功能也需要大量的汇编语言代码，很容易产生BUG，难于调试。&lt;/li&gt;
&lt;li&gt;开发效率低：使用汇编语言必须对硬件非常了解，开发效率很低，周期长且单调。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;高级语言&quot;&gt;&lt;a href=&quot;#高级语言&quot; class=&quot;headerlink&quot; title=&quot;高级语言&quot;&gt;&lt;/a&gt;高级语言&lt;/h3&gt;&lt;p&gt;由于汇编语言依赖于硬件，代码可移植性差，符号又多又难记，于是人类就发明了非常接近自然语言的高级语言。后面要学习的C语言就是高级语言。&lt;/p&gt;
&lt;h4 id=&quot;优点-2&quot;&gt;&lt;a href=&quot;#优点-2&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;p&gt;简单、易用、易于理解，语法和结构类似于普通英文，且远离对硬件的直接操作，使得一般人经过学习之后都可以编程，而不用太熟悉硬件知识。&lt;/p&gt;
&lt;p&gt;写出来的程序更加简洁。比如要计算2个数的和，在高级语言中可以写得非常简洁：d=a+b;。但是在机器语言和汇编语言中，就需要几条甚至几十条指令，而且不同机器还要编写不同的指令代码。&lt;/p&gt;
&lt;p&gt;用高级语言编写的同一个程序还可以在不同的机器上运行，具有可移植性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：用高级语言编写的程序不能直接被计算机识别，需要经编译器翻译成二进制指令后，才能运行到计算机上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;C语言简史&quot;&gt;&lt;a href=&quot;#C语言简史&quot; class=&quot;headerlink&quot; title=&quot;C语言简史&quot;&gt;&lt;/a&gt;C语言简史&lt;/h2&gt;&lt;p&gt;C语言于1972年发明，首次使用是用于重写UNIX操作系统（UNIX以前是用汇编写的）。随着UNIX操作系统的成功，C语言也得到了大幅度地推广，至今还是世界上最流行、使用最广泛的高级程序设计语言之一。&lt;/p&gt;
&lt;p&gt;C语言是一门面向过程的语言，非面向对象的语言。&lt;/p&gt;
&lt;h2 id=&quot;C语言的优点&quot;&gt;&lt;a href=&quot;#C语言的优点&quot; class=&quot;headerlink&quot; title=&quot;C语言的优点&quot;&gt;&lt;/a&gt;C语言的优点&lt;/h2&gt;&lt;h3 id=&quot;丰富的运算符&quot;&gt;&lt;a href=&quot;#丰富的运算符&quot; class=&quot;headerlink&quot; title=&quot;丰富的运算符&quot;&gt;&lt;/a&gt;丰富的运算符&lt;/h3&gt;&lt;p&gt;计算机的基本功能就是计算，因此一门程序设计语言的计算能力是非常重要的。C语言提供了34种运算符，计算类型及其丰富，其中包括了最基本的加减乘除运算。&lt;/p&gt;
&lt;h3 id=&quot;丰富的数据类型&quot;&gt;&lt;a href=&quot;#丰富的数据类型&quot; class=&quot;headerlink&quot; title=&quot;丰富的数据类型&quot;&gt;&lt;/a&gt;丰富的数据类型&lt;/h3&gt;&lt;p&gt;C语言之所以生命力如何强大，很大一部分是因为它拥有丰富的数据类型。C语言的数据类型有：整型（int）、实型（float）、字符型（char）、数组类型（int []）、指针类型（void *）、结构体类型（struct）、共用体类型（union）等。众多数据类型中，最强大的是指针，通过指针我们可以直接访问内存地址。指针使用得当的话，不仅可以节省代码量，还可以优化内存管理、提高性能。因此，指针是一个非常重要的概念，必须重视。如果你说C语言中除了指针，其他都学得挺好的，那你干脆说你没学过C语言。正因为C语言数据类型丰富，运算能力极强，因此很多数据库都是用C语言编写的，比如&lt;code&gt;DB2&lt;/code&gt;、&lt;code&gt;Oracle&lt;/code&gt;等。&lt;/p&gt;
&lt;h3 id=&quot;允许直接访问物理地址，对硬件进行操作&quot;&gt;&lt;a href=&quot;#允许直接访问物理地址，对硬件进行操作&quot; class=&quot;headerlink&quot; title=&quot;允许直接访问物理地址，对硬件进行操作&quot;&gt;&lt;/a&gt;允许直接访问物理地址，对硬件进行操作&lt;/h3&gt;&lt;p&gt;由于C语言允许直接访问物理地址，可以直接对硬件进行操作，因此它既具有高级语言的功能，又具有低级语言的许多功能，能够像汇编语言一样对位（bit）、字节和地址进行操作，而这三者是计算机最基本的工作单元。&lt;/p&gt;
&lt;h3 id=&quot;高效率的目标代码&quot;&gt;&lt;a href=&quot;#高效率的目标代码&quot; class=&quot;headerlink&quot; title=&quot;高效率的目标代码&quot;&gt;&lt;/a&gt;高效率的目标代码&lt;/h3&gt;&lt;p&gt;对比汇编语言，C语言可读性好，易于调试、修改和移植，代码质量与汇编语言相当。&lt;/p&gt;
&lt;h3 id=&quot;可移植性好&quot;&gt;&lt;a href=&quot;#可移植性好&quot; class=&quot;headerlink&quot; title=&quot;可移植性好&quot;&gt;&lt;/a&gt;可移植性好&lt;/h3&gt;&lt;p&gt;在一个环境上用C语言编写的程序，不改动或稍加改动，就可移植到另一个完全不同的环境中运行。&lt;/p&gt;
&lt;h2 id=&quot;C语言的缺点&quot;&gt;&lt;a href=&quot;#C语言的缺点&quot; class=&quot;headerlink&quot; title=&quot;C语言的缺点&quot;&gt;&lt;/a&gt;C语言的缺点&lt;/h2&gt;&lt;h3 id=&quot;封装性差、安全性低&quot;&gt;&lt;a href=&quot;#封装性差、安全性低&quot; class=&quot;headerlink&quot; title=&quot;封装性差、安全性低&quot;&gt;&lt;/a&gt;封装性差、安全性低&lt;/h3&gt;&lt;p&gt;由于C语言是面向过程的，因此它的数据封装性差、安全性低，这就是C语言和其他面向对象语言的区别之一。面向对象语言的特性之一就是数据的封装性。&lt;/p&gt;
&lt;h3 id=&quot;语法限制不严格&quot;&gt;&lt;a href=&quot;#语法限制不严格&quot; class=&quot;headerlink&quot; title=&quot;语法限制不严格&quot;&gt;&lt;/a&gt;语法限制不严格&lt;/h3&gt;&lt;p&gt;对变量的类型约束不严格，对数组下标越界不作检查等。&lt;/p&gt;
&lt;h2 id=&quot;C语言能做什么&quot;&gt;&lt;a href=&quot;#C语言能做什么&quot; class=&quot;headerlink&quot; title=&quot;C语言能做什么&quot;&gt;&lt;/a&gt;C语言能做什么&lt;/h2&gt;&lt;h3 id=&quot;开发计算机软件&quot;&gt;&lt;a href=&quot;#开发计算机软件&quot; class=&quot;headerlink&quot; title=&quot;开发计算机软件&quot;&gt;&lt;/a&gt;开发计算机软件&lt;/h3&gt;&lt;p&gt;由于C语言具有强大的数据处理能力，而且允许直接访问物理地址，直接对硬件操作，因此它适于编写系统软件、图形处理、单片机程序、嵌入式系统开发甚至是用于科研。&lt;/p&gt;
&lt;h3 id=&quot;开发Android&quot;&gt;&lt;a href=&quot;#开发Android&quot; class=&quot;headerlink&quot; title=&quot;开发Android&quot;&gt;&lt;/a&gt;开发Android&lt;/h3&gt;&lt;p&gt;很多操作系统的底层都是用C语言写的，比如android。&lt;/p&gt;
&lt;h3 id=&quot;开发iOS&quot;&gt;&lt;a href=&quot;#开发iOS&quot; class=&quot;headerlink&quot; title=&quot;开发iOS&quot;&gt;&lt;/a&gt;开发iOS&lt;/h3&gt;&lt;p&gt;iOS开发中的核心语言是Objective-C（简称OC），OC是在C语言的基础上加了一层面向对象语法。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mjios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;M了个J的博客&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i2.buimg.com/e383d656c8c135b0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1-0. C语法" scheme="http://sanfordy.com/categories/1-0-C%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
